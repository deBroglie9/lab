
SLAVES_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e40  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080080e0  080080e0  000090e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e0  080083e0  0000a118  2**0
                  CONTENTS
  4 .ARM          00000008  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e8  080083e8  0000a118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e8  080083e8  000093e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083ec  080083ec  000093ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  24000000  080083f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d8  24000118  08008508  0000a118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240043f0  08008508  0000a3f0  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  08008508  0000b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000a118  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea11  00000000  00000000  0000a146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005201  00000000  00000000  00028b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  0002dd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001342  00000000  00000000  0002f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040b13  00000000  00000000  00030a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221ca  00000000  00000000  00071535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018f93c  00000000  00000000  000936ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0022303b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070bc  00000000  00000000  00223080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0022a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000118 	.word	0x24000118
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080080c8 	.word	0x080080c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400011c 	.word	0x2400011c
 80002dc:	080080c8 	.word	0x080080c8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003a4:	4b3d      	ldr	r3, [pc, #244]	@ (800049c <SystemInit+0xfc>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003aa:	4a3c      	ldr	r2, [pc, #240]	@ (800049c <SystemInit+0xfc>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003b4:	4b39      	ldr	r3, [pc, #228]	@ (800049c <SystemInit+0xfc>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	4a38      	ldr	r2, [pc, #224]	@ (800049c <SystemInit+0xfc>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c0:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <SystemInit+0x100>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 030f 	and.w	r3, r3, #15
 80003c8:	2b06      	cmp	r3, #6
 80003ca:	d807      	bhi.n	80003dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003cc:	4b34      	ldr	r3, [pc, #208]	@ (80004a0 <SystemInit+0x100>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 030f 	bic.w	r3, r3, #15
 80003d4:	4a32      	ldr	r2, [pc, #200]	@ (80004a0 <SystemInit+0x100>)
 80003d6:	f043 0307 	orr.w	r3, r3, #7
 80003da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003dc:	4b31      	ldr	r3, [pc, #196]	@ (80004a4 <SystemInit+0x104>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a30      	ldr	r2, [pc, #192]	@ (80004a4 <SystemInit+0x104>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e8:	4b2e      	ldr	r3, [pc, #184]	@ (80004a4 <SystemInit+0x104>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ee:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <SystemInit+0x104>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	492c      	ldr	r1, [pc, #176]	@ (80004a4 <SystemInit+0x104>)
 80003f4:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <SystemInit+0x108>)
 80003f6:	4013      	ands	r3, r2
 80003f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003fa:	4b29      	ldr	r3, [pc, #164]	@ (80004a0 <SystemInit+0x100>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	2b00      	cmp	r3, #0
 8000404:	d007      	beq.n	8000416 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000406:	4b26      	ldr	r3, [pc, #152]	@ (80004a0 <SystemInit+0x100>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f023 030f 	bic.w	r3, r3, #15
 800040e:	4a24      	ldr	r2, [pc, #144]	@ (80004a0 <SystemInit+0x100>)
 8000410:	f043 0307 	orr.w	r3, r3, #7
 8000414:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000416:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <SystemInit+0x104>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <SystemInit+0x104>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000422:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <SystemInit+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <SystemInit+0x104>)
 800042a:	4a20      	ldr	r2, [pc, #128]	@ (80004ac <SystemInit+0x10c>)
 800042c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800042e:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <SystemInit+0x104>)
 8000430:	4a1f      	ldr	r2, [pc, #124]	@ (80004b0 <SystemInit+0x110>)
 8000432:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <SystemInit+0x104>)
 8000436:	4a1f      	ldr	r2, [pc, #124]	@ (80004b4 <SystemInit+0x114>)
 8000438:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <SystemInit+0x104>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <SystemInit+0x104>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	@ (80004b4 <SystemInit+0x114>)
 8000444:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <SystemInit+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800044c:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <SystemInit+0x104>)
 800044e:	4a19      	ldr	r2, [pc, #100]	@ (80004b4 <SystemInit+0x114>)
 8000450:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000452:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <SystemInit+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <SystemInit+0x104>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <SystemInit+0x104>)
 800045e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000462:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <SystemInit+0x104>)
 8000466:	2200      	movs	r2, #0
 8000468:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <SystemInit+0x118>)
 800046c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800046e:	4a12      	ldr	r2, [pc, #72]	@ (80004b8 <SystemInit+0x118>)
 8000470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000474:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000476:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <SystemInit+0x11c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <SystemInit+0x120>)
 800047c:	4013      	ands	r3, r2
 800047e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000482:	d202      	bcs.n	800048a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <SystemInit+0x124>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <SystemInit+0x128>)
 800048c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000490:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	52002000 	.word	0x52002000
 80004a4:	58024400 	.word	0x58024400
 80004a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004ac:	02020200 	.word	0x02020200
 80004b0:	01ff0000 	.word	0x01ff0000
 80004b4:	01010280 	.word	0x01010280
 80004b8:	580000c0 	.word	0x580000c0
 80004bc:	5c001000 	.word	0x5c001000
 80004c0:	ffff0000 	.word	0xffff0000
 80004c4:	51008108 	.word	0x51008108
 80004c8:	52004000 	.word	0x52004000

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	24000134 	.word	0x24000134
 80004fc:	24000188 	.word	0x24000188

08000500 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000514:	d101      	bne.n	800051a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <rpmsg_send+0x3c>)
 8000518:	e00c      	b.n	8000534 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000522:	2301      	movs	r3, #1
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	68f8      	ldr	r0, [r7, #12]
 800052e:	f005 f9a7 	bl	8005880 <rpmsg_send_offchannel_raw>
 8000532:	4603      	mov	r3, r0
					 len, true);
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	fffff829 	.word	0xfffff829

08000540 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2220      	movs	r2, #32
 8000552:	68b9      	ldr	r1, [r7, #8]
 8000554:	4618      	mov	r0, r3
 8000556:	f006 ffea 	bl	800752e <strncpy>
	ept->addr = src;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	69fa      	ldr	r2, [r7, #28]
 8000570:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000582:	f000 fc4d 	bl	8000e20 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000586:	4b75      	ldr	r3, [pc, #468]	@ (800075c <main+0x1e0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d11b      	bne.n	80005ca <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000592:	f3bf 8f4f 	dsb	sy
}
 8000596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000598:	f3bf 8f6f 	isb	sy
}
 800059c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800059e:	4b6f      	ldr	r3, [pc, #444]	@ (800075c <main+0x1e0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ac:	f3bf 8f6f 	isb	sy
}
 80005b0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b2:	4b6a      	ldr	r3, [pc, #424]	@ (800075c <main+0x1e0>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a69      	ldr	r2, [pc, #420]	@ (800075c <main+0x1e0>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005be:	f3bf 8f4f 	dsb	sy
}
 80005c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c4:	f3bf 8f6f 	isb	sy
}
 80005c8:	e000      	b.n	80005cc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005cc:	4b63      	ldr	r3, [pc, #396]	@ (800075c <main+0x1e0>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d138      	bne.n	800064a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005d8:	4b60      	ldr	r3, [pc, #384]	@ (800075c <main+0x1e0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005e6:	4b5d      	ldr	r3, [pc, #372]	@ (800075c <main+0x1e0>)
 80005e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005ec:	647b      	str	r3, [r7, #68]	@ 0x44

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005f0:	0b5b      	lsrs	r3, r3, #13
 80005f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005fa:	08db      	lsrs	r3, r3, #3
 80005fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000600:	63fb      	str	r3, [r7, #60]	@ 0x3c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000604:	015a      	lsls	r2, r3, #5
 8000606:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800060a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800060c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800060e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000610:	4952      	ldr	r1, [pc, #328]	@ (800075c <main+0x1e0>)
 8000612:	4313      	orrs	r3, r2
 8000614:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1ef      	bne.n	8000602 <main+0x86>
    } while(sets-- != 0U);
 8000622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	643a      	str	r2, [r7, #64]	@ 0x40
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1e5      	bne.n	80005f8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800062c:	f3bf 8f4f 	dsb	sy
}
 8000630:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000632:	4b4a      	ldr	r3, [pc, #296]	@ (800075c <main+0x1e0>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a49      	ldr	r2, [pc, #292]	@ (800075c <main+0x1e0>)
 8000638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800063c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000644:	f3bf 8f6f 	isb	sy
}
 8000648:	e000      	b.n	800064c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800064a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800064c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000652:	bf00      	nop
 8000654:	4b42      	ldr	r3, [pc, #264]	@ (8000760 <main+0x1e4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d004      	beq.n	800066a <main+0xee>
 8000660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000666:	2b00      	cmp	r3, #0
 8000668:	dcf4      	bgt.n	8000654 <main+0xd8>
  if ( timeout < 0 )
 800066a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800066c:	2b00      	cmp	r3, #0
 800066e:	da01      	bge.n	8000674 <main+0xf8>
  {
  Error_Handler();
 8000670:	f000 fc16 	bl	8000ea0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fdc8 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f882 	bl	8000780 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800067c:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <main+0x1e4>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000682:	4a37      	ldr	r2, [pc, #220]	@ (8000760 <main+0x1e4>)
 8000684:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <main+0x1e4>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800069a:	2000      	movs	r0, #0
 800069c:	f001 f956 	bl	800194c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f001 f96c 	bl	8001980 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80006a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80006ae:	bf00      	nop
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <main+0x1e4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d104      	bne.n	80006c6 <main+0x14a>
 80006bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dcf4      	bgt.n	80006b0 <main+0x134>
if ( timeout < 0 )
 80006c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da01      	bge.n	80006d0 <main+0x154>
{
Error_Handler();
 80006cc:	f000 fbe8 	bl	8000ea0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f8d0 	bl	8000874 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
int32_t status = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Initialize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 80006d8:	f006 faec 	bl	8006cb4 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 80006dc:	2300      	movs	r3, #0
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2300      	movs	r3, #0
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	491d      	ldr	r1, [pc, #116]	@ (8000764 <main+0x1e8>)
 80006ee:	481e      	ldr	r0, [pc, #120]	@ (8000768 <main+0x1ec>)
 80006f0:	f7ff ff26 	bl	8000540 <rpmsg_init_ept>

	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80006f4:	491d      	ldr	r1, [pc, #116]	@ (800076c <main+0x1f0>)
 80006f6:	2000      	movs	r0, #0
 80006f8:	f006 fbf6 	bl	8006ee8 <MX_OPENAMP_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <main+0x18a>
	{
		Error_Handler();
 8000702:	f000 fbcd 	bl	8000ea0 <Error_Handler>

	/*
	* The rpmsg service is initiate by the remote processor, on M7 new_service_cb
	* callback is received on service creation. Wait for the callback
	*/
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000706:	4818      	ldr	r0, [pc, #96]	@ (8000768 <main+0x1ec>)
 8000708:	f006 fca2 	bl	8007050 <OPENAMP_Wait_EndPointready>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of rxTask */
  osThreadDef(rxTask, rxTaskFun, osPriorityNormal, 0, 128);
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <main+0x1f4>)
 800070e:	f107 0420 	add.w	r4, r7, #32
 8000712:	461d      	mov	r5, r3
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rxTaskHandle = osThreadCreate(osThread(rxTask), NULL);
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fcc3 	bl	80030b2 <osThreadCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <main+0x1f8>)
 8000730:	6013      	str	r3, [r2, #0]

  /* definition and creation of txTask */
  osThreadDef(txTask, txTaskFun, osPriorityNormal, 0, 128);
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <main+0x1fc>)
 8000734:	1d3c      	adds	r4, r7, #4
 8000736:	461d      	mov	r5, r3
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  txTaskHandle = osThreadCreate(osThread(txTask), NULL);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fcb2 	bl	80030b2 <osThreadCreate>
 800074e:	4603      	mov	r3, r0
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <main+0x200>)
 8000752:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000754:	f002 fca6 	bl	80030a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <main+0x1dc>
 800075c:	e000ed00 	.word	0xe000ed00
 8000760:	58024400 	.word	0x58024400
 8000764:	080080e0 	.word	0x080080e0
 8000768:	24000388 	.word	0x24000388
 800076c:	080009b9 	.word	0x080009b9
 8000770:	080080f8 	.word	0x080080f8
 8000774:	2400043c 	.word	0x2400043c
 8000778:	0800811c 	.word	0x0800811c
 800077c:	24000440 	.word	0x24000440

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	@ 0x70
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	224c      	movs	r2, #76	@ 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f006 feb3 	bl	80074fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2220      	movs	r2, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f006 fead 	bl	80074fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007a0:	2004      	movs	r0, #4
 80007a2:	f001 f92d 	bl	8001a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b30      	ldr	r3, [pc, #192]	@ (800086c <SystemClock_Config+0xec>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ae:	4a2f      	ldr	r2, [pc, #188]	@ (800086c <SystemClock_Config+0xec>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007b6:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <SystemClock_Config+0xec>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <SystemClock_Config+0xf0>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000870 <SystemClock_Config+0xf0>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <SystemClock_Config+0xf0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d8:	bf00      	nop
 80007da:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <SystemClock_Config+0xf0>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007e6:	d1f8      	bne.n	80007da <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007fe:	2364      	movs	r3, #100	@ 0x64
 8000800:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000806:	2304      	movs	r3, #4
 8000808:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800080e:	230c      	movs	r3, #12
 8000810:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000812:	2300      	movs	r3, #0
 8000814:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	4618      	mov	r0, r3
 8000820:	f001 f948 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800082a:	f000 fb39 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	233f      	movs	r3, #63	@ 0x3f
 8000830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800083a:	2308      	movs	r3, #8
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800083e:	2340      	movs	r3, #64	@ 0x40
 8000840:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000842:	2340      	movs	r3, #64	@ 0x40
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800084c:	2340      	movs	r3, #64	@ 0x40
 800084e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fd87 	bl	8002368 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000860:	f000 fb1e 	bl	8000ea0 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3770      	adds	r7, #112	@ 0x70
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58000400 	.word	0x58000400
 8000870:	58024800 	.word	0x58024800

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	4b33      	ldr	r3, [pc, #204]	@ (8000958 <MX_GPIO_Init+0xe4>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	4a31      	ldr	r2, [pc, #196]	@ (8000958 <MX_GPIO_Init+0xe4>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <MX_GPIO_Init+0xe4>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <MX_GPIO_Init+0xe4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000958 <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_GPIO_Init+0xe4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SSI2_CLK_Pin|SSI3_CLK_Pin|SSI4_CLK_Pin|SSI5_CLK_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f642 1109 	movw	r1, #10505	@ 0x2909
 80008cc:	4823      	ldr	r0, [pc, #140]	@ (800095c <MX_GPIO_Init+0xe8>)
 80008ce:	f001 f823 	bl	8001918 <HAL_GPIO_WritePin>
                          |SSI1_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SSI6_CLK_Pin|SSI7_CLK_Pin|SSI8_CLK_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 80008d8:	4821      	ldr	r0, [pc, #132]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008da:	f001 f81d 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSI2_CLK_Pin SSI3_CLK_Pin SSI4_CLK_Pin SSI5_CLK_Pin
                           SSI1_CLK_Pin */
  GPIO_InitStruct.Pin = SSI2_CLK_Pin|SSI3_CLK_Pin|SSI4_CLK_Pin|SSI5_CLK_Pin
 80008de:	f642 1309 	movw	r3, #10505	@ 0x2909
 80008e2:	60fb      	str	r3, [r7, #12]
                          |SSI1_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4819      	ldr	r0, [pc, #100]	@ (800095c <MX_GPIO_Init+0xe8>)
 80008f8:	f000 fe46 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSI2_RX_Pin SSI3_RX_Pin SSI4_RX_Pin SSI5_RX_Pin
                           SSI1_RX_Pin */
  GPIO_InitStruct.Pin = SSI2_RX_Pin|SSI3_RX_Pin|SSI4_RX_Pin|SSI5_RX_Pin
 80008fc:	f245 2312 	movw	r3, #21010	@ 0x5212
 8000900:	60fb      	str	r3, [r7, #12]
                          |SSI1_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4812      	ldr	r0, [pc, #72]	@ (800095c <MX_GPIO_Init+0xe8>)
 8000912:	f000 fe39 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSI6_CLK_Pin SSI7_CLK_Pin SSI8_CLK_Pin */
  GPIO_InitStruct.Pin = SSI6_CLK_Pin|SSI7_CLK_Pin|SSI8_CLK_Pin;
 8000916:	f44f 63a8 	mov.w	r3, #1344	@ 0x540
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <MX_GPIO_Init+0xec>)
 8000930:	f000 fe2a 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSI6_RX_Pin SSI7_RX_Pin SSI8_RX_Pin */
  GPIO_InitStruct.Pin = SSI6_RX_Pin|SSI7_RX_Pin|SSI8_RX_Pin;
 8000934:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_GPIO_Init+0xec>)
 800094a:	f000 fe1d 	bl	8001588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	58024400 	.word	0x58024400
 800095c:	58021000 	.word	0x58021000
 8000960:	58021800 	.word	0x58021800

08000964 <rpmsg_recv_callback>:

/* USER CODE BEGIN 4 */


static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	603b      	str	r3, [r7, #0]
  received_data = *((unsigned int *) data);
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <rpmsg_recv_callback+0x2c>)
 8000978:	6013      	str	r3, [r2, #0]
  message_received=1;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <rpmsg_recv_callback+0x30>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]

  return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	240003d0 	.word	0x240003d0
 8000994:	240003c8 	.word	0x240003c8

08000998 <service_destroy_cb>:

void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* this function is called while remote endpoint as been destroyed, the
   * service is no more available
   */
  service_created = 0;
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <service_destroy_cb+0x1c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	240003cc 	.word	0x240003cc

080009b8 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  /* create a endpoint for rmpsg communication */
  OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback, service_destroy_cb);
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <new_service_cb+0x2c>)
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <new_service_cb+0x30>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	4807      	ldr	r0, [pc, #28]	@ (80009ec <new_service_cb+0x34>)
 80009d0:	f006 fb20 	bl	8007014 <OPENAMP_create_endpoint>
  service_created = 1;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <new_service_cb+0x38>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08000999 	.word	0x08000999
 80009e8:	08000965 	.word	0x08000965
 80009ec:	24000388 	.word	0x24000388
 80009f0:	240003cc 	.word	0x240003cc

080009f4 <GraytoNatural>:

uint32_t GraytoNatural(uint32_t gary)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    uint32_t natural = gary;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60fb      	str	r3, [r7, #12]
    while (gary != 0)
 8000a00:	e006      	b.n	8000a10 <GraytoNatural+0x1c>
    {
        gary = gary >> 1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
        natural ^= gary;
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
    while (gary != 0)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f5      	bne.n	8000a02 <GraytoNatural+0xe>
    }
    return natural;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <dev_encoder_read>:


void dev_encoder_read(int ssi,float *pangle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
    binary_code = GraytoNatural(hal_ssi_readbit(ssi,21));
 8000a2e:	2115      	movs	r1, #21
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f969 	bl	8000d08 <hal_ssi_readbit>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ffdb 	bl	80009f4 <GraytoNatural>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <dev_encoder_read+0x7c>)
 8000a42:	6013      	str	r3, [r2, #0]
    *pangle = ((float)(binary_code))/ 2097152 * 360;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <dev_encoder_read+0x7c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a50:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000aa4 <dev_encoder_read+0x80>
 8000a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a58:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000aa8 <dev_encoder_read+0x84>
 8000a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	edc3 7a00 	vstr	s15, [r3]
//   *pangle = ceil(100 * *pangle)/100;
    if((ssi==6)||(ssi==7)){
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d002      	beq.n	8000a72 <dev_encoder_read+0x4e>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b07      	cmp	r3, #7
 8000a70:	d111      	bne.n	8000a96 <dev_encoder_read+0x72>
    	*pangle=*pangle*(-1);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	eef1 7a67 	vneg.f32	s15, s15
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	edc3 7a00 	vstr	s15, [r3]
    	*pangle=*pangle+360;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	edd3 7a00 	vldr	s15, [r3]
 8000a88:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000aa8 <dev_encoder_read+0x84>
 8000a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	edc3 7a00 	vstr	s15, [r3]
    }
//    *pangle = (float)((binary_code)- 4194304)/ 4194304 * 360;
//	*pangle=*pangle+180;//rj2
//	if(*pangle>180) *pangle=*pangle-360;
	//*pangle=*pangle*(-1);
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	240003d4 	.word	0x240003d4
 8000aa4:	4a000000 	.word	0x4a000000
 8000aa8:	43b40000 	.word	0x43b40000

08000aac <hai_ssi_clk_clr>:
void hai_ssi_clk_clr(int ssi){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    switch(ssi){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b07      	cmp	r3, #7
 8000ab8:	d847      	bhi.n	8000b4a <hai_ssi_clk_clr+0x9e>
 8000aba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <hai_ssi_clk_clr+0x14>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ae1 	.word	0x08000ae1
 8000ac4:	08000aed 	.word	0x08000aed
 8000ac8:	08000af9 	.word	0x08000af9
 8000acc:	08000b07 	.word	0x08000b07
 8000ad0:	08000b15 	.word	0x08000b15
 8000ad4:	08000b23 	.word	0x08000b23
 8000ad8:	08000b2f 	.word	0x08000b2f
 8000adc:	08000b3d 	.word	0x08000b3d
	case 0:  HAL_SSI_CLK_CLR;    break;
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <hai_ssi_clk_clr+0xa8>)
 8000ae6:	f000 ff17 	bl	8001918 <HAL_GPIO_WritePin>
 8000aea:	e02f      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 1:  HAL_SSI2_CLK_CLR;   break;
 8000aec:	2200      	movs	r2, #0
 8000aee:	2108      	movs	r1, #8
 8000af0:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <hai_ssi_clk_clr+0xa8>)
 8000af2:	f000 ff11 	bl	8001918 <HAL_GPIO_WritePin>
 8000af6:	e029      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 2:  HAL_SSI3_CLK_CLR;   break;
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afe:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <hai_ssi_clk_clr+0xa8>)
 8000b00:	f000 ff0a 	bl	8001918 <HAL_GPIO_WritePin>
 8000b04:	e022      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 3:  HAL_SSI4_CLK_CLR;   break;
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <hai_ssi_clk_clr+0xa8>)
 8000b0e:	f000 ff03 	bl	8001918 <HAL_GPIO_WritePin>
 8000b12:	e01b      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 4:  HAL_SSI5_CLK_CLR;   break;
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <hai_ssi_clk_clr+0xa8>)
 8000b1c:	f000 fefc 	bl	8001918 <HAL_GPIO_WritePin>
 8000b20:	e014      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 5:  HAL_SSI6_CLK_CLR;   break;
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <hai_ssi_clk_clr+0xac>)
 8000b28:	f000 fef6 	bl	8001918 <HAL_GPIO_WritePin>
 8000b2c:	e00e      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 6:  HAL_SSI7_CLK_CLR;   break;
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <hai_ssi_clk_clr+0xac>)
 8000b36:	f000 feef 	bl	8001918 <HAL_GPIO_WritePin>
 8000b3a:	e007      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	case 7:  HAL_SSI8_CLK_CLR;   break;
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <hai_ssi_clk_clr+0xac>)
 8000b44:	f000 fee8 	bl	8001918 <HAL_GPIO_WritePin>
 8000b48:	e000      	b.n	8000b4c <hai_ssi_clk_clr+0xa0>
	default: break;
 8000b4a:	bf00      	nop
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58021000 	.word	0x58021000
 8000b58:	58021800 	.word	0x58021800

08000b5c <hai_ssi_clk_set>:
void hai_ssi_clk_set(int ssi){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    switch(ssi){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	d847      	bhi.n	8000bfa <hai_ssi_clk_set+0x9e>
 8000b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <hai_ssi_clk_set+0x14>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b91 	.word	0x08000b91
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	08000ba9 	.word	0x08000ba9
 8000b7c:	08000bb7 	.word	0x08000bb7
 8000b80:	08000bc5 	.word	0x08000bc5
 8000b84:	08000bd3 	.word	0x08000bd3
 8000b88:	08000bdf 	.word	0x08000bdf
 8000b8c:	08000bed 	.word	0x08000bed
	case 0:  HAL_SSI_CLK_SET;    break;
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	481b      	ldr	r0, [pc, #108]	@ (8000c04 <hai_ssi_clk_set+0xa8>)
 8000b96:	f000 febf 	bl	8001918 <HAL_GPIO_WritePin>
 8000b9a:	e02f      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 1:  HAL_SSI2_CLK_SET;   break;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <hai_ssi_clk_set+0xa8>)
 8000ba2:	f000 feb9 	bl	8001918 <HAL_GPIO_WritePin>
 8000ba6:	e029      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 2:  HAL_SSI3_CLK_SET;   break;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bae:	4815      	ldr	r0, [pc, #84]	@ (8000c04 <hai_ssi_clk_set+0xa8>)
 8000bb0:	f000 feb2 	bl	8001918 <HAL_GPIO_WritePin>
 8000bb4:	e022      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 3:  HAL_SSI4_CLK_SET;   break;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <hai_ssi_clk_set+0xa8>)
 8000bbe:	f000 feab 	bl	8001918 <HAL_GPIO_WritePin>
 8000bc2:	e01b      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 4:  HAL_SSI5_CLK_SET;   break;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bca:	480e      	ldr	r0, [pc, #56]	@ (8000c04 <hai_ssi_clk_set+0xa8>)
 8000bcc:	f000 fea4 	bl	8001918 <HAL_GPIO_WritePin>
 8000bd0:	e014      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 5:  HAL_SSI6_CLK_SET;   break;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <hai_ssi_clk_set+0xac>)
 8000bd8:	f000 fe9e 	bl	8001918 <HAL_GPIO_WritePin>
 8000bdc:	e00e      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 6:  HAL_SSI7_CLK_SET;   break;
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <hai_ssi_clk_set+0xac>)
 8000be6:	f000 fe97 	bl	8001918 <HAL_GPIO_WritePin>
 8000bea:	e007      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	case 7:  HAL_SSI8_CLK_SET;   break;
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <hai_ssi_clk_set+0xac>)
 8000bf4:	f000 fe90 	bl	8001918 <HAL_GPIO_WritePin>
 8000bf8:	e000      	b.n	8000bfc <hai_ssi_clk_set+0xa0>
	default: break;
 8000bfa:	bf00      	nop
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58021000 	.word	0x58021000
 8000c08:	58021800 	.word	0x58021800

08000c0c <hai_ssi_data_in>:
GPIO_PinState hai_ssi_data_in(int ssi){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	GPIO_PinState pin_state=0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
	switch(ssi){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d84f      	bhi.n	8000cbe <hai_ssi_data_in+0xb2>
 8000c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <hai_ssi_data_in+0x18>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c45 	.word	0x08000c45
 8000c28:	08000c53 	.word	0x08000c53
 8000c2c:	08000c61 	.word	0x08000c61
 8000c30:	08000c71 	.word	0x08000c71
 8000c34:	08000c81 	.word	0x08000c81
 8000c38:	08000c91 	.word	0x08000c91
 8000c3c:	08000c9f 	.word	0x08000c9f
 8000c40:	08000caf 	.word	0x08000caf
	case 0:  pin_state=HAL_SSI_DATA_IN;    break;
 8000c44:	2102      	movs	r1, #2
 8000c46:	4822      	ldr	r0, [pc, #136]	@ (8000cd0 <hai_ssi_data_in+0xc4>)
 8000c48:	f000 fe4e 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e038      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 1:  pin_state=HAL_SSI2_DATA_IN;   break;
 8000c52:	2110      	movs	r1, #16
 8000c54:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <hai_ssi_data_in+0xc4>)
 8000c56:	f000 fe47 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e031      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 2:  pin_state=HAL_SSI3_DATA_IN;   break;
 8000c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c64:	481a      	ldr	r0, [pc, #104]	@ (8000cd0 <hai_ssi_data_in+0xc4>)
 8000c66:	f000 fe3f 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e029      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 3:  pin_state=HAL_SSI4_DATA_IN;   break;
 8000c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c74:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <hai_ssi_data_in+0xc4>)
 8000c76:	f000 fe37 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e021      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 4:  pin_state=HAL_SSI5_DATA_IN;   break;
 8000c80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <hai_ssi_data_in+0xc4>)
 8000c86:	f000 fe2f 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
 8000c8e:	e019      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 5:  pin_state=HAL_SSI6_DATA_IN;   break;
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <hai_ssi_data_in+0xc8>)
 8000c94:	f000 fe28 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e012      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 6:  pin_state=HAL_SSI7_DATA_IN;   break;
 8000c9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca2:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <hai_ssi_data_in+0xc8>)
 8000ca4:	f000 fe20 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e00a      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	case 7:  pin_state=HAL_SSI8_DATA_IN;   break;
 8000cae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cb2:	4808      	ldr	r0, [pc, #32]	@ (8000cd4 <hai_ssi_data_in+0xc8>)
 8000cb4:	f000 fe18 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e002      	b.n	8000cc4 <hai_ssi_data_in+0xb8>
	default: pin_state= 0;  break;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	bf00      	nop

	return pin_state;
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	58021000 	.word	0x58021000
 8000cd4:	58021800 	.word	0x58021800

08000cd8 <hal_ssi_delay_us>:


static void hal_ssi_delay_us(uint16_t us)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	int c = 62*us;
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
    while (c--);
 8000cee:	bf00      	nop
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	60fa      	str	r2, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1fa      	bne.n	8000cf0 <hal_ssi_delay_us+0x18>
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <hal_ssi_readbit>:

uint32_t hal_ssi_readbit(int ssi,uint8_t nbit)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
	uint32_t temp = 0; uint8_t i;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
    __disable_irq();
    hai_ssi_clk_clr(ssi);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fec5 	bl	8000aac <hai_ssi_clk_clr>
    hal_ssi_delay_us(5);
 8000d22:	2005      	movs	r0, #5
 8000d24:	f7ff ffd8 	bl	8000cd8 <hal_ssi_delay_us>
    for (i = nbit; i > 0; i--)
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	72fb      	strb	r3, [r7, #11]
 8000d2c:	e01b      	b.n	8000d66 <hal_ssi_readbit+0x5e>
    {
    	hai_ssi_clk_set(ssi);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff14 	bl	8000b5c <hai_ssi_clk_set>
    	hal_ssi_delay_us(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff ffcf 	bl	8000cd8 <hal_ssi_delay_us>
    	hai_ssi_clk_clr(ssi);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff feb6 	bl	8000aac <hai_ssi_clk_clr>
    	temp <<= 1;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
        if ((hai_ssi_data_in(ssi)) != 0)
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff60 	bl	8000c0c <hai_ssi_data_in>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <hal_ssi_readbit+0x52>
        {
            temp |= 0x01;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
        }
        hal_ssi_delay_us(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff ffbc 	bl	8000cd8 <hal_ssi_delay_us>
    for (i = nbit; i > 0; i--)
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	72fb      	strb	r3, [r7, #11]
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1e0      	bne.n	8000d2e <hal_ssi_readbit+0x26>

    }
    hai_ssi_clk_set(ssi);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fef5 	bl	8000b5c <hai_ssi_clk_set>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d72:	b662      	cpsie	i
}
 8000d74:	bf00      	nop
    __enable_irq();
    return temp;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <rxTaskFun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_rxTaskFun */
void rxTaskFun(void const * argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {		for(int i = 0;i<8;i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	e017      	b.n	8000dbe <rxTaskFun+0x3e>
  	  {
			dev_encoder_read(i,&angle[i]);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <rxTaskFun+0x48>)
 8000d94:	4413      	add	r3, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fe43 	bl	8000a24 <dev_encoder_read>
			angle_fd[i]=angle[i];
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <rxTaskFun+0x48>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <rxTaskFun+0x4c>)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	601a      	str	r2, [r3, #0]
			osDelay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f002 f9c9 	bl	800314a <osDelay>
  {		for(int i = 0;i<8;i++)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	dde4      	ble.n	8000d8e <rxTaskFun+0xe>
 8000dc4:	e7e0      	b.n	8000d88 <rxTaskFun+0x8>
 8000dc6:	bf00      	nop
 8000dc8:	240003f8 	.word	0x240003f8
 8000dcc:	240003d8 	.word	0x240003d8

08000dd0 <txTaskFun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_txTaskFun */
void txTaskFun(void const * argument)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  memcpy(ang, &angle_fd, sizeof(ang));
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <txTaskFun+0x40>)
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <txTaskFun+0x44>)
 8000ddc:	4614      	mov	r4, r2
 8000dde:	461d      	mov	r5, r3
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		message=(uint32_t)angle_fd;
		status = OPENAMP_send(&rp_endpoint, &ang, sizeof(ang));
 8000dec:	2220      	movs	r2, #32
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <txTaskFun+0x40>)
 8000df0:	4809      	ldr	r0, [pc, #36]	@ (8000e18 <txTaskFun+0x48>)
 8000df2:	f7ff fb85 	bl	8000500 <rpmsg_send>
 8000df6:	60f8      	str	r0, [r7, #12]
		status_sta=status;
 8000df8:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <txTaskFun+0x4c>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6013      	str	r3, [r2, #0]
//	  message++;
	  osDelay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f002 f9a3 	bl	800314a <osDelay>
	  		if (status < 0)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	dae6      	bge.n	8000dd8 <txTaskFun+0x8>
	  		{
	  			Error_Handler();
 8000e0a:	f000 f849 	bl	8000ea0 <Error_Handler>
	  memcpy(ang, &angle_fd, sizeof(ang));
 8000e0e:	e7e3      	b.n	8000dd8 <txTaskFun+0x8>
 8000e10:	24000418 	.word	0x24000418
 8000e14:	240003d8 	.word	0x240003d8
 8000e18:	24000388 	.word	0x24000388
 8000e1c:	24000438 	.word	0x24000438

08000e20 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e32:	f000 fb31 	bl	8001498 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000e3e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000e42:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e44:	230f      	movs	r3, #15
 8000e46:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e50:	2303      	movs	r3, #3
 8000e52:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fb4e 	bl	8001508 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f000 fb2b 	bl	80014c8 <HAL_MPU_Enable>

}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8e:	f000 f9f7 	bl	8001280 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_MspInit+0x48>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_MspInit+0x48>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_MspInit+0x48>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f06f 0001 	mvn.w	r0, #1
 8000ed8:	f000 fab6 	bl	8001448 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2105      	movs	r1, #5
 8000ee0:	207d      	movs	r0, #125	@ 0x7d
 8000ee2:	f000 fab1 	bl	8001448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000ee6:	207d      	movs	r0, #125	@ 0x7d
 8000ee8:	f000 fac8 	bl	800147c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	@ 0x40
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d827      	bhi.n	8000f56 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	2036      	movs	r0, #54	@ 0x36
 8000f0c:	f000 fa9c 	bl	8001448 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f10:	2036      	movs	r0, #54	@ 0x36
 8000f12:	f000 fab3 	bl	800147c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000f16:	4a29      	ldr	r2, [pc, #164]	@ (8000fbc <HAL_InitTick+0xc4>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <HAL_InitTick+0xc8>)
 8000f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f22:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <HAL_InitTick+0xc8>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f2c:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <HAL_InitTick+0xc8>)
 8000f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3a:	f107 0210 	add.w	r2, r7, #16
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fd85 	bl	8002a54 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d106      	bne.n	8000f62 <HAL_InitTick+0x6a>
 8000f54:	e001      	b.n	8000f5a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e02b      	b.n	8000fb2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f5a:	f001 fd65 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8000f5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000f60:	e004      	b.n	8000f6c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f62:	f001 fd61 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8000f66:	4603      	mov	r3, r0
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f6e:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <HAL_InitTick+0xcc>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0c9b      	lsrs	r3, r3, #18
 8000f76:	3b01      	subs	r3, #1
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f88:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f9a:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f9c:	f001 fd9c 	bl	8002ad8 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d104      	bne.n	8000fb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fa6:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000fa8:	f001 fdf8 	bl	8002b9c <HAL_TIM_Base_Start_IT>
 8000fac:	4603      	mov	r3, r0
 8000fae:	e000      	b.n	8000fb2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3740      	adds	r7, #64	@ 0x40
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24000008 	.word	0x24000008
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	24000444 	.word	0x24000444
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM6_DAC_IRQHandler+0x10>)
 800100e:	f001 fe3d 	bl	8002c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000444 	.word	0x24000444

0800101c <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001020:	f000 fcd4 	bl	80019cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_kill>:

int _kill(int pid, int sig)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001042:	f006 fadd 	bl	8007600 <__errno>
 8001046:	4603      	mov	r3, r0
 8001048:	2216      	movs	r2, #22
 800104a:	601a      	str	r2, [r3, #0]
  return -1;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_exit>:

void _exit (int status)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffe7 	bl	8001038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800106a:	bf00      	nop
 800106c:	e7fd      	b.n	800106a <_exit+0x12>

0800106e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e00a      	b.n	8001096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001080:	f3af 8000 	nop.w
 8001084:	4601      	mov	r1, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf0      	blt.n	8001080 <_read+0x12>
  }

  return len;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e009      	b.n	80010ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbf1      	blt.n	80010ba <_write+0x12>
  }
  return len;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_close>:

int _close(int file)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001108:	605a      	str	r2, [r3, #4]
  return 0;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_isatty>:

int _isatty(int file)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001120:	2301      	movs	r3, #1
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f006 fa42 	bl	8007600 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24080000 	.word	0x24080000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	24000490 	.word	0x24000490
 80011b0:	240043f0 	.word	0x240043f0

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b8:	f7ff f8f2 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f006 fa13 	bl	800760c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff f9c9 	bl	800057c <main>
  bx  lr
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011f4:	24000118 	.word	0x24000118
  ldr r2, =_sidata
 80011f8:	080083f0 	.word	0x080083f0
  ldr r2, =_sbss
 80011fc:	24000118 	.word	0x24000118
  ldr r4, =_ebss
 8001200:	240043f0 	.word	0x240043f0

08001204 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC3_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120e:	2003      	movs	r0, #3
 8001210:	f000 f90f 	bl	8001432 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001214:	f001 fa5e 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8001218:	4602      	mov	r2, r0
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_Init+0x68>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	4913      	ldr	r1, [pc, #76]	@ (8001274 <HAL_Init+0x6c>)
 8001226:	5ccb      	ldrb	r3, [r1, r3]
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_Init+0x68>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <HAL_Init+0x6c>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <HAL_Init+0x70>)
 800124a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800124c:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <HAL_Init+0x74>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001252:	200f      	movs	r0, #15
 8001254:	f7ff fe50 	bl	8000ef8 <HAL_InitTick>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e002      	b.n	8001268 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001262:	f7ff fe23 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	58024400 	.word	0x58024400
 8001274:	080082fc 	.word	0x080082fc
 8001278:	24000004 	.word	0x24000004
 800127c:	24000000 	.word	0x24000000

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2400000c 	.word	0x2400000c
 80012a4:	24000494 	.word	0x24000494

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	24000494 	.word	0x24000494

080012c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetREVID+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0c1b      	lsrs	r3, r3, #16
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	5c001000 	.word	0x5c001000

080012d8 <__NVIC_SetPriorityGrouping>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <__NVIC_SetPriorityGrouping+0x40>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	4313      	orrs	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x40>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0000 	.word	0x05fa0000

08001320 <__NVIC_GetPriorityGrouping>:
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	@ (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	@ (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	@ 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff4c 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff63 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb3 	bl	80013cc <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff82 	bl	8001378 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff56 	bl	800133c <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800149c:	f3bf 8f5f 	dmb	sy
}
 80014a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_MPU_Disable+0x28>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <HAL_MPU_Disable+0x28>)
 80014a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_MPU_Disable+0x2c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	e000ed90 	.word	0xe000ed90

080014c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_MPU_Enable+0x38>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <HAL_MPU_Enable+0x3c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <HAL_MPU_Enable+0x3c>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ec:	f3bf 8f6f 	isb	sy
}
 80014f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed90 	.word	0xe000ed90
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	785a      	ldrb	r2, [r3, #1]
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 8001516:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b1b      	ldrb	r3, [r3, #12]
 8001530:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7adb      	ldrb	r3, [r3, #11]
 8001536:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a9b      	ldrb	r3, [r3, #10]
 800153e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7b5b      	ldrb	r3, [r3, #13]
 8001546:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7b9b      	ldrb	r3, [r3, #14]
 800154e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7bdb      	ldrb	r3, [r3, #15]
 8001556:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7a5b      	ldrb	r3, [r3, #9]
 800155e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7a1b      	ldrb	r3, [r3, #8]
 8001566:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001568:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001570:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001572:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001574:	6113      	str	r3, [r2, #16]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed90 	.word	0xe000ed90

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001596:	4b89      	ldr	r3, [pc, #548]	@ (80017bc <HAL_GPIO_Init+0x234>)
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159a:	e194      	b.n	80018c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8186 	beq.w	80018c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x44>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d017      	beq.n	800166a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d123      	bne.n	80016be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0203 	and.w	r2, r3, #3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80e0 	beq.w	80018c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 8001702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001706:	4a2e      	ldr	r2, [pc, #184]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 8001712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171e:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <HAL_GPIO_Init+0x23c>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a20      	ldr	r2, [pc, #128]	@ (80017c8 <HAL_GPIO_Init+0x240>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d052      	beq.n	80017f0 <HAL_GPIO_Init+0x268>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1f      	ldr	r2, [pc, #124]	@ (80017cc <HAL_GPIO_Init+0x244>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d031      	beq.n	80017b6 <HAL_GPIO_Init+0x22e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_GPIO_Init+0x248>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02b      	beq.n	80017b2 <HAL_GPIO_Init+0x22a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_GPIO_Init+0x24c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x226>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <HAL_GPIO_Init+0x250>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x222>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <HAL_GPIO_Init+0x254>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x21e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <HAL_GPIO_Init+0x258>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x21a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_GPIO_Init+0x25c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x216>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <HAL_GPIO_Init+0x260>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x212>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <HAL_GPIO_Init+0x264>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x20e>
 8001792:	2309      	movs	r3, #9
 8001794:	e02d      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 8001796:	230a      	movs	r3, #10
 8001798:	e02b      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 800179a:	2308      	movs	r3, #8
 800179c:	e029      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 800179e:	2307      	movs	r3, #7
 80017a0:	e027      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e025      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e023      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e021      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e01f      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e01d      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e01b      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017ba:	bf00      	nop
 80017bc:	58000080 	.word	0x58000080
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58000400 	.word	0x58000400
 80017c8:	58020000 	.word	0x58020000
 80017cc:	58020400 	.word	0x58020400
 80017d0:	58020800 	.word	0x58020800
 80017d4:	58020c00 	.word	0x58020c00
 80017d8:	58021000 	.word	0x58021000
 80017dc:	58021400 	.word	0x58021400
 80017e0:	58021800 	.word	0x58021800
 80017e4:	58021c00 	.word	0x58021c00
 80017e8:	58022000 	.word	0x58022000
 80017ec:	58022400 	.word	0x58022400
 80017f0:	2300      	movs	r3, #0
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001802:	4938      	ldr	r1, [pc, #224]	@ (80018e4 <HAL_GPIO_Init+0x35c>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f ae63 	bne.w	800159c <HAL_GPIO_Init+0x14>
  }
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3724      	adds	r7, #36	@ 0x24
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	58000400 	.word	0x58000400

080018e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001954:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_HSEM_FastTake+0x2c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3320      	adds	r3, #32
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_HSEM_FastTake+0x30>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e000      	b.n	800196a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	58026400 	.word	0x58026400
 800197c:	80000300 	.word	0x80000300

08001980 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800198a:	4906      	ldr	r1, [pc, #24]	@ (80019a4 <HAL_HSEM_Release+0x24>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	58026400 	.word	0x58026400

080019a8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_HSEM_ActivateNotification+0x20>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4904      	ldr	r1, [pc, #16]	@ (80019c8 <HAL_HSEM_ActivateNotification+0x20>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
#endif
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	58026500 	.word	0x58026500

080019cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_HSEM_IRQHandler+0x30>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_HSEM_IRQHandler+0x30>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4906      	ldr	r1, [pc, #24]	@ (80019fc <HAL_HSEM_IRQHandler+0x30>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <HAL_HSEM_IRQHandler+0x30>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f005 f951 	bl	8006c94 <HAL_HSEM_FreeCallback>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	58026500 	.word	0x58026500

08001a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a08:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	2b06      	cmp	r3, #6
 8001a12:	d00a      	beq.n	8001a2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a14:	4b26      	ldr	r3, [pc, #152]	@ (8001ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e040      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e03e      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001a32:	491f      	ldr	r1, [pc, #124]	@ (8001ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a3a:	f7ff fc35 	bl	80012a8 <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a40:	e009      	b.n	8001a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a42:	f7ff fc31 	bl	80012a8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a50:	d901      	bls.n	8001a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e028      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a62:	d1ee      	bne.n	8001a42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b1e      	cmp	r3, #30
 8001a68:	d008      	beq.n	8001a7c <HAL_PWREx_ConfigSupply+0x7c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a6e:	d005      	beq.n	8001a7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b1d      	cmp	r3, #29
 8001a74:	d002      	beq.n	8001a7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a7a:	d114      	bne.n	8001aa6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a7c:	f7ff fc14 	bl	80012a8 <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a82:	e009      	b.n	8001a98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a84:	f7ff fc10 	bl	80012a8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a92:	d901      	bls.n	8001a98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e007      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58024800 	.word	0x58024800

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	@ 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f000 bc48 	b.w	8002358 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8088 	beq.w	8001be6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad6:	4b99      	ldr	r3, [pc, #612]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ae0:	4b96      	ldr	r3, [pc, #600]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d007      	beq.n	8001afc <HAL_RCC_OscConfig+0x48>
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	2b18      	cmp	r3, #24
 8001af0:	d111      	bne.n	8001b16 <HAL_RCC_OscConfig+0x62>
 8001af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	4b8f      	ldr	r3, [pc, #572]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d06d      	beq.n	8001be4 <HAL_RCC_OscConfig+0x130>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d169      	bne.n	8001be4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f000 bc21 	b.w	8002358 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x7a>
 8001b20:	4b86      	ldr	r3, [pc, #536]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a85      	ldr	r2, [pc, #532]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e02e      	b.n	8001b8c <HAL_RCC_OscConfig+0xd8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x9c>
 8001b36:	4b81      	ldr	r3, [pc, #516]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a80      	ldr	r2, [pc, #512]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b7e      	ldr	r3, [pc, #504]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7d      	ldr	r2, [pc, #500]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xd8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0xc0>
 8001b5a:	4b78      	ldr	r3, [pc, #480]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a77      	ldr	r2, [pc, #476]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b75      	ldr	r3, [pc, #468]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a74      	ldr	r2, [pc, #464]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xd8>
 8001b74:	4b71      	ldr	r3, [pc, #452]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a70      	ldr	r2, [pc, #448]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b6e      	ldr	r3, [pc, #440]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6d      	ldr	r2, [pc, #436]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb88 	bl	80012a8 <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fb84 	bl	80012a8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e3d4      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bae:	4b63      	ldr	r3, [pc, #396]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe8>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fb74 	bl	80012a8 <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fb70 	bl	80012a8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e3c0      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bd6:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x110>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80ca 	beq.w	8001d88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf4:	4b51      	ldr	r3, [pc, #324]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_RCC_OscConfig+0x166>
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	2b18      	cmp	r3, #24
 8001c0e:	d156      	bne.n	8001cbe <HAL_RCC_OscConfig+0x20a>
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d151      	bne.n	8001cbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1a:	4b48      	ldr	r3, [pc, #288]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x17e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e392      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0219 	bic.w	r2, r3, #25
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	493f      	ldr	r1, [pc, #252]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb30 	bl	80012a8 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fb2c 	bl	80012a8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e37c      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5e:	4b37      	ldr	r3, [pc, #220]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	f7ff fb29 	bl	80012c0 <HAL_GetREVID>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d817      	bhi.n	8001ca8 <HAL_RCC_OscConfig+0x1f4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b40      	cmp	r3, #64	@ 0x40
 8001c7e:	d108      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1de>
 8001c80:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c88:	4a2c      	ldr	r2, [pc, #176]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	e07a      	b.n	8001d88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	031b      	lsls	r3, r3, #12
 8001ca0:	4926      	ldr	r1, [pc, #152]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca6:	e06f      	b.n	8001d88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	4921      	ldr	r1, [pc, #132]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	e064      	b.n	8001d88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d047      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0219 	bic.w	r2, r3, #25
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	491a      	ldr	r1, [pc, #104]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fae6 	bl	80012a8 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fae2 	bl	80012a8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e332      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	f7ff fadf 	bl	80012c0 <HAL_GetREVID>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d819      	bhi.n	8001d40 <HAL_RCC_OscConfig+0x28c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b40      	cmp	r3, #64	@ 0x40
 8001d12:	d108      	bne.n	8001d26 <HAL_RCC_OscConfig+0x272>
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d22:	6053      	str	r3, [r2, #4]
 8001d24:	e030      	b.n	8001d88 <HAL_RCC_OscConfig+0x2d4>
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	031b      	lsls	r3, r3, #12
 8001d34:	4901      	ldr	r1, [pc, #4]	@ (8001d3c <HAL_RCC_OscConfig+0x288>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e025      	b.n	8001d88 <HAL_RCC_OscConfig+0x2d4>
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	4b9a      	ldr	r3, [pc, #616]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	4997      	ldr	r1, [pc, #604]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
 8001d54:	e018      	b.n	8001d88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d56:	4b95      	ldr	r3, [pc, #596]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a94      	ldr	r2, [pc, #592]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff faa1 	bl	80012a8 <HAL_GetTick>
 8001d66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fa9d 	bl	80012a8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e2ed      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d7c:	4b8b      	ldr	r3, [pc, #556]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a9 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d96:	4b85      	ldr	r3, [pc, #532]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001da0:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d007      	beq.n	8001dbc <HAL_RCC_OscConfig+0x308>
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b18      	cmp	r3, #24
 8001db0:	d13a      	bne.n	8001e28 <HAL_RCC_OscConfig+0x374>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d135      	bne.n	8001e28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x320>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b80      	cmp	r3, #128	@ 0x80
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e2c1      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dd4:	f7ff fa74 	bl	80012c0 <HAL_GetREVID>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d817      	bhi.n	8001e12 <HAL_RCC_OscConfig+0x35e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_OscConfig+0x348>
 8001dea:	4b70      	ldr	r3, [pc, #448]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001df2:	4a6e      	ldr	r2, [pc, #440]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001df8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dfa:	e075      	b.n	8001ee8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	069b      	lsls	r3, r3, #26
 8001e0a:	4968      	ldr	r1, [pc, #416]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e10:	e06a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e12:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	4962      	ldr	r1, [pc, #392]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e26:	e05f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d042      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e30:	4b5e      	ldr	r3, [pc, #376]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fa34 	bl	80012a8 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e44:	f7ff fa30 	bl	80012a8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e280      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e56:	4b55      	ldr	r3, [pc, #340]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e62:	f7ff fa2d 	bl	80012c0 <HAL_GetREVID>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d817      	bhi.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d108      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3d6>
 8001e78:	4b4c      	ldr	r3, [pc, #304]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e80:	4a4a      	ldr	r2, [pc, #296]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e86:	6053      	str	r3, [r2, #4]
 8001e88:	e02e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x434>
 8001e8a:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	4944      	ldr	r1, [pc, #272]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
 8001e9e:	e023      	b.n	8001ee8 <HAL_RCC_OscConfig+0x434>
 8001ea0:	4b42      	ldr	r3, [pc, #264]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	493f      	ldr	r1, [pc, #252]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e018      	b.n	8001ee8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a3c      	ldr	r2, [pc, #240]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f9f1 	bl	80012a8 <HAL_GetTick>
 8001ec6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001eca:	f7ff f9ed 	bl	80012a8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e23d      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001edc:	4b33      	ldr	r3, [pc, #204]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d036      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efc:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f00:	4a2a      	ldr	r2, [pc, #168]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f9ce 	bl	80012a8 <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff f9ca 	bl	80012a8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e21a      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f22:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x45c>
 8001f2e:	e018      	b.n	8001f62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f34:	4a1d      	ldr	r2, [pc, #116]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f9b4 	bl	80012a8 <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff f9b0 	bl	80012a8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e200      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d039      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f82:	f7ff f991 	bl	80012a8 <HAL_GetTick>
 8001f86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8a:	f7ff f98d 	bl	80012a8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1dd      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4d6>
 8001fa8:	e01b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
 8001faa:	bf00      	nop
 8001fac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a9a      	ldr	r2, [pc, #616]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f974 	bl	80012a8 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc4:	f7ff f970 	bl	80012a8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1c0      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fd6:	4b92      	ldr	r3, [pc, #584]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8081 	beq.w	80020f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8002224 <HAL_RCC_OscConfig+0x770>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a8b      	ldr	r2, [pc, #556]	@ (8002224 <HAL_RCC_OscConfig+0x770>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff f954 	bl	80012a8 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7ff f950 	bl	80012a8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1a0      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002016:	4b83      	ldr	r3, [pc, #524]	@ (8002224 <HAL_RCC_OscConfig+0x770>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x584>
 800202a:	4b7d      	ldr	r3, [pc, #500]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202e:	4a7c      	ldr	r2, [pc, #496]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6713      	str	r3, [r2, #112]	@ 0x70
 8002036:	e02d      	b.n	8002094 <HAL_RCC_OscConfig+0x5e0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x5a6>
 8002040:	4b77      	ldr	r3, [pc, #476]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002044:	4a76      	ldr	r2, [pc, #472]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	@ 0x70
 800204c:	4b74      	ldr	r3, [pc, #464]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002050:	4a73      	ldr	r2, [pc, #460]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002052:	f023 0304 	bic.w	r3, r3, #4
 8002056:	6713      	str	r3, [r2, #112]	@ 0x70
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x5e0>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x5c8>
 8002062:	4b6f      	ldr	r3, [pc, #444]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	4a6e      	ldr	r2, [pc, #440]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6713      	str	r3, [r2, #112]	@ 0x70
 800206e:	4b6c      	ldr	r3, [pc, #432]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a6b      	ldr	r2, [pc, #428]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0x5e0>
 800207c:	4b68      	ldr	r3, [pc, #416]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	4a67      	ldr	r2, [pc, #412]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	@ 0x70
 8002088:	4b65      	ldr	r3, [pc, #404]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	4a64      	ldr	r2, [pc, #400]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff f904 	bl	80012a8 <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff f900 	bl	80012a8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e14e      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ba:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ee      	beq.n	80020a4 <HAL_RCC_OscConfig+0x5f0>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f8ee 	bl	80012a8 <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff f8ea 	bl	80012a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e138      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ee      	bne.n	80020d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 812d 	beq.w	8002356 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020fc:	4b48      	ldr	r3, [pc, #288]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002104:	2b18      	cmp	r3, #24
 8002106:	f000 80bd 	beq.w	8002284 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b02      	cmp	r3, #2
 8002110:	f040 809e 	bne.w	8002250 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b42      	ldr	r3, [pc, #264]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a41      	ldr	r2, [pc, #260]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800211a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff f8c2 	bl	80012a8 <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f8be 	bl	80012a8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e10e      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800213a:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800214a:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <HAL_RCC_OscConfig+0x774>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	430a      	orrs	r2, r1
 800215a:	4931      	ldr	r1, [pc, #196]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	3b01      	subs	r3, #1
 8002166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216e:	3b01      	subs	r3, #1
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	b29b      	uxth	r3, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002188:	3b01      	subs	r3, #1
 800218a:	061b      	lsls	r3, r3, #24
 800218c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002190:	4923      	ldr	r1, [pc, #140]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a6:	4b21      	ldr	r3, [pc, #132]	@ (800222c <HAL_RCC_OscConfig+0x778>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021ae:	00d2      	lsls	r2, r2, #3
 80021b0:	491b      	ldr	r1, [pc, #108]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	f023 020c 	bic.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	4917      	ldr	r1, [pc, #92]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021c8:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	f023 0202 	bic.w	r2, r3, #2
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	4912      	ldr	r1, [pc, #72]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002202:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_RCC_OscConfig+0x76c>)
 8002210:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7ff f847 	bl	80012a8 <HAL_GetTick>
 800221a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800221c:	e011      	b.n	8002242 <HAL_RCC_OscConfig+0x78e>
 800221e:	bf00      	nop
 8002220:	58024400 	.word	0x58024400
 8002224:	58024800 	.word	0x58024800
 8002228:	fffffc0c 	.word	0xfffffc0c
 800222c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff f83a 	bl	80012a8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e08a      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002242:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x77c>
 800224e:	e082      	b.n	8002356 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a42      	ldr	r2, [pc, #264]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f824 	bl	80012a8 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f820 	bl	80012a8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e070      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002276:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x7b0>
 8002282:	e068      	b.n	8002356 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002284:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800228a:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d031      	beq.n	80022fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0203 	and.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d12a      	bne.n	80022fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d122      	bne.n	80022fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d11a      	bne.n	80022fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	0a5b      	lsrs	r3, r3, #9
 80022ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d111      	bne.n	80022fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	0c1b      	lsrs	r3, r3, #16
 80022dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d108      	bne.n	80022fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0e1b      	lsrs	r3, r3, #24
 80022ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e02b      	b.n	8002358 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800230a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	429a      	cmp	r2, r3
 8002314:	d01f      	beq.n	8002356 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002316:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002322:	f7fe ffc1 	bl	80012a8 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002328:	bf00      	nop
 800232a:	f7fe ffbd 	bl	80012a8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	4293      	cmp	r3, r2
 8002334:	d0f9      	beq.n	800232a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_RCC_OscConfig+0x8b0>)
 800233c:	4013      	ands	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002342:	00d2      	lsls	r2, r2, #3
 8002344:	4906      	ldr	r1, [pc, #24]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002346:	4313      	orrs	r3, r2
 8002348:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <HAL_RCC_OscConfig+0x8ac>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3730      	adds	r7, #48	@ 0x30
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	58024400 	.word	0x58024400
 8002364:	ffff0007 	.word	0xffff0007

08002368 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e19c      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b8a      	ldr	r3, [pc, #552]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b87      	ldr	r3, [pc, #540]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 020f 	bic.w	r2, r3, #15
 8002392:	4985      	ldr	r1, [pc, #532]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b83      	ldr	r3, [pc, #524]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e184      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	4b7b      	ldr	r3, [pc, #492]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d908      	bls.n	80023da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c8:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4975      	ldr	r1, [pc, #468]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	4b70      	ldr	r3, [pc, #448]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023f6:	4b6d      	ldr	r3, [pc, #436]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	496a      	ldr	r1, [pc, #424]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002404:	4313      	orrs	r3, r2
 8002406:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d010      	beq.n	8002436 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	4b64      	ldr	r3, [pc, #400]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002420:	429a      	cmp	r2, r3
 8002422:	d908      	bls.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002424:	4b61      	ldr	r3, [pc, #388]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	495e      	ldr	r1, [pc, #376]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002432:	4313      	orrs	r3, r2
 8002434:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	4b59      	ldr	r3, [pc, #356]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800244e:	429a      	cmp	r2, r3
 8002450:	d908      	bls.n	8002464 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002452:	4b56      	ldr	r3, [pc, #344]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4953      	ldr	r1, [pc, #332]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002460:	4313      	orrs	r3, r2
 8002462:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4b4d      	ldr	r3, [pc, #308]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	429a      	cmp	r2, r3
 800247e:	d908      	bls.n	8002492 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b4a      	ldr	r3, [pc, #296]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f023 020f 	bic.w	r2, r3, #15
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4947      	ldr	r1, [pc, #284]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 800248e:	4313      	orrs	r3, r2
 8002490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d055      	beq.n	800254a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800249e:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4940      	ldr	r1, [pc, #256]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b8:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d121      	bne.n	8002508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0f6      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d115      	bne.n	8002508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0ea      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e8:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0de      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f8:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d6      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002508:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f023 0207 	bic.w	r2, r3, #7
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4925      	ldr	r1, [pc, #148]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002516:	4313      	orrs	r3, r2
 8002518:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251a:	f7fe fec5 	bl	80012a8 <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002520:	e00a      	b.n	8002538 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7fe fec1 	bl	80012a8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0be      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002538:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	429a      	cmp	r2, r3
 8002548:	d1eb      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	429a      	cmp	r2, r3
 8002564:	d208      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f023 020f 	bic.w	r2, r3, #15
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	490e      	ldr	r1, [pc, #56]	@ (80025ac <HAL_RCC_ClockConfig+0x244>)
 8002574:	4313      	orrs	r3, r2
 8002576:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d214      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 020f 	bic.w	r2, r3, #15
 800258e:	4906      	ldr	r1, [pc, #24]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <HAL_RCC_ClockConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e086      	b.n	80026b6 <HAL_RCC_ClockConfig+0x34e>
 80025a8:	52002000 	.word	0x52002000
 80025ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d010      	beq.n	80025de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	4b3f      	ldr	r3, [pc, #252]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d208      	bcs.n	80025de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025cc:	4b3c      	ldr	r3, [pc, #240]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4939      	ldr	r1, [pc, #228]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	4b34      	ldr	r3, [pc, #208]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d208      	bcs.n	800260c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025fa:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	492e      	ldr	r1, [pc, #184]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 8002608:	4313      	orrs	r3, r2
 800260a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d010      	beq.n	800263a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002624:	429a      	cmp	r2, r3
 8002626:	d208      	bcs.n	800263a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002628:	4b25      	ldr	r3, [pc, #148]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4922      	ldr	r1, [pc, #136]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 8002636:	4313      	orrs	r3, r2
 8002638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002652:	429a      	cmp	r2, r3
 8002654:	d208      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002656:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4917      	ldr	r1, [pc, #92]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 8002664:	4313      	orrs	r3, r2
 8002666:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002668:	f000 f834 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	4912      	ldr	r1, [pc, #72]	@ (80026c4 <HAL_RCC_ClockConfig+0x35c>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002686:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <HAL_RCC_ClockConfig+0x358>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <HAL_RCC_ClockConfig+0x35c>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_RCC_ClockConfig+0x360>)
 800269e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026a0:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <HAL_RCC_ClockConfig+0x364>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026a6:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <HAL_RCC_ClockConfig+0x368>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fc24 	bl	8000ef8 <HAL_InitTick>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	58024400 	.word	0x58024400
 80026c4:	080082fc 	.word	0x080082fc
 80026c8:	24000004 	.word	0x24000004
 80026cc:	24000000 	.word	0x24000000
 80026d0:	24000008 	.word	0x24000008

080026d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026da:	4bb3      	ldr	r3, [pc, #716]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026e2:	2b18      	cmp	r3, #24
 80026e4:	f200 8155 	bhi.w	8002992 <HAL_RCC_GetSysClockFreq+0x2be>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002755 	.word	0x08002755
 80026f4:	08002993 	.word	0x08002993
 80026f8:	08002993 	.word	0x08002993
 80026fc:	08002993 	.word	0x08002993
 8002700:	08002993 	.word	0x08002993
 8002704:	08002993 	.word	0x08002993
 8002708:	08002993 	.word	0x08002993
 800270c:	08002993 	.word	0x08002993
 8002710:	0800277b 	.word	0x0800277b
 8002714:	08002993 	.word	0x08002993
 8002718:	08002993 	.word	0x08002993
 800271c:	08002993 	.word	0x08002993
 8002720:	08002993 	.word	0x08002993
 8002724:	08002993 	.word	0x08002993
 8002728:	08002993 	.word	0x08002993
 800272c:	08002993 	.word	0x08002993
 8002730:	08002781 	.word	0x08002781
 8002734:	08002993 	.word	0x08002993
 8002738:	08002993 	.word	0x08002993
 800273c:	08002993 	.word	0x08002993
 8002740:	08002993 	.word	0x08002993
 8002744:	08002993 	.word	0x08002993
 8002748:	08002993 	.word	0x08002993
 800274c:	08002993 	.word	0x08002993
 8002750:	08002787 	.word	0x08002787
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002754:	4b94      	ldr	r3, [pc, #592]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002760:	4b91      	ldr	r3, [pc, #580]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	4a90      	ldr	r2, [pc, #576]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002772:	e111      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002774:	4b8d      	ldr	r3, [pc, #564]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002776:	61bb      	str	r3, [r7, #24]
      break;
 8002778:	e10e      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800277a:	4b8d      	ldr	r3, [pc, #564]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800277c:	61bb      	str	r3, [r7, #24]
      break;
 800277e:	e10b      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002780:	4b8c      	ldr	r3, [pc, #560]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002782:	61bb      	str	r3, [r7, #24]
      break;
 8002784:	e108      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002786:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002790:	4b85      	ldr	r3, [pc, #532]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800279a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800279c:	4b82      	ldr	r3, [pc, #520]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027a6:	4b80      	ldr	r3, [pc, #512]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027aa:	08db      	lsrs	r3, r3, #3
 80027ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80e1 	beq.w	800298c <HAL_RCC_GetSysClockFreq+0x2b8>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f000 8083 	beq.w	80028d8 <HAL_RCC_GetSysClockFreq+0x204>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	f200 80a1 	bhi.w	800291c <HAL_RCC_GetSysClockFreq+0x248>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x114>
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d056      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027e6:	e099      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027e8:	4b6f      	ldr	r3, [pc, #444]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02d      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027f4:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	4a6b      	ldr	r2, [pc, #428]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281e:	4b62      	ldr	r3, [pc, #392]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002832:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800283a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800284e:	e087      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80029bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800285e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002862:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002872:	ed97 6a02 	vldr	s12, [r7, #8]
 8002876:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800287a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800287e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800288a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002892:	e065      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a6:	4b40      	ldr	r3, [pc, #256]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028d6:	e043      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80029c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ea:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800290a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800290e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800291a:	e021      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800292a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002942:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800294a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	0a5b      	lsrs	r3, r3, #9
 8002966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800296a:	3301      	adds	r3, #1
 800296c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002978:	edd7 6a07 	vldr	s13, [r7, #28]
 800297c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002984:	ee17 3a90 	vmov	r3, s15
 8002988:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800298a:	e005      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
      break;
 8002990:	e002      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002994:	61bb      	str	r3, [r7, #24]
      break;
 8002996:	bf00      	nop
  }

  return sysclockfreq;
 8002998:	69bb      	ldr	r3, [r7, #24]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	58024400 	.word	0x58024400
 80029ac:	03d09000 	.word	0x03d09000
 80029b0:	003d0900 	.word	0x003d0900
 80029b4:	007a1200 	.word	0x007a1200
 80029b8:	46000000 	.word	0x46000000
 80029bc:	4c742400 	.word	0x4c742400
 80029c0:	4a742400 	.word	0x4a742400
 80029c4:	4af42400 	.word	0x4af42400

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029ce:	f7ff fe81 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490f      	ldr	r1, [pc, #60]	@ (8002a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a07      	ldr	r2, [pc, #28]	@ (8002a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a06:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	080082fc 	.word	0x080082fc
 8002a20:	24000004 	.word	0x24000004
 8002a24:	24000000 	.word	0x24000000

08002a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a2c:	f7ff ffcc 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	080082fc 	.word	0x080082fc

08002a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223f      	movs	r2, #63	@ 0x3f
 8002a62:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0207 	and.w	r2, r3, #7
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002a70:	4b17      	ldr	r3, [pc, #92]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002a7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCC_GetClockConfig+0x80>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	52002000 	.word	0x52002000

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e049      	b.n	8002b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f841 	bl	8002b86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 f9e8 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d001      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e054      	b.n	8002c5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d022      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bde:	d01d      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a22      	ldr	r2, [pc, #136]	@ (8002c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d018      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a21      	ldr	r2, [pc, #132]	@ (8002c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1e      	ldr	r2, [pc, #120]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xe0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d009      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x80>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xe8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d115      	bne.n	8002c48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_TIM_Base_Start_IT+0xec>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d015      	beq.n	8002c5a <HAL_TIM_Base_Start_IT+0xbe>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d011      	beq.n	8002c5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e000      	b.n	8002c5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40010400 	.word	0x40010400
 8002c80:	40001800 	.word	0x40001800
 8002c84:	40014000 	.word	0x40014000
 8002c88:	00010007 	.word	0x00010007

08002c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0202 	mvn.w	r2, #2
 8002cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8e9 	bl	8002eae <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8db 	bl	8002e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8ec 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0204 	mvn.w	r2, #4
 8002d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8c3 	bl	8002eae <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8b5 	bl	8002e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f8c6 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d020      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0208 	mvn.w	r2, #8
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f89d 	bl	8002eae <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f88f 	bl	8002e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8a0 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d020      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0210 	mvn.w	r2, #16
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2208      	movs	r2, #8
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f877 	bl	8002eae <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f869 	bl	8002e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f87a 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f842 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00c      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f913 	bl	800304c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f90b 	bl	8003060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f834 	bl	8002ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00c      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f06f 0220 	mvn.w	r2, #32
 8002e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f8d3 	bl	8003038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a46      	ldr	r2, [pc, #280]	@ (8003018 <TIM_Base_SetConfig+0x12c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0a:	d00f      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a43      	ldr	r2, [pc, #268]	@ (800301c <TIM_Base_SetConfig+0x130>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a42      	ldr	r2, [pc, #264]	@ (8003020 <TIM_Base_SetConfig+0x134>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a41      	ldr	r2, [pc, #260]	@ (8003024 <TIM_Base_SetConfig+0x138>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a40      	ldr	r2, [pc, #256]	@ (8003028 <TIM_Base_SetConfig+0x13c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a35      	ldr	r2, [pc, #212]	@ (8003018 <TIM_Base_SetConfig+0x12c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4c:	d01b      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a32      	ldr	r2, [pc, #200]	@ (800301c <TIM_Base_SetConfig+0x130>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d017      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <TIM_Base_SetConfig+0x134>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a30      	ldr	r2, [pc, #192]	@ (8003024 <TIM_Base_SetConfig+0x138>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2f      	ldr	r2, [pc, #188]	@ (8003028 <TIM_Base_SetConfig+0x13c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2e      	ldr	r2, [pc, #184]	@ (800302c <TIM_Base_SetConfig+0x140>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2d      	ldr	r2, [pc, #180]	@ (8003030 <TIM_Base_SetConfig+0x144>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0x9a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2c      	ldr	r2, [pc, #176]	@ (8003034 <TIM_Base_SetConfig+0x148>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <TIM_Base_SetConfig+0x12c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <TIM_Base_SetConfig+0x13c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a17      	ldr	r2, [pc, #92]	@ (800302c <TIM_Base_SetConfig+0x140>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	@ (8003030 <TIM_Base_SetConfig+0x144>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0xf8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a15      	ldr	r2, [pc, #84]	@ (8003034 <TIM_Base_SetConfig+0x148>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f023 0201 	bic.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]
  }
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40010400 	.word	0x40010400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800

08003038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	2b84      	cmp	r3, #132	@ 0x84
 8003088:	d005      	beq.n	8003096 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800308a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	3303      	adds	r3, #3
 8003094:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030a8:	f000 fee4 	bl	8003e74 <vTaskStartScheduler>
  
  return osOK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b4:	b089      	sub	sp, #36	@ 0x24
 80030b6:	af04      	add	r7, sp, #16
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <osThreadCreate+0x54>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01c      	beq.n	8003106 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685c      	ldr	r4, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691e      	ldr	r6, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ffc8 	bl	8003074 <makeFreeRtosPriority>
 80030e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ee:	9202      	str	r2, [sp, #8]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	9100      	str	r1, [sp, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4632      	mov	r2, r6
 80030f8:	4629      	mov	r1, r5
 80030fa:	4620      	mov	r0, r4
 80030fc:	f000 fcec 	bl	8003ad8 <xTaskCreateStatic>
 8003100:	4603      	mov	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e01c      	b.n	8003140 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685c      	ldr	r4, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003112:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ffaa 	bl	8003074 <makeFreeRtosPriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f107 030c 	add.w	r3, r7, #12
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	9200      	str	r2, [sp, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	4632      	mov	r2, r6
 800312e:	4629      	mov	r1, r5
 8003130:	4620      	mov	r0, r4
 8003132:	f000 fd31 	bl	8003b98 <xTaskCreate>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d001      	beq.n	8003140 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003140:	68fb      	ldr	r3, [r7, #12]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <osDelay+0x16>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	e000      	b.n	8003162 <osDelay+0x18>
 8003160:	2301      	movs	r3, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fe50 	bl	8003e08 <vTaskDelay>
  
  return osOK;
 8003168:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003180:	f000 feda 	bl	8003f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003184:	4b5c      	ldr	r3, [pc, #368]	@ (80032f8 <pvPortMalloc+0x184>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800318c:	f000 f924 	bl	80033d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003190:	4b5a      	ldr	r3, [pc, #360]	@ (80032fc <pvPortMalloc+0x188>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 8095 	bne.w	80032c8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01e      	beq.n	80031e2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80031a4:	2208      	movs	r2, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d015      	beq.n	80031e2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f023 0307 	bic.w	r3, r3, #7
 80031bc:	3308      	adds	r3, #8
 80031be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d06f      	beq.n	80032c8 <pvPortMalloc+0x154>
 80031e8:	4b45      	ldr	r3, [pc, #276]	@ (8003300 <pvPortMalloc+0x18c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d86a      	bhi.n	80032c8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031f2:	4b44      	ldr	r3, [pc, #272]	@ (8003304 <pvPortMalloc+0x190>)
 80031f4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80031f6:	4b43      	ldr	r3, [pc, #268]	@ (8003304 <pvPortMalloc+0x190>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031fc:	e004      	b.n	8003208 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d903      	bls.n	800321a <pvPortMalloc+0xa6>
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f1      	bne.n	80031fe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800321a:	4b37      	ldr	r3, [pc, #220]	@ (80032f8 <pvPortMalloc+0x184>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003220:	429a      	cmp	r2, r3
 8003222:	d051      	beq.n	80032c8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2208      	movs	r2, #8
 800322a:	4413      	add	r3, r2
 800322c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	2308      	movs	r3, #8
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	429a      	cmp	r2, r3
 8003244:	d920      	bls.n	8003288 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <pvPortMalloc+0xfc>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	613b      	str	r3, [r7, #16]
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad2      	subs	r2, r2, r3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003282:	69b8      	ldr	r0, [r7, #24]
 8003284:	f000 f90a 	bl	800349c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <pvPortMalloc+0x18c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <pvPortMalloc+0x18c>)
 8003294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003296:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <pvPortMalloc+0x18c>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <pvPortMalloc+0x194>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d203      	bcs.n	80032aa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <pvPortMalloc+0x18c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <pvPortMalloc+0x194>)
 80032a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <pvPortMalloc+0x188>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80032be:	4b13      	ldr	r3, [pc, #76]	@ (800330c <pvPortMalloc+0x198>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	4a11      	ldr	r2, [pc, #68]	@ (800330c <pvPortMalloc+0x198>)
 80032c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80032c8:	f000 fe44 	bl	8003f54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <pvPortMalloc+0x17a>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	60fb      	str	r3, [r7, #12]
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	e7fd      	b.n	80032ea <pvPortMalloc+0x176>
	return pvReturn;
 80032ee:	69fb      	ldr	r3, [r7, #28]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	@ 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	240040a0 	.word	0x240040a0
 80032fc:	240040b4 	.word	0x240040b4
 8003300:	240040a4 	.word	0x240040a4
 8003304:	24004098 	.word	0x24004098
 8003308:	240040a8 	.word	0x240040a8
 800330c:	240040ac 	.word	0x240040ac

08003310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04f      	beq.n	80033c2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003322:	2308      	movs	r3, #8
 8003324:	425b      	negs	r3, r3
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4413      	add	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4b25      	ldr	r3, [pc, #148]	@ (80033cc <vPortFree+0xbc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10b      	bne.n	8003356 <vPortFree+0x46>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	60fb      	str	r3, [r7, #12]
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	e7fd      	b.n	8003352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <vPortFree+0x66>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	60bb      	str	r3, [r7, #8]
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	e7fd      	b.n	8003372 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <vPortFree+0xbc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01e      	beq.n	80033c2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11a      	bne.n	80033c2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <vPortFree+0xbc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800339c:	f000 fdcc 	bl	8003f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <vPortFree+0xc0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <vPortFree+0xc0>)
 80033ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033ae:	6938      	ldr	r0, [r7, #16]
 80033b0:	f000 f874 	bl	800349c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80033b4:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <vPortFree+0xc4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a06      	ldr	r2, [pc, #24]	@ (80033d4 <vPortFree+0xc4>)
 80033bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80033be:	f000 fdc9 	bl	8003f54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	240040b4 	.word	0x240040b4
 80033d0:	240040a4 	.word	0x240040a4
 80033d4:	240040b0 	.word	0x240040b0

080033d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80033e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80033e4:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <prvHeapInit+0xac>)
 80033e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3307      	adds	r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0307 	bic.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <prvHeapInit+0xac>)
 8003408:	4413      	add	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <prvHeapInit+0xb0>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003416:	4b1c      	ldr	r3, [pc, #112]	@ (8003488 <prvHeapInit+0xb0>)
 8003418:	2200      	movs	r2, #0
 800341a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003424:	2208      	movs	r2, #8
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a15      	ldr	r2, [pc, #84]	@ (800348c <prvHeapInit+0xb4>)
 8003438:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800343a:	4b14      	ldr	r3, [pc, #80]	@ (800348c <prvHeapInit+0xb4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <prvHeapInit+0xb4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	1ad2      	subs	r2, r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <prvHeapInit+0xb4>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <prvHeapInit+0xb8>)
 8003466:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <prvHeapInit+0xbc>)
 800346e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003470:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <prvHeapInit+0xc0>)
 8003472:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	24000498 	.word	0x24000498
 8003488:	24004098 	.word	0x24004098
 800348c:	240040a0 	.word	0x240040a0
 8003490:	240040a8 	.word	0x240040a8
 8003494:	240040a4 	.word	0x240040a4
 8003498:	240040b4 	.word	0x240040b4

0800349c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034a4:	4b28      	ldr	r3, [pc, #160]	@ (8003548 <prvInsertBlockIntoFreeList+0xac>)
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e002      	b.n	80034b0 <prvInsertBlockIntoFreeList+0x14>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d8f7      	bhi.n	80034aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d108      	bne.n	80034de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	441a      	add	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d118      	bne.n	8003524 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <prvInsertBlockIntoFreeList+0xb0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d00d      	beq.n	800351a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	441a      	add	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e008      	b.n	800352c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800351a:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <prvInsertBlockIntoFreeList+0xb0>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e003      	b.n	800352c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d002      	beq.n	800353a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	24004098 	.word	0x24004098
 800354c:	240040a0 	.word	0x240040a0

08003550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f103 0208 	add.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 0208 	add.w	r2, r3, #8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f103 0208 	add.w	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d103      	bne.n	8003612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e00c      	b.n	800362c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3308      	adds	r3, #8
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e002      	b.n	8003620 <vListInsert+0x2e>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d2f6      	bcs.n	800361a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d103      	bne.n	8003698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3b04      	subs	r3, #4
 80036c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3b04      	subs	r3, #4
 80036d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3b04      	subs	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036e8:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <pxPortInitialiseStack+0x64>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3b14      	subs	r3, #20
 80036f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b04      	subs	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f06f 0202 	mvn.w	r2, #2
 8003706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3b20      	subs	r3, #32
 800370c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	08003721 	.word	0x08003721

08003720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800372a:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <prvTaskExitError+0x58>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003732:	d00b      	beq.n	800374c <prvTaskExitError+0x2c>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	60fb      	str	r3, [r7, #12]
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <prvTaskExitError+0x28>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60bb      	str	r3, [r7, #8]
}
 800375e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003760:	bf00      	nop
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0fc      	beq.n	8003762 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	24000010 	.word	0x24000010
 800377c:	00000000 	.word	0x00000000

08003780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003780:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <pxCurrentTCBConst2>)
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	6808      	ldr	r0, [r1, #0]
 8003786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378a:	f380 8809 	msr	PSP, r0
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f380 8811 	msr	BASEPRI, r0
 800379a:	4770      	bx	lr
 800379c:	f3af 8000 	nop.w

080037a0 <pxCurrentTCBConst2>:
 80037a0:	240040c0 	.word	0x240040c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop

080037a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037a8:	4808      	ldr	r0, [pc, #32]	@ (80037cc <prvPortStartFirstTask+0x24>)
 80037aa:	6800      	ldr	r0, [r0, #0]
 80037ac:	6800      	ldr	r0, [r0, #0]
 80037ae:	f380 8808 	msr	MSP, r0
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8814 	msr	CONTROL, r0
 80037ba:	b662      	cpsie	i
 80037bc:	b661      	cpsie	f
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	df00      	svc	0
 80037c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037ca:	bf00      	nop
 80037cc:	e000ed08 	.word	0xe000ed08

080037d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037d6:	4b47      	ldr	r3, [pc, #284]	@ (80038f4 <xPortStartScheduler+0x124>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a47      	ldr	r2, [pc, #284]	@ (80038f8 <xPortStartScheduler+0x128>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10b      	bne.n	80037f8 <xPortStartScheduler+0x28>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	613b      	str	r3, [r7, #16]
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037f8:	4b3e      	ldr	r3, [pc, #248]	@ (80038f4 <xPortStartScheduler+0x124>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3f      	ldr	r2, [pc, #252]	@ (80038fc <xPortStartScheduler+0x12c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10b      	bne.n	800381a <xPortStartScheduler+0x4a>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	60fb      	str	r3, [r7, #12]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800381a:	4b39      	ldr	r3, [pc, #228]	@ (8003900 <xPortStartScheduler+0x130>)
 800381c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	22ff      	movs	r2, #255	@ 0xff
 800382a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <xPortStartScheduler+0x134>)
 8003840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003842:	4b31      	ldr	r3, [pc, #196]	@ (8003908 <xPortStartScheduler+0x138>)
 8003844:	2207      	movs	r2, #7
 8003846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003848:	e009      	b.n	800385e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <xPortStartScheduler+0x138>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3b01      	subs	r3, #1
 8003850:	4a2d      	ldr	r2, [pc, #180]	@ (8003908 <xPortStartScheduler+0x138>)
 8003852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003866:	2b80      	cmp	r3, #128	@ 0x80
 8003868:	d0ef      	beq.n	800384a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800386a:	4b27      	ldr	r3, [pc, #156]	@ (8003908 <xPortStartScheduler+0x138>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	d00b      	beq.n	800388e <xPortStartScheduler+0xbe>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60bb      	str	r3, [r7, #8]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <xPortStartScheduler+0x138>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <xPortStartScheduler+0x138>)
 8003896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <xPortStartScheduler+0x138>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038a0:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <xPortStartScheduler+0x138>)
 80038a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038ac:	4b17      	ldr	r3, [pc, #92]	@ (800390c <xPortStartScheduler+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a16      	ldr	r2, [pc, #88]	@ (800390c <xPortStartScheduler+0x13c>)
 80038b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038b8:	4b14      	ldr	r3, [pc, #80]	@ (800390c <xPortStartScheduler+0x13c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a13      	ldr	r2, [pc, #76]	@ (800390c <xPortStartScheduler+0x13c>)
 80038be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80038c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038c4:	f000 f8da 	bl	8003a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <xPortStartScheduler+0x140>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038ce:	f000 f8f9 	bl	8003ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038d2:	4b10      	ldr	r3, [pc, #64]	@ (8003914 <xPortStartScheduler+0x144>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003914 <xPortStartScheduler+0x144>)
 80038d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80038dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038de:	f7ff ff63 	bl	80037a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038e2:	f000 fc8f 	bl	8004204 <vTaskSwitchContext>
	prvTaskExitError();
 80038e6:	f7ff ff1b 	bl	8003720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	e000ed00 	.word	0xe000ed00
 80038f8:	410fc271 	.word	0x410fc271
 80038fc:	410fc270 	.word	0x410fc270
 8003900:	e000e400 	.word	0xe000e400
 8003904:	240040b8 	.word	0x240040b8
 8003908:	240040bc 	.word	0x240040bc
 800390c:	e000ed20 	.word	0xe000ed20
 8003910:	24000010 	.word	0x24000010
 8003914:	e000ef34 	.word	0xe000ef34

08003918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	607b      	str	r3, [r7, #4]
}
 8003930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003932:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <vPortEnterCritical+0x5c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	4a0e      	ldr	r2, [pc, #56]	@ (8003974 <vPortEnterCritical+0x5c>)
 800393a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <vPortEnterCritical+0x5c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d110      	bne.n	8003966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <vPortEnterCritical+0x60>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <vPortEnterCritical+0x4e>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	603b      	str	r3, [r7, #0]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <vPortEnterCritical+0x4a>
	}
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	24000010 	.word	0x24000010
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <vPortExitCritical+0x50>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <vPortExitCritical+0x26>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	607b      	str	r3, [r7, #4]
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <vPortExitCritical+0x50>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	4a08      	ldr	r2, [pc, #32]	@ (80039cc <vPortExitCritical+0x50>)
 80039aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <vPortExitCritical+0x50>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <vPortExitCritical+0x44>
 80039b4:	2300      	movs	r3, #0
 80039b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	24000010 	.word	0x24000010

080039d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039d0:	f3ef 8009 	mrs	r0, PSP
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <pxCurrentTCBConst>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f01e 0f10 	tst.w	lr, #16
 80039e0:	bf08      	it	eq
 80039e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	6010      	str	r0, [r2, #0]
 80039ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80039f4:	f380 8811 	msr	BASEPRI, r0
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f000 fc00 	bl	8004204 <vTaskSwitchContext>
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f380 8811 	msr	BASEPRI, r0
 8003a0c:	bc09      	pop	{r0, r3}
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	6808      	ldr	r0, [r1, #0]
 8003a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a16:	f01e 0f10 	tst.w	lr, #16
 8003a1a:	bf08      	it	eq
 8003a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a20:	f380 8809 	msr	PSP, r0
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w

08003a30 <pxCurrentTCBConst>:
 8003a30:	240040c0 	.word	0x240040c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop

08003a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	607b      	str	r3, [r7, #4]
}
 8003a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a52:	f000 fb1d 	bl	8004090 <xTaskIncrementTick>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <SysTick_Handler+0x40>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f383 8811 	msr	BASEPRI, r3
}
 8003a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <vPortSetupTimerInterrupt+0x34>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <vPortSetupTimerInterrupt+0x38>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <vPortSetupTimerInterrupt+0x3c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <vPortSetupTimerInterrupt+0x40>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	4a09      	ldr	r2, [pc, #36]	@ (8003ac0 <vPortSetupTimerInterrupt+0x44>)
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a9e:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <vPortSetupTimerInterrupt+0x34>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010
 8003ab4:	e000e018 	.word	0xe000e018
 8003ab8:	24000000 	.word	0x24000000
 8003abc:	10624dd3 	.word	0x10624dd3
 8003ac0:	e000e014 	.word	0xe000e014

08003ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ad4 <vPortEnableVFP+0x10>
 8003ac8:	6801      	ldr	r1, [r0, #0]
 8003aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003ace:	6001      	str	r1, [r0, #0]
 8003ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ad2:	bf00      	nop
 8003ad4:	e000ed88 	.word	0xe000ed88

08003ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	@ 0x38
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	623b      	str	r3, [r7, #32]
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	61fb      	str	r3, [r7, #28]
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	e7fd      	b.n	8003b1e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b22:	2354      	movs	r3, #84	@ 0x54
 8003b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b54      	cmp	r3, #84	@ 0x54
 8003b2a:	d00b      	beq.n	8003b44 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	bf00      	nop
 8003b42:	e7fd      	b.n	8003b40 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01e      	beq.n	8003b8a <xTaskCreateStatic+0xb2>
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01b      	beq.n	8003b8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b64:	2300      	movs	r3, #0
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f850 	bl	8003c22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b84:	f000 f8d6 	bl	8003d34 <prvAddNewTaskToReadyList>
 8003b88:	e001      	b.n	8003b8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b8e:	697b      	ldr	r3, [r7, #20]
	}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	@ 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	@ 0x30
 8003b9c:	af04      	add	r7, sp, #16
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fae1 	bl	8003174 <pvPortMalloc>
 8003bb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00e      	beq.n	8003bd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bba:	2054      	movs	r0, #84	@ 0x54
 8003bbc:	f7ff fada 	bl	8003174 <pvPortMalloc>
 8003bc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bce:	e005      	b.n	8003bdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bd0:	6978      	ldr	r0, [r7, #20]
 8003bd2:	f7ff fb9d 	bl	8003310 <vPortFree>
 8003bd6:	e001      	b.n	8003bdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	2300      	movs	r3, #0
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	9302      	str	r3, [sp, #8]
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f80e 	bl	8003c22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c06:	69f8      	ldr	r0, [r7, #28]
 8003c08:	f000 f894 	bl	8003d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	e002      	b.n	8003c18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c18:	69bb      	ldr	r3, [r7, #24]
	}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b088      	sub	sp, #32
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003c3a:	440b      	add	r3, r1
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	617b      	str	r3, [r7, #20]
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01f      	beq.n	8003cb2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e012      	b.n	8003c9e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	7819      	ldrb	r1, [r3, #0]
 8003c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	3334      	adds	r3, #52	@ 0x34
 8003c88:	460a      	mov	r2, r1
 8003c8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d9e9      	bls.n	8003c78 <prvInitialiseNewTask+0x56>
 8003ca4:	e000      	b.n	8003ca8 <prvInitialiseNewTask+0x86>
			{
				break;
 8003ca6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cb0:	e003      	b.n	8003cba <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d901      	bls.n	8003cc4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cc0:	2306      	movs	r3, #6
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fc58 	bl	8003590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	3318      	adds	r3, #24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fc53 	bl	8003590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	f1c3 0207 	rsb	r2, r3, #7
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	2200      	movs	r2, #0
 8003d04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	68f9      	ldr	r1, [r7, #12]
 8003d12:	69b8      	ldr	r0, [r7, #24]
 8003d14:	f7ff fcd0 	bl	80036b8 <pxPortInitialiseStack>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d3c:	f7ff fdec 	bl	8003918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d40:	4b2a      	ldr	r3, [pc, #168]	@ (8003dec <prvAddNewTaskToReadyList+0xb8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a29      	ldr	r2, [pc, #164]	@ (8003dec <prvAddNewTaskToReadyList+0xb8>)
 8003d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d4a:	4b29      	ldr	r3, [pc, #164]	@ (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d52:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d58:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <prvAddNewTaskToReadyList+0xb8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d110      	bne.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d60:	f000 fac4 	bl	80042ec <prvInitialiseTaskLists>
 8003d64:	e00d      	b.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d66:	4b23      	ldr	r3, [pc, #140]	@ (8003df4 <prvAddNewTaskToReadyList+0xc0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d6e:	4b20      	ldr	r3, [pc, #128]	@ (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d802      	bhi.n	8003d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a1b      	ldr	r2, [pc, #108]	@ (8003df8 <prvAddNewTaskToReadyList+0xc4>)
 8003d8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	4a18      	ldr	r2, [pc, #96]	@ (8003dfc <prvAddNewTaskToReadyList+0xc8>)
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <prvAddNewTaskToReadyList+0xcc>)
 8003dac:	441a      	add	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7ff fbf8 	bl	80035aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dba:	f7ff fddf 	bl	800397c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <prvAddNewTaskToReadyList+0xc0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00e      	beq.n	8003de4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <prvAddNewTaskToReadyList+0xbc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d207      	bcs.n	8003de4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <prvAddNewTaskToReadyList+0xd0>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	240041c0 	.word	0x240041c0
 8003df0:	240040c0 	.word	0x240040c0
 8003df4:	240041cc 	.word	0x240041cc
 8003df8:	240041dc 	.word	0x240041dc
 8003dfc:	240041c8 	.word	0x240041c8
 8003e00:	240040c4 	.word	0x240040c4
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d018      	beq.n	8003e4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e1a:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <vTaskDelay+0x64>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <vTaskDelay+0x32>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	60bb      	str	r3, [r7, #8]
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	e7fd      	b.n	8003e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e3a:	f000 f87d 	bl	8003f38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e3e:	2100      	movs	r1, #0
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fb11 	bl	8004468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e46:	f000 f885 	bl	8003f54 <xTaskResumeAll>
 8003e4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e52:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <vTaskDelay+0x68>)
 8003e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	240041e8 	.word	0x240041e8
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e82:	463a      	mov	r2, r7
 8003e84:	1d39      	adds	r1, r7, #4
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fb1e 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	9202      	str	r2, [sp, #8]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	491f      	ldr	r1, [pc, #124]	@ (8003f20 <vTaskStartScheduler+0xac>)
 8003ea4:	481f      	ldr	r0, [pc, #124]	@ (8003f24 <vTaskStartScheduler+0xb0>)
 8003ea6:	f7ff fe17 	bl	8003ad8 <xTaskCreateStatic>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <vTaskStartScheduler+0xb4>)
 8003eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f28 <vTaskStartScheduler+0xb4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e001      	b.n	8003ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d116      	bne.n	8003ef6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	613b      	str	r3, [r7, #16]
}
 8003eda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003edc:	4b13      	ldr	r3, [pc, #76]	@ (8003f2c <vTaskStartScheduler+0xb8>)
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ee4:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <vTaskStartScheduler+0xbc>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eea:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <vTaskStartScheduler+0xc0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ef0:	f7ff fc6e 	bl	80037d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ef4:	e00f      	b.n	8003f16 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d10b      	bne.n	8003f16 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60fb      	str	r3, [r7, #12]
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	e7fd      	b.n	8003f12 <vTaskStartScheduler+0x9e>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08008138 	.word	0x08008138
 8003f24:	080042bd 	.word	0x080042bd
 8003f28:	240041e4 	.word	0x240041e4
 8003f2c:	240041e0 	.word	0x240041e0
 8003f30:	240041cc 	.word	0x240041cc
 8003f34:	240041c4 	.word	0x240041c4

08003f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <vTaskSuspendAll+0x18>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	4a03      	ldr	r2, [pc, #12]	@ (8003f50 <vTaskSuspendAll+0x18>)
 8003f44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	240041e8 	.word	0x240041e8

08003f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f62:	4b42      	ldr	r3, [pc, #264]	@ (800406c <xTaskResumeAll+0x118>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <xTaskResumeAll+0x2e>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	603b      	str	r3, [r7, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f82:	f7ff fcc9 	bl	8003918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <xTaskResumeAll+0x118>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	4a37      	ldr	r2, [pc, #220]	@ (800406c <xTaskResumeAll+0x118>)
 8003f8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f90:	4b36      	ldr	r3, [pc, #216]	@ (800406c <xTaskResumeAll+0x118>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d161      	bne.n	800405c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f98:	4b35      	ldr	r3, [pc, #212]	@ (8004070 <xTaskResumeAll+0x11c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05d      	beq.n	800405c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa0:	e02e      	b.n	8004000 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa2:	4b34      	ldr	r3, [pc, #208]	@ (8004074 <xTaskResumeAll+0x120>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3318      	adds	r3, #24
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fb58 	bl	8003664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fb53 	bl	8003664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8004078 <xTaskResumeAll+0x124>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004078 <xTaskResumeAll+0x124>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4a27      	ldr	r2, [pc, #156]	@ (800407c <xTaskResumeAll+0x128>)
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7ff fadf 	bl	80035aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff0:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <xTaskResumeAll+0x12c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ffa:	4b22      	ldr	r3, [pc, #136]	@ (8004084 <xTaskResumeAll+0x130>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004000:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <xTaskResumeAll+0x120>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1cc      	bne.n	8003fa2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800400e:	f000 fa0b 	bl	8004428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004012:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <xTaskResumeAll+0x134>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d010      	beq.n	8004040 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800401e:	f000 f837 	bl	8004090 <xTaskIncrementTick>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004028:	4b16      	ldr	r3, [pc, #88]	@ (8004084 <xTaskResumeAll+0x130>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3b01      	subs	r3, #1
 8004032:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f1      	bne.n	800401e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800403a:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <xTaskResumeAll+0x134>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <xTaskResumeAll+0x130>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <xTaskResumeAll+0x138>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800405c:	f7ff fc8e 	bl	800397c <vPortExitCritical>

	return xAlreadyYielded;
 8004060:	68bb      	ldr	r3, [r7, #8]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	240041e8 	.word	0x240041e8
 8004070:	240041c0 	.word	0x240041c0
 8004074:	24004180 	.word	0x24004180
 8004078:	240041c8 	.word	0x240041c8
 800407c:	240040c4 	.word	0x240040c4
 8004080:	240040c0 	.word	0x240040c0
 8004084:	240041d4 	.word	0x240041d4
 8004088:	240041d0 	.word	0x240041d0
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409a:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <xTaskIncrementTick+0x148>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 808f 	bne.w	80041c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040a4:	4b4d      	ldr	r3, [pc, #308]	@ (80041dc <xTaskIncrementTick+0x14c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040ac:	4a4b      	ldr	r2, [pc, #300]	@ (80041dc <xTaskIncrementTick+0x14c>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d121      	bne.n	80040fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040b8:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <xTaskIncrementTick+0x150>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <xTaskIncrementTick+0x4a>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	603b      	str	r3, [r7, #0]
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <xTaskIncrementTick+0x46>
 80040da:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <xTaskIncrementTick+0x150>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	4b40      	ldr	r3, [pc, #256]	@ (80041e4 <xTaskIncrementTick+0x154>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3e      	ldr	r2, [pc, #248]	@ (80041e0 <xTaskIncrementTick+0x150>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4a3e      	ldr	r2, [pc, #248]	@ (80041e4 <xTaskIncrementTick+0x154>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <xTaskIncrementTick+0x158>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a3c      	ldr	r2, [pc, #240]	@ (80041e8 <xTaskIncrementTick+0x158>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	f000 f996 	bl	8004428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040fc:	4b3b      	ldr	r3, [pc, #236]	@ (80041ec <xTaskIncrementTick+0x15c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	429a      	cmp	r2, r3
 8004104:	d348      	bcc.n	8004198 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <xTaskIncrementTick+0x150>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004110:	4b36      	ldr	r3, [pc, #216]	@ (80041ec <xTaskIncrementTick+0x15c>)
 8004112:	f04f 32ff 	mov.w	r2, #4294967295
 8004116:	601a      	str	r2, [r3, #0]
					break;
 8004118:	e03e      	b.n	8004198 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411a:	4b31      	ldr	r3, [pc, #196]	@ (80041e0 <xTaskIncrementTick+0x150>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d203      	bcs.n	800413a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004132:	4a2e      	ldr	r2, [pc, #184]	@ (80041ec <xTaskIncrementTick+0x15c>)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004138:	e02e      	b.n	8004198 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3304      	adds	r3, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fa90 	bl	8003664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3318      	adds	r3, #24
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fa87 	bl	8003664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	2201      	movs	r2, #1
 800415c:	409a      	lsls	r2, r3
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <xTaskIncrementTick+0x160>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	4a22      	ldr	r2, [pc, #136]	@ (80041f0 <xTaskIncrementTick+0x160>)
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <xTaskIncrementTick+0x164>)
 8004176:	441a      	add	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7ff fa13 	bl	80035aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004188:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <xTaskIncrementTick+0x168>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	429a      	cmp	r2, r3
 8004190:	d3b9      	bcc.n	8004106 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004192:	2301      	movs	r3, #1
 8004194:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004196:	e7b6      	b.n	8004106 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004198:	4b17      	ldr	r3, [pc, #92]	@ (80041f8 <xTaskIncrementTick+0x168>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419e:	4915      	ldr	r1, [pc, #84]	@ (80041f4 <xTaskIncrementTick+0x164>)
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d901      	bls.n	80041b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041b4:	4b11      	ldr	r3, [pc, #68]	@ (80041fc <xTaskIncrementTick+0x16c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e004      	b.n	80041cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <xTaskIncrementTick+0x170>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004200 <xTaskIncrementTick+0x170>)
 80041ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041cc:	697b      	ldr	r3, [r7, #20]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	240041e8 	.word	0x240041e8
 80041dc:	240041c4 	.word	0x240041c4
 80041e0:	24004178 	.word	0x24004178
 80041e4:	2400417c 	.word	0x2400417c
 80041e8:	240041d8 	.word	0x240041d8
 80041ec:	240041e0 	.word	0x240041e0
 80041f0:	240041c8 	.word	0x240041c8
 80041f4:	240040c4 	.word	0x240040c4
 80041f8:	240040c0 	.word	0x240040c0
 80041fc:	240041d4 	.word	0x240041d4
 8004200:	240041d0 	.word	0x240041d0

08004204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800420a:	4b27      	ldr	r3, [pc, #156]	@ (80042a8 <vTaskSwitchContext+0xa4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004212:	4b26      	ldr	r3, [pc, #152]	@ (80042ac <vTaskSwitchContext+0xa8>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004218:	e040      	b.n	800429c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800421a:	4b24      	ldr	r3, [pc, #144]	@ (80042ac <vTaskSwitchContext+0xa8>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004220:	4b23      	ldr	r3, [pc, #140]	@ (80042b0 <vTaskSwitchContext+0xac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800422e:	7afb      	ldrb	r3, [r7, #11]
 8004230:	f1c3 031f 	rsb	r3, r3, #31
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	491f      	ldr	r1, [pc, #124]	@ (80042b4 <vTaskSwitchContext+0xb0>)
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <vTaskSwitchContext+0x5e>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	607b      	str	r3, [r7, #4]
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	e7fd      	b.n	800425e <vTaskSwitchContext+0x5a>
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a11      	ldr	r2, [pc, #68]	@ (80042b4 <vTaskSwitchContext+0xb0>)
 800426e:	4413      	add	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3308      	adds	r3, #8
 8004284:	429a      	cmp	r2, r3
 8004286:	d104      	bne.n	8004292 <vTaskSwitchContext+0x8e>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a07      	ldr	r2, [pc, #28]	@ (80042b8 <vTaskSwitchContext+0xb4>)
 800429a:	6013      	str	r3, [r2, #0]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	240041e8 	.word	0x240041e8
 80042ac:	240041d4 	.word	0x240041d4
 80042b0:	240041c8 	.word	0x240041c8
 80042b4:	240040c4 	.word	0x240040c4
 80042b8:	240040c0 	.word	0x240040c0

080042bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042c4:	f000 f852 	bl	800436c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <prvIdleTask+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d9f9      	bls.n	80042c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <prvIdleTask+0x2c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e0:	e7f0      	b.n	80042c4 <prvIdleTask+0x8>
 80042e2:	bf00      	nop
 80042e4:	240040c4 	.word	0x240040c4
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e00c      	b.n	8004312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <prvInitialiseTaskLists+0x60>)
 8004304:	4413      	add	r3, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff f922 	bl	8003550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d9ef      	bls.n	80042f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004318:	480d      	ldr	r0, [pc, #52]	@ (8004350 <prvInitialiseTaskLists+0x64>)
 800431a:	f7ff f919 	bl	8003550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800431e:	480d      	ldr	r0, [pc, #52]	@ (8004354 <prvInitialiseTaskLists+0x68>)
 8004320:	f7ff f916 	bl	8003550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004324:	480c      	ldr	r0, [pc, #48]	@ (8004358 <prvInitialiseTaskLists+0x6c>)
 8004326:	f7ff f913 	bl	8003550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800432a:	480c      	ldr	r0, [pc, #48]	@ (800435c <prvInitialiseTaskLists+0x70>)
 800432c:	f7ff f910 	bl	8003550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004330:	480b      	ldr	r0, [pc, #44]	@ (8004360 <prvInitialiseTaskLists+0x74>)
 8004332:	f7ff f90d 	bl	8003550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004336:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <prvInitialiseTaskLists+0x78>)
 8004338:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <prvInitialiseTaskLists+0x64>)
 800433a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <prvInitialiseTaskLists+0x7c>)
 800433e:	4a05      	ldr	r2, [pc, #20]	@ (8004354 <prvInitialiseTaskLists+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	240040c4 	.word	0x240040c4
 8004350:	24004150 	.word	0x24004150
 8004354:	24004164 	.word	0x24004164
 8004358:	24004180 	.word	0x24004180
 800435c:	24004194 	.word	0x24004194
 8004360:	240041ac 	.word	0x240041ac
 8004364:	24004178 	.word	0x24004178
 8004368:	2400417c 	.word	0x2400417c

0800436c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004372:	e019      	b.n	80043a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004374:	f7ff fad0 	bl	8003918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <prvCheckTasksWaitingTermination+0x50>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f96d 	bl	8003664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a0b      	ldr	r2, [pc, #44]	@ (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 8004392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 800439c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800439e:	f7ff faed 	bl	800397c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f810 	bl	80043c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e1      	bne.n	8004374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	24004194 	.word	0x24004194
 80043c0:	240041c0 	.word	0x240041c0
 80043c4:	240041a8 	.word	0x240041a8

080043c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d108      	bne.n	80043ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe ff96 	bl	8003310 <vPortFree>
				vPortFree( pxTCB );
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fe ff93 	bl	8003310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ea:	e019      	b.n	8004420 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d103      	bne.n	80043fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe ff8a 	bl	8003310 <vPortFree>
	}
 80043fc:	e010      	b.n	8004420 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004404:	2b02      	cmp	r3, #2
 8004406:	d00b      	beq.n	8004420 <prvDeleteTCB+0x58>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <prvDeleteTCB+0x54>
	}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442e:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <prvResetNextTaskUnblockTime+0x38>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004438:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <prvResetNextTaskUnblockTime+0x3c>)
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004440:	e008      	b.n	8004454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004442:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <prvResetNextTaskUnblockTime+0x38>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a04      	ldr	r2, [pc, #16]	@ (8004464 <prvResetNextTaskUnblockTime+0x3c>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	24004178 	.word	0x24004178
 8004464:	240041e0 	.word	0x240041e0

08004468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004472:	4b29      	ldr	r3, [pc, #164]	@ (8004518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004478:	4b28      	ldr	r3, [pc, #160]	@ (800451c <prvAddCurrentTaskToDelayedList+0xb4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3304      	adds	r3, #4
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff f8f0 	bl	8003664 <uxListRemove>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <prvAddCurrentTaskToDelayedList+0xb4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	2201      	movs	r2, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4013      	ands	r3, r2
 800449e:	4a20      	ldr	r2, [pc, #128]	@ (8004520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d10a      	bne.n	80044c0 <prvAddCurrentTaskToDelayedList+0x58>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	481a      	ldr	r0, [pc, #104]	@ (8004524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80044ba:	f7ff f876 	bl	80035aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044be:	e026      	b.n	800450e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044c8:	4b14      	ldr	r3, [pc, #80]	@ (800451c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d209      	bcs.n	80044ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7ff f884 	bl	80035f2 <vListInsert>
}
 80044ea:	e010      	b.n	800450e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ec:	4b0f      	ldr	r3, [pc, #60]	@ (800452c <prvAddCurrentTaskToDelayedList+0xc4>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f7ff f87a 	bl	80035f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d202      	bcs.n	800450e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004508:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6013      	str	r3, [r2, #0]
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	240041c4 	.word	0x240041c4
 800451c:	240040c0 	.word	0x240040c0
 8004520:	240041c8 	.word	0x240041c8
 8004524:	240041ac 	.word	0x240041ac
 8004528:	2400417c 	.word	0x2400417c
 800452c:	24004178 	.word	0x24004178
 8004530:	240041e0 	.word	0x240041e0

08004534 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ffdd 	bl	8004556 <metal_list_add_before>
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80045ae:	6839      	ldr	r1, [r7, #0]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 ff95 	bl	80064e0 <metal_machine_cache_flush>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 ff93 	bl	80064f6 <metal_machine_cache_invalidate>
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ffdd 	bl	80045a4 <__metal_cache_flush>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffdd 	bl	80045be <__metal_cache_invalidate>
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <metal_bus_register+0x20>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <metal_bus_register+0x20>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <metal_bus_register+0x26>
		return -EINVAL;
 800462c:	f06f 0315 	mvn.w	r3, #21
 8004630:	e026      	b.n	8004680 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f82b 	bl	8004694 <metal_bus_find>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <metal_bus_register+0x3e>
		return -EEXIST;
 8004644:	f06f 0310 	mvn.w	r3, #16
 8004648:	e01a      	b.n	8004680 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	331c      	adds	r3, #28
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ff70 	bl	8004534 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3324      	adds	r3, #36	@ 0x24
 8004658:	4619      	mov	r1, r3
 800465a:	480b      	ldr	r0, [pc, #44]	@ (8004688 <metal_bus_register+0x7c>)
 800465c:	f7ff ff95 	bl	800458a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <metal_bus_register+0x80>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b06      	cmp	r3, #6
 8004666:	d90a      	bls.n	800467e <metal_bus_register+0x72>
 8004668:	4b08      	ldr	r3, [pc, #32]	@ (800468c <metal_bus_register+0x80>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <metal_bus_register+0x72>
 8004670:	4b06      	ldr	r3, [pc, #24]	@ (800468c <metal_bus_register+0x80>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	4905      	ldr	r1, [pc, #20]	@ (8004690 <metal_bus_register+0x84>)
 800467a:	2007      	movs	r0, #7
 800467c:	4798      	blx	r3
	return 0;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	240041f4 	.word	0x240041f4
 800468c:	240041ec 	.word	0x240041ec
 8004690:	08008140 	.word	0x08008140

08004694 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 800469e:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <metal_bus_find+0x58>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e017      	b.n	80046d6 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3b24      	subs	r3, #36	@ 0x24
 80046aa:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fe14 	bl	80002e0 <strcmp>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <metal_bus_find+0x3a>
			continue;
		if (result)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <metal_bus_find+0x36>
			*result = bus;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	601a      	str	r2, [r3, #0]
		return 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e009      	b.n	80046e2 <metal_bus_find+0x4e>
			continue;
 80046ce:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <metal_bus_find+0x5c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d1e3      	bne.n	80046a6 <metal_bus_find+0x12>
	}
	return -ENOENT;
 80046de:	f06f 0301 	mvn.w	r3, #1
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	240041ec 	.word	0x240041ec
 80046f0:	240041f4 	.word	0x240041f4

080046f4 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <metal_device_open+0x2e>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <metal_device_open+0x2e>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <metal_device_open+0x2e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8004722:	f06f 0315 	mvn.w	r3, #21
 8004726:	e01f      	b.n	8004768 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8004728:	f107 0310 	add.w	r3, r7, #16
 800472c:	4619      	mov	r1, r3
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ffb0 	bl	8004694 <metal_bus_find>
 8004734:	6178      	str	r0, [r7, #20]
	if (error)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <metal_device_open+0x4c>
		return error;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	e013      	b.n	8004768 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <metal_device_open+0x5a>
		return -ENODEV;
 8004748:	f06f 0312 	mvn.w	r3, #18
 800474c:	e00c      	b.n	8004768 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	6938      	ldr	r0, [r7, #16]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	4798      	blx	r3
 800475a:	6178      	str	r0, [r7, #20]
	if (error)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <metal_device_open+0x72>
		return error;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	e000      	b.n	8004768 <metal_device_open+0x74>

	return 0;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <metal_register_generic_device+0x22>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <metal_register_generic_device+0x28>
		return -EINVAL;
 8004792:	f06f 0315 	mvn.w	r3, #21
 8004796:	e009      	b.n	80047ac <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a06      	ldr	r2, [pc, #24]	@ (80047b4 <metal_register_generic_device+0x44>)
 800479c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	336c      	adds	r3, #108	@ 0x6c
 80047a2:	4619      	mov	r1, r3
 80047a4:	4804      	ldr	r0, [pc, #16]	@ (80047b8 <metal_register_generic_device+0x48>)
 80047a6:	f7ff fef0 	bl	800458a <metal_list_add_tail>
			    &device->node);
	return 0;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	24000014 	.word	0x24000014
 80047b8:	24004204 	.word	0x24004204

080047bc <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80047c8:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <metal_generic_dev_open+0x58>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e017      	b.n	8004800 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b6c      	subs	r3, #108	@ 0x6c
 80047d4:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fd7f 	bl	80002e0 <strcmp>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 80047ee:	6938      	ldr	r0, [r7, #16]
 80047f0:	f000 f890 	bl	8004914 <metal_generic_dev_sys_open>
 80047f4:	4603      	mov	r3, r0
 80047f6:	e009      	b.n	800480c <metal_generic_dev_open+0x50>
			continue;
 80047f8:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4a05      	ldr	r2, [pc, #20]	@ (8004818 <metal_generic_dev_open+0x5c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d1e3      	bne.n	80047d0 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8004808:	f06f 0312 	mvn.w	r3, #18
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	240041ec 	.word	0x240041ec
 8004818:	24004204 	.word	0x24004204

0800481c <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 800482a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d009      	beq.n	8004846 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	461a      	mov	r2, r3
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004842:	f002 ff0a 	bl	800765a <memcpy>
	for (i = 0; i < nents_in; i++) {
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e02f      	b.n	80048ac <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d114      	bne.n	800487c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	461a      	mov	r2, r3
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	4413      	add	r3, r2
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	461a      	mov	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	4413      	add	r3, r2
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	4619      	mov	r1, r3
 8004878:	f7ff feae 	bl	80045d8 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	461a      	mov	r2, r3
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	4413      	add	r3, r2
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	461a      	mov	r2, r3
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	4413      	add	r3, r2
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4619      	mov	r1, r3
 80048a2:	f7ff fea6 	bl	80045f2 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3301      	adds	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	dbcb      	blt.n	800484c <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e017      	b.n	8004902 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	461a      	mov	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	4413      	add	r3, r2
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	461a      	mov	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4413      	add	r3, r2
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4619      	mov	r1, r3
 80048f8:	f7ff fe7b 	bl	80045f2 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3301      	adds	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	429a      	cmp	r2, r3
 8004908:	dbe3      	blt.n	80048d2 <metal_generic_dev_dma_unmap+0x14>
	}
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e013      	b.n	800494a <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4613      	mov	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	3308      	adds	r3, #8
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	3304      	adds	r3, #4
 8004934:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 800493e:	68b8      	ldr	r0, [r7, #8]
 8004940:	f000 f81e 	bl	8004980 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d3e6      	bcc.n	8004922 <metal_generic_dev_sys_open+0xe>
 8004954:	e000      	b.n	8004958 <metal_generic_dev_sys_open+0x44>
			break;
 8004956:	bf00      	nop
	}

	return 0;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 800496c:	4803      	ldr	r0, [pc, #12]	@ (800497c <metal_sys_init+0x18>)
 800496e:	f7ff fe4d 	bl	800460c <metal_bus_register>
	return 0;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	24000014 	.word	0x24000014

08004980 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	613b      	str	r3, [r7, #16]
	if (psize) {
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02c      	beq.n	80049f4 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e013      	b.n	80049e2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fd9d 	bl	800650c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	3301      	adds	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d9e2      	bls.n	80049ba <metal_sys_io_mem_map+0x3a>
		}
	}
}
 80049f4:	bf00      	nop
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <metal_list_init>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	int error = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4810      	ldr	r0, [pc, #64]	@ (8004a74 <metal_init+0x54>)
 8004a32:	f002 fd62 	bl	80074fa <memset>

	_metal.common.log_handler   = params->log_handler;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a74 <metal_init+0x54>)
 8004a3c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	791a      	ldrb	r2, [r3, #4]
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <metal_init+0x54>)
 8004a44:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8004a46:	480c      	ldr	r0, [pc, #48]	@ (8004a78 <metal_init+0x58>)
 8004a48:	f7ff ffd8 	bl	80049fc <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8004a4c:	480b      	ldr	r0, [pc, #44]	@ (8004a7c <metal_init+0x5c>)
 8004a4e:	f7ff ffd5 	bl	80049fc <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8004a52:	480b      	ldr	r0, [pc, #44]	@ (8004a80 <metal_init+0x60>)
 8004a54:	f7ff ffd2 	bl	80049fc <metal_list_init>

	error = metal_sys_init(params);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff83 	bl	8004964 <metal_sys_init>
 8004a5e:	60f8      	str	r0, [r7, #12]
	if (error)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <metal_init+0x4a>
		return error;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	e000      	b.n	8004a6c <metal_init+0x4c>

	return error;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	240041ec 	.word	0x240041ec
 8004a78:	240041f4 	.word	0x240041f4
 8004a7c:	240041fc 	.word	0x240041fc
 8004a80:	24004204 	.word	0x24004204

08004a84 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d009      	beq.n	8004aac <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d804      	bhi.n	8004aac <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	e000      	b.n	8004aae <metal_io_virt+0x2a>
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8004aba:	b5b0      	push	{r4, r5, r7, lr}
 8004abc:	b08a      	sub	sp, #40	@ 0x28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
 8004ad8:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]
	io->size = size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004af0:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	2b1f      	cmp	r3, #31
 8004af6:	d904      	bls.n	8004b02 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	611a      	str	r2, [r3, #16]
 8004b00:	e006      	b.n	8004b10 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8004b02:	2201      	movs	r2, #1
 8004b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b14:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8004b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00b      	beq.n	8004b34 <metal_io_init+0x7a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b20:	f103 0418 	add.w	r4, r3, #24
 8004b24:	4615      	mov	r5, r2
 8004b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004b32:	e00a      	b.n	8004b4a <metal_io_init+0x90>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f103 0418 	add.w	r4, r3, #24
 8004b3a:	f107 0510 	add.w	r5, r7, #16
 8004b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b46:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff ff18 	bl	8004980 <metal_sys_io_mem_map>
}
 8004b50:	bf00      	nop
 8004b52:	3728      	adds	r7, #40	@ 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}

08004b58 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b08b      	sub	sp, #44	@ 0x2c
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff ff8b 	bl	8004a84 <metal_io_virt>
 8004b6e:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d902      	bls.n	8004b84 <metal_io_block_read+0x2c>
		return -ERANGE;
 8004b7e:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8004b82:	e05c      	b.n	8004c3e <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	441a      	add	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d904      	bls.n	8004b9c <metal_io_block_read+0x44>
		len = io->size - offset;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	603b      	str	r3, [r7, #0]
	retlen = len;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1c      	ldr	r4, [r3, #32]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2305      	movs	r3, #5
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	47a0      	blx	r4
 8004bba:	6178      	str	r0, [r7, #20]
 8004bbc:	e03e      	b.n	8004c3c <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8004bbe:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8004bc2:	e00c      	b.n	8004bde <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	701a      	strb	r2, [r3, #0]
			dest++;
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]
			ptr++;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
			len--;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	603b      	str	r3, [r7, #0]
		while ( len && (
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d017      	beq.n	8004c14 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ea      	bne.n	8004bc4 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8004bf8:	e00c      	b.n	8004c14 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	3304      	adds	r3, #4
 8004c06:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	dcef      	bgt.n	8004bfa <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8004c1a:	e00c      	b.n	8004c36 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ef      	bne.n	8004c1c <metal_io_block_read+0xc4>
	}
	return retlen;
 8004c3c:	697b      	ldr	r3, [r7, #20]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3724      	adds	r7, #36	@ 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}

08004c46 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8004c46:	b590      	push	{r4, r7, lr}
 8004c48:	b08b      	sub	sp, #44	@ 0x2c
 8004c4a:	af02      	add	r7, sp, #8
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff14 	bl	8004a84 <metal_io_virt>
 8004c5c:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d902      	bls.n	8004c72 <metal_io_block_write+0x2c>
		return -ERANGE;
 8004c6c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8004c70:	e05b      	b.n	8004d2a <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d904      	bls.n	8004c8a <metal_io_block_write+0x44>
		len = io->size - offset;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	603b      	str	r3, [r7, #0]
	retlen = len;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d017      	beq.n	8004cc6 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2305      	movs	r3, #5
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	47a0      	blx	r4
 8004ca8:	6178      	str	r0, [r7, #20]
 8004caa:	e03d      	b.n	8004d28 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	701a      	strb	r2, [r3, #0]
			ptr++;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
			source++;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	61bb      	str	r3, [r7, #24]
			len--;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	603b      	str	r3, [r7, #0]
		while ( len && (
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d017      	beq.n	8004cfc <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1ea      	bne.n	8004cac <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8004ce0:	e00c      	b.n	8004cfc <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3304      	adds	r3, #4
 8004cee:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	3b04      	subs	r3, #4
 8004cfa:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	dcef      	bgt.n	8004ce2 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8004d02:	e00c      	b.n	8004d1e <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3301      	adds	r3, #1
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ef      	bne.n	8004d04 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8004d24:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8004d28:	697b      	ldr	r3, [r7, #20]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3724      	adds	r7, #36	@ 0x24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd90      	pop	{r4, r7, pc}

08004d32 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8004d32:	b590      	push	{r4, r7, lr}
 8004d34:	b08b      	sub	sp, #44	@ 0x2c
 8004d36:	af02      	add	r7, sp, #8
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fe9d 	bl	8004a84 <metal_io_virt>
 8004d4a:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d902      	bls.n	8004d60 <metal_io_block_set+0x2e>
		return -ERANGE;
 8004d5a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8004d5e:	e05d      	b.n	8004e1c <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d904      	bls.n	8004d78 <metal_io_block_set+0x46>
		len = io->size - offset;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	603b      	str	r3, [r7, #0]
	retlen = len;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004d88:	79fa      	ldrb	r2, [r7, #7]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2305      	movs	r3, #5
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	47a0      	blx	r4
 8004d96:	e040      	b.n	8004e1a <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e00a      	b.n	8004db8 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8004da2:	79fa      	ldrb	r2, [r7, #7]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3301      	adds	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d9f1      	bls.n	8004da2 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8004dbe:	e008      	b.n	8004dd2 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	79fa      	ldrb	r2, [r7, #7]
 8004dc4:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <metal_io_block_set+0xc4>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ee      	bne.n	8004dc0 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8004de2:	e008      	b.n	8004df6 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3304      	adds	r3, #4
 8004dee:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3b04      	subs	r3, #4
 8004df4:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	dcf3      	bgt.n	8004de4 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8004dfc:	e008      	b.n	8004e10 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	79fa      	ldrb	r2, [r7, #7]
 8004e02:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f3      	bne.n	8004dfe <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8004e16:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8004e1a:	693b      	ldr	r3, [r7, #16]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3724      	adds	r7, #36	@ 0x24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}

08004e24 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8004e24:	b40e      	push	{r1, r2, r3}
 8004e26:	b480      	push	{r7}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	b003      	add	sp, #12
 8004e3c:	4770      	bx	lr

08004e3e <metal_io_virt>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d009      	beq.n	8004e66 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d804      	bhi.n	8004e66 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4413      	add	r3, r2
 8004e64:	e000      	b.n	8004e68 <metal_io_virt+0x2a>
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d201      	bcs.n	8004e96 <metal_io_virt_to_offset+0x22>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e001      	b.n	8004e9a <metal_io_virt_to_offset+0x26>
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8004ea8:	b5b0      	push	{r4, r5, r7, lr}
 8004eaa:	b08c      	sub	sp, #48	@ 0x30
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff ffbf 	bl	8004e3e <metal_io_virt>
 8004ec0:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699c      	ldr	r4, [r3, #24]
 8004ece:	79fa      	ldrb	r2, [r7, #7]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	47a0      	blx	r4
 8004ed8:	4604      	mov	r4, r0
 8004eda:	460d      	mov	r5, r1
 8004edc:	e059      	b.n	8004f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8004ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <metal_io_read+0x62>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10f      	bne.n	8004f0a <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8004eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef0:	f3bf 8f5b 	dmb	ish
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	f3bf 8f5b 	dmb	ish
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	76fb      	strb	r3, [r7, #27]
 8004efe:	7efb      	ldrb	r3, [r7, #27]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2200      	movs	r2, #0
 8004f04:	461c      	mov	r4, r3
 8004f06:	4615      	mov	r5, r2
 8004f08:	e043      	b.n	8004f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8004f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <metal_io_read+0x8e>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d10f      	bne.n	8004f36 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	f3bf 8f5b 	dmb	ish
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f3bf 8f5b 	dmb	ish
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	833b      	strh	r3, [r7, #24]
 8004f2a:	8b3b      	ldrh	r3, [r7, #24]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2200      	movs	r2, #0
 8004f30:	461c      	mov	r4, r3
 8004f32:	4615      	mov	r5, r2
 8004f34:	e02d      	b.n	8004f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8004f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <metal_io_read+0xb6>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d10d      	bne.n	8004f5e <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8004f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f3bf 8f5b 	dmb	ish
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f3bf 8f5b 	dmb	ish
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	461c      	mov	r4, r3
 8004f5a:	4615      	mov	r5, r2
 8004f5c:	e019      	b.n	8004f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8004f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <metal_io_read+0xde>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d10d      	bne.n	8004f86 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f3bf 8f5b 	dmb	ish
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f3bf 8f5b 	dmb	ish
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	461c      	mov	r4, r3
 8004f82:	4615      	mov	r5, r2
 8004f84:	e005      	b.n	8004f92 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <metal_io_read+0xf8>)
 8004f88:	4a06      	ldr	r2, [pc, #24]	@ (8004fa4 <metal_io_read+0xfc>)
 8004f8a:	21f0      	movs	r1, #240	@ 0xf0
 8004f8c:	4806      	ldr	r0, [pc, #24]	@ (8004fa8 <metal_io_read+0x100>)
 8004f8e:	f002 f8c1 	bl	8007114 <__assert_func>
	return 0; /* quiet compiler */
}
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	3730      	adds	r7, #48	@ 0x30
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa0:	080081ec 	.word	0x080081ec
 8004fa4:	08008350 	.word	0x08008350
 8004fa8:	080081f0 	.word	0x080081f0

08004fac <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b08f      	sub	sp, #60	@ 0x3c
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff ff3e 	bl	8004e3e <metal_io_virt>
 8004fc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	69dc      	ldr	r4, [r3, #28]
 8004fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8004fe4:	e04e      	b.n	8005084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <metal_io_write+0x5e>
 8004fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10b      	bne.n	800500a <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8004ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ff6:	783b      	ldrb	r3, [r7, #0]
 8004ff8:	76fb      	strb	r3, [r7, #27]
 8004ffa:	7efa      	ldrb	r2, [r7, #27]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffe:	f3bf 8f5b 	dmb	ish
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	f3bf 8f5b 	dmb	ish
 8005008:	e03c      	b.n	8005084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <metal_io_write+0x82>
 8005010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005012:	2b02      	cmp	r3, #2
 8005014:	d10b      	bne.n	800502e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8005016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
 800501a:	883b      	ldrh	r3, [r7, #0]
 800501c:	833b      	strh	r3, [r7, #24]
 800501e:	8b3a      	ldrh	r2, [r7, #24]
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	f3bf 8f5b 	dmb	ish
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	f3bf 8f5b 	dmb	ish
 800502c:	e02a      	b.n	8005084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00e      	beq.n	8005052 <metal_io_write+0xa6>
 8005034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005036:	2b04      	cmp	r3, #4
 8005038:	d10b      	bne.n	8005052 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	623b      	str	r3, [r7, #32]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f3bf 8f5b 	dmb	ish
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f5b 	dmb	ish
 8005050:	e018      	b.n	8005084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8005052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <metal_io_write+0xca>
 8005058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505a:	2b04      	cmp	r3, #4
 800505c:	d10b      	bne.n	8005076 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f3bf 8f5b 	dmb	ish
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f5b 	dmb	ish
 8005074:	e006      	b.n	8005084 <metal_io_write+0xd8>
		metal_assert (0);
 8005076:	4b05      	ldr	r3, [pc, #20]	@ (800508c <metal_io_write+0xe0>)
 8005078:	4a05      	ldr	r2, [pc, #20]	@ (8005090 <metal_io_write+0xe4>)
 800507a:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800507e:	4805      	ldr	r0, [pc, #20]	@ (8005094 <metal_io_write+0xe8>)
 8005080:	f002 f848 	bl	8007114 <__assert_func>
}
 8005084:	bf00      	nop
 8005086:	3734      	adds	r7, #52	@ 0x34
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}
 800508c:	080081ec 	.word	0x080081ec
 8005090:	08008360 	.word	0x08008360
 8005094:	080081f0 	.word	0x080081f0

08005098 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f002 f855 	bl	8007150 <malloc>
 80050a6:	4603      	mov	r3, r0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	free(ptr);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f002 f851 	bl	8007160 <free>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3307      	adds	r3, #7
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff ffde 	bl	8005098 <metal_allocate_memory>
 80050dc:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	2100      	movs	r1, #0
 80050e8:	68b8      	ldr	r0, [r7, #8]
 80050ea:	f002 fa06 	bl	80074fa <memset>
	}

	return vqs;
 80050ee:	68bb      	ldr	r3, [r7, #8]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	891b      	ldrh	r3, [r3, #8]
 8005104:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3b18      	subs	r3, #24
 8005110:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	d905      	bls.n	8005128 <rproc_virtio_virtqueue_notify+0x30>
 800511c:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <rproc_virtio_virtqueue_notify+0x5c>)
 800511e:	4a0e      	ldr	r2, [pc, #56]	@ (8005158 <rproc_virtio_virtqueue_notify+0x60>)
 8005120:	2133      	movs	r1, #51	@ 0x33
 8005122:	480e      	ldr	r0, [pc, #56]	@ (800515c <rproc_virtio_virtqueue_notify+0x64>)
 8005124:	f001 fff6 	bl	8007114 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4613      	mov	r3, r2
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	440b      	add	r3, r1
 8005138:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	6810      	ldr	r0, [r2, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	6912      	ldr	r2, [r2, #16]
 8005146:	4611      	mov	r1, r2
 8005148:	4798      	blx	r3
}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	08008238 	.word	0x08008238
 8005158:	08008330 	.word	0x08008330
 800515c:	08008254 	.word	0x08008254

08005160 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3b18      	subs	r3, #24
 800516c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3318      	adds	r3, #24
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fe77 	bl	8004e74 <metal_io_virt_to_offset>
 8005186:	4601      	mov	r1, r0
 8005188:	2301      	movs	r3, #1
 800518a:	2205      	movs	r2, #5
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fe8b 	bl	8004ea8 <metal_io_read>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4613      	mov	r3, r2
 8005198:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800519a:	7afb      	ldrb	r3, [r7, #11]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 80051a4:	b5b0      	push	{r4, r5, r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3b18      	subs	r3, #24
 80051b4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3318      	adds	r3, #24
 80051c6:	4619      	mov	r1, r3
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff fe53 	bl	8004e74 <metal_io_virt_to_offset>
 80051ce:	4601      	mov	r1, r0
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	2200      	movs	r2, #0
 80051d4:	461c      	mov	r4, r3
 80051d6:	4615      	mov	r5, r2
 80051d8:	2301      	movs	r3, #1
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	2305      	movs	r3, #5
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4622      	mov	r2, r4
 80051e2:	462b      	mov	r3, r5
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fee1 	bl	8004fac <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6810      	ldr	r0, [r2, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	4611      	mov	r1, r2
 80051f8:	4798      	blx	r3
}
 80051fa:	bf00      	nop
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bdb0      	pop	{r4, r5, r7, pc}

08005202 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b086      	sub	sp, #24
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3b18      	subs	r3, #24
 800520e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	330c      	adds	r3, #12
 8005220:	4619      	mov	r1, r3
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fe26 	bl	8004e74 <metal_io_virt_to_offset>
 8005228:	4601      	mov	r1, r0
 800522a:	2304      	movs	r3, #4
 800522c:	2205      	movs	r2, #5
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fe3a 	bl	8004ea8 <metal_io_read>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4613      	mov	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800523c:	68bb      	ldr	r3, [r7, #8]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8005246:	b5b0      	push	{r4, r5, r7, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	af02      	add	r7, sp, #8
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3b18      	subs	r3, #24
 8005254:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	330c      	adds	r3, #12
 8005266:	4619      	mov	r1, r3
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff fe03 	bl	8004e74 <metal_io_virt_to_offset>
 800526e:	4601      	mov	r1, r0
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	461c      	mov	r4, r3
 8005276:	4615      	mov	r5, r2
 8005278:	2304      	movs	r3, #4
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	2305      	movs	r3, #5
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4622      	mov	r2, r4
 8005282:	462b      	mov	r3, r5
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fe91 	bl	8004fac <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	6810      	ldr	r0, [r2, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	4611      	mov	r1, r2
 8005298:	4798      	blx	r3
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bdb0      	pop	{r4, r5, r7, pc}

080052a2 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 80052fe:	2140      	movs	r1, #64	@ 0x40
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff4f 	bl	80051a4 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	@ 0x38
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	7e5b      	ldrb	r3, [r3, #25]
 8005326:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8005328:	2050      	movs	r0, #80	@ 0x50
 800532a:	f7ff feb5 	bl	8005098 <metal_allocate_memory>
 800532e:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	e092      	b.n	8005460 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800533a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fea7 	bl	8005098 <metal_allocate_memory>
 800534a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8081 	beq.w	8005456 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8005354:	2250      	movs	r2, #80	@ 0x50
 8005356:	2100      	movs	r1, #0
 8005358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800535a:	f002 f8ce 	bl	80074fa <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800535e:	2218      	movs	r2, #24
 8005360:	2100      	movs	r1, #0
 8005362:	6a38      	ldr	r0, [r7, #32]
 8005364:	f002 f8c9 	bl	80074fa <memset>
	vdev = &rpvdev->vdev;
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	3318      	adds	r3, #24
 800536c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
 8005372:	e025      	b.n	80053c0 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8005378:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	3318      	adds	r3, #24
 8005384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005386:	4413      	add	r3, r2
 8005388:	3304      	adds	r3, #4
 800538a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8005398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800539a:	f7ff fe94 	bl	80050c6 <virtqueue_allocate>
 800539e:	6178      	str	r0, [r7, #20]
		if (!vq)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d031      	beq.n	800540a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 80053a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053a8:	4613      	mov	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	4413      	add	r3, r2
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80053ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053bc:	3301      	adds	r3, #1
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d3d5      	bcc.n	8005374 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053cc:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053d2:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053de:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f6:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053fc:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <rproc_virtio_create_vdev+0x158>)
 8005402:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	3318      	adds	r3, #24
 8005408:	e02a      	b.n	8005460 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800540a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800540c:	2300      	movs	r3, #0
 800540e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005410:	e019      	b.n	8005446 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8005412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	461a      	mov	r2, r3
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	4413      	add	r3, r2
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00b      	beq.n	8005440 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8005428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800542a:	4613      	mov	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4413      	add	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	461a      	mov	r2, r3
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	4413      	add	r3, r2
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fe38 	bl	80050b0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8005440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005442:	3301      	adds	r3, #1
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
 8005446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	429a      	cmp	r2, r3
 800544c:	d3e1      	bcc.n	8005412 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800544e:	6a38      	ldr	r0, [r7, #32]
 8005450:	f7ff fe2e 	bl	80050b0 <metal_free_memory>
 8005454:	e000      	b.n	8005458 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8005456:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8005458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800545a:	f7ff fe29 	bl	80050b0 <metal_free_memory>
	return NULL;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3738      	adds	r7, #56	@ 0x38
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	0800830c 	.word	0x0800830c

0800546c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8005488:	f06f 0301 	mvn.w	r3, #1
 800548c:	e019      	b.n	80054c2 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	440b      	add	r3, r1
 800549e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6a3a      	ldr	r2, [r7, #32]
 80054a4:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054be:	609a      	str	r2, [r3, #8]

	return 0;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <rproc_virtio_notified+0x16>
		return -EINVAL;
 80054de:	f06f 0315 	mvn.w	r3, #21
 80054e2:	e02c      	b.n	800553e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d101      	bne.n	80054f2 <rproc_virtio_notified+0x24>
		return 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e025      	b.n	800553e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e01a      	b.n	8005534 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4613      	mov	r3, r2
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4413      	add	r3, r2
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	440b      	add	r3, r1
 800550e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d003      	beq.n	8005522 <rproc_virtio_notified+0x54>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d105      	bne.n	800552e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8005528:	68b8      	ldr	r0, [r7, #8]
 800552a:	f001 fb5a 	bl	8006be2 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3e0      	bcc.n	80054fe <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fe02 	bl	8005160 <rproc_virtio_get_status>
 800555c:	4603      	mov	r3, r0
 800555e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800556a:	e7f4      	b.n	8005556 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8005570:	bf00      	nop
	}
}
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8005580:	bf00      	nop
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	4611      	mov	r1, r2
 8005588:	f3bf 8f5b 	dmb	ish
 800558c:	e8d3 2f4f 	ldrexb	r2, [r3]
 8005590:	e8c3 1f40 	strexb	r0, r1, [r3]
 8005594:	2800      	cmp	r0, #0
 8005596:	d1f9      	bne.n	800558c <__metal_mutex_acquire+0x14>
 8005598:	f3bf 8f5b 	dmb	ish
 800559c:	b2d3      	uxtb	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1ef      	bne.n	8005582 <__metal_mutex_acquire+0xa>
		;
	}
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f3bf 8f5b 	dmb	ish
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	f3bf 8f5b 	dmb	ish
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff ffcc 	bl	8005578 <__metal_mutex_acquire>
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ffdd 	bl	80055b0 <__metal_mutex_release>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <metal_list_add_before>:
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	601a      	str	r2, [r3, #0]
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <metal_list_add_tail>:
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ffdd 	bl	80055fe <metal_list_add_before>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6852      	ldr	r2, [r2, #4]
 800565c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	009a      	lsls	r2, r3, #2
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	440a      	add	r2, r1
 8005696:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	f002 021f 	and.w	r2, r2, #31
 800569e:	2001      	movs	r0, #1
 80056a0:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4403      	add	r3, r0
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80056dc:	4013      	ands	r3, r2
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	009a      	lsls	r2, r3, #2
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	440a      	add	r2, r1
 80056fe:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	f002 021f 	and.w	r2, r2, #31
 8005706:	2001      	movs	r0, #1
 8005708:	fa00 f202 	lsl.w	r2, r0, r2
 800570c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4403      	add	r3, r0
 8005714:	400a      	ands	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ffc2 	bl	80056ba <metal_bitmap_is_bit_set>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e002      	b.n	8005762 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3301      	adds	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d207      	bcs.n	800577a <metal_bitmap_next_clear_bit+0x30>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ffd8 	bl	8005724 <metal_bitmap_is_bit_clear>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <rpmsg_init_ept>:
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f001 fec8 	bl	800752e <strncpy>
	ept->addr = src;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295
 80057cc:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	2100      	movs	r1, #0
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ffb8 	bl	800574a <metal_bitmap_next_clear_bit>
 80057da:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d206      	bcs.n	80057f2 <rpmsg_get_address+0x34>
		addr = nextbit;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff48 	bl	8005682 <metal_bitmap_set_bit>
	}

	return addr;
 80057f2:	68fb      	ldr	r3, [r7, #12]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	da03      	bge.n	8005818 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff ff69 	bl	80056ea <metal_bitmap_clear_bit>
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	da05      	bge.n	8005840 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ff3f 	bl	80056ba <metal_bitmap_is_bit_set>
 800583c:	4603      	mov	r3, r0
 800583e:	e000      	b.n	8005842 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8005840:	4b02      	ldr	r3, [pc, #8]	@ (800584c <rpmsg_is_address_set+0x2c>)
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	fffff82d 	.word	0xfffff82d

08005850 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	da05      	bge.n	8005870 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff ff0b 	bl	8005682 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8005870:	4b02      	ldr	r3, [pc, #8]	@ (800587c <rpmsg_set_address+0x2c>)
	}
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	fffff82d 	.word	0xfffff82d

08005880 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b089      	sub	sp, #36	@ 0x24
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <rpmsg_send_offchannel_raw+0x2a>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d006      	beq.n	80058aa <rpmsg_send_offchannel_raw+0x2a>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <rpmsg_send_offchannel_raw+0x2a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d101      	bne.n	80058ae <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <rpmsg_send_offchannel_raw+0x60>)
 80058ac:	e014      	b.n	80058d8 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80058c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	47a0      	blx	r4
 80058d2:	4603      	mov	r3, r0
 80058d4:	e000      	b.n	80058d8 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 80058d6:	4b02      	ldr	r3, [pc, #8]	@ (80058e0 <rpmsg_send_offchannel_raw+0x60>)
}
 80058d8:	4618      	mov	r0, r3
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd90      	pop	{r4, r7, pc}
 80058e0:	fffff82d 	.word	0xfffff82d

080058e4 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b090      	sub	sp, #64	@ 0x40
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	f107 030c 	add.w	r3, r7, #12
 80058fe:	2220      	movs	r2, #32
 8005900:	4618      	mov	r0, r3
 8005902:	f001 fe14 	bl	800752e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800590a:	f107 030c 	add.w	r3, r7, #12
 800590e:	2201      	movs	r2, #1
 8005910:	9201      	str	r2, [sp, #4]
 8005912:	2228      	movs	r2, #40	@ 0x28
 8005914:	9200      	str	r2, [sp, #0]
 8005916:	2235      	movs	r2, #53	@ 0x35
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ffb1 	bl	8005880 <rpmsg_send_offchannel_raw>
 800591e:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8005920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005922:	2b00      	cmp	r3, #0
 8005924:	da01      	bge.n	800592a <rpmsg_send_ns_message+0x46>
		return ret;
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	e000      	b.n	800592c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3738      	adds	r7, #56	@ 0x38
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e04b      	b.n	80059e2 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3b34      	subs	r3, #52	@ 0x34
 8005952:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d006      	beq.n	800596a <rpmsg_get_endpoint+0x36>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d101      	bne.n	800596a <rpmsg_get_endpoint+0x36>
			return ept;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	e040      	b.n	80059ec <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d106      	bne.n	8005982 <rpmsg_get_endpoint+0x4e>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d101      	bne.n	8005982 <rpmsg_get_endpoint+0x4e>
			return ept;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	e034      	b.n	80059ec <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2220      	movs	r2, #32
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fdbb 	bl	800750a <strncmp>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d018      	beq.n	80059da <rpmsg_get_endpoint+0xa6>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d015      	beq.n	80059da <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d006      	beq.n	80059c4 <rpmsg_get_endpoint+0x90>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d101      	bne.n	80059c4 <rpmsg_get_endpoint+0x90>
			return ept;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	e013      	b.n	80059ec <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d107      	bne.n	80059dc <rpmsg_get_endpoint+0xa8>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d102      	bne.n	80059dc <rpmsg_get_endpoint+0xa8>
			return ept;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e008      	b.n	80059ec <rpmsg_get_endpoint+0xb8>
			continue;
 80059da:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d1af      	bne.n	800594a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d008      	beq.n	8005a24 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	f7ff feec 	bl	80057fc <rpmsg_release_address>
	metal_list_del(&ept->node);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3334      	adds	r3, #52	@ 0x34
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fe0f 	bl	800564c <metal_list_del>
 8005a2e:	e000      	b.n	8005a32 <rpmsg_unregister_endpoint+0x3e>
		return;
 8005a30:	bf00      	nop
}
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	3334      	adds	r3, #52	@ 0x34
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7ff fdee 	bl	8005632 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	613b      	str	r3, [r7, #16]

	if (!ept)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8005a78:	4b37      	ldr	r3, [pc, #220]	@ (8005b58 <rpmsg_create_ept+0xf8>)
 8005a7a:	e068      	b.n	8005b4e <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3358      	adds	r3, #88	@ 0x58
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fda6 	bl	80055d2 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d018      	beq.n	8005ac0 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3348      	adds	r3, #72	@ 0x48
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	2180      	movs	r1, #128	@ 0x80
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fec2 	bl	8005820 <rpmsg_is_address_set>
 8005a9c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3348      	adds	r3, #72	@ 0x48
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	2180      	movs	r1, #128	@ 0x80
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fecf 	bl	8005850 <rpmsg_set_address>
 8005ab2:	e00c      	b.n	8005ace <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dd40      	ble.n	8005b3c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8005abe:	e040      	b.n	8005b42 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3348      	adds	r3, #72	@ 0x48
 8005ac4:	2180      	movs	r1, #128	@ 0x80
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fe79 	bl	80057be <rpmsg_get_address>
 8005acc:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff fe51 	bl	8005784 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	68b8      	ldr	r0, [r7, #8]
 8005ae6:	f7ff ffa7 	bl	8005a38 <rpmsg_register_endpoint>
 8005aea:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da06      	bge.n	8005b00 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3348      	adds	r3, #72	@ 0x48
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	2180      	movs	r1, #128	@ 0x80
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fe7e 	bl	80057fc <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11c      	bne.n	8005b40 <rpmsg_create_ept+0xe0>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d117      	bne.n	8005b40 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	3358      	adds	r3, #88	@ 0x58
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fd67 	bl	80055e8 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff fee1 	bl	80058e4 <rpmsg_send_ns_message>
 8005b22:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3358      	adds	r3, #88	@ 0x58
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fd52 	bl	80055d2 <metal_mutex_acquire>
		if (status)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ff5d 	bl	80059f4 <rpmsg_unregister_endpoint>
 8005b3a:	e002      	b.n	8005b42 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8005b3c:	bf00      	nop
 8005b3e:	e000      	b.n	8005b42 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8005b40:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	3358      	adds	r3, #88	@ 0x58
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fd4e 	bl	80055e8 <metal_mutex_release>
	return status;
 8005b4c:	697b      	ldr	r3, [r7, #20]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	fffff82d 	.word	0xfffff82d

08005b5c <__metal_cache_invalidate>:
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fcc4 	bl	80064f6 <metal_machine_cache_invalidate>
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <metal_cache_invalidate>:
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff ffea 	bl	8005b5c <__metal_cache_invalidate>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ffee 	bl	8005b90 <__metal_sleep_usec>
 8005bb4:	4603      	mov	r3, r0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <metal_list_init>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	605a      	str	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <metal_io_virt_to_offset>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d201      	bcs.n	8005c02 <metal_io_virt_to_offset+0x22>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	e001      	b.n	8005c06 <metal_io_virt_to_offset+0x26>
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <__metal_mutex_init>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	461a      	mov	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f3bf 8f5b 	dmb	ish
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	f3bf 8f5b 	dmb	ish
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <__metal_mutex_acquire>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8005c46:	bf00      	nop
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	f3bf 8f5b 	dmb	ish
 8005c52:	e8d3 2f4f 	ldrexb	r2, [r3]
 8005c56:	e8c3 1f40 	strexb	r0, r1, [r3]
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d1f9      	bne.n	8005c52 <__metal_mutex_acquire+0x14>
 8005c5e:	f3bf 8f5b 	dmb	ish
 8005c62:	b2d3      	uxtb	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1ef      	bne.n	8005c48 <__metal_mutex_acquire+0xa>
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <__metal_mutex_release>:
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f3bf 8f5b 	dmb	ish
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	f3bf 8f5b 	dmb	ish
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <metal_mutex_init>:
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ffb6 	bl	8005c12 <__metal_mutex_init>
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <metal_mutex_acquire>:
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff ffc1 	bl	8005c3e <__metal_mutex_acquire>
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <metal_mutex_release>:
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ffd2 	bl	8005c76 <__metal_mutex_release>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <rpmsg_init_ept>:
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fc1d 	bl	800752e <strncpy>
	ept->addr = src;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d20:	699b      	ldr	r3, [r3, #24]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005d46:	78f9      	ldrb	r1, [r7, #3]
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4798      	blx	r3
 8005d8e:	4603      	mov	r3, r0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	f000 fbf4 	bl	80065a0 <virtio_create_virtqueues>
 8005db8:	4603      	mov	r3, r0
					callbacks);
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8005dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fdad 	bl	8005934 <rpmsg_get_endpoint>
 8005dda:	4603      	mov	r3, r0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d901      	bls.n	8005dfc <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e00f      	b.n	8005e1c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6899      	ldr	r1, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	1acb      	subs	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	1ad2      	subs	r2, r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	return buffer;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01d      	beq.n	8005e76 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <rpmsg_virtio_init_shm_pool+0x2c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	3304      	adds	r3, #4
 8005e52:	e000      	b.n	8005e56 <rpmsg_virtio_init_shm_pool+0x2e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <rpmsg_virtio_init_shm_pool+0x46>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	e000      	b.n	8005e70 <rpmsg_virtio_init_shm_pool+0x48>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6053      	str	r3, [r2, #4]
 8005e74:	e000      	b.n	8005e78 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8005e76:	bf00      	nop
}
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08a      	sub	sp, #40	@ 0x28
 8005e86:	af02      	add	r7, sp, #8
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff ff3f 	bl	8005d14 <rpmsg_virtio_get_role>
 8005e96:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8005eaa:	f107 0114 	add.w	r1, r7, #20
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f000 fcc2 	bl	800683e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8005eba:	bf00      	nop
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b08a      	sub	sp, #40	@ 0x28
 8005ec6:	af02      	add	r7, sp, #8
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff1f 	bl	8005d14 <rpmsg_virtio_get_role>
 8005ed6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005eea:	f107 0114 	add.w	r1, r7, #20
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f000 fca2 	bl	800683e <virtqueue_add_buffer>
 8005efa:	4603      	mov	r3, r0
 8005efc:	e000      	b.n	8005f00 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fefd 	bl	8005d14 <rpmsg_virtio_get_role>
 8005f1a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d116      	bne.n	8005f54 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fcc9 	bl	80068c6 <virtqueue_get_buffer>
 8005f34:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ff4d 	bl	8005de4 <rpmsg_virtio_shm_pool_get_buffer>
 8005f4a:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f52:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8005f54:	697b      	ldr	r3, [r7, #20]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff fed2 	bl	8005d14 <rpmsg_virtio_get_role>
 8005f70:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fc9e 	bl	80068c6 <virtqueue_get_buffer>
 8005f8a:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f7ff fdec 	bl	8005b76 <metal_cache_invalidate>
	}

	return data;
 8005f9e:	697b      	ldr	r3, [r7, #20]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff feaf 	bl	8005d14 <rpmsg_virtio_get_role>
 8005fb6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8005fc2:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8005fc6:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b090      	sub	sp, #64	@ 0x40
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8005fee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ff0:	f7ff feb0 	bl	8005d54 <rpmsg_virtio_get_status>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8006002:	4b46      	ldr	r3, [pc, #280]	@ (800611c <rpmsg_virtio_send_offchannel_raw+0x148>)
 8006004:	e086      	b.n	8006114 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8006006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800600c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8006010:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006012:	e001      	b.n	8006018 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3358      	adds	r3, #88	@ 0x58
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fe46 	bl	8005cae <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8006022:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006024:	f7ff ffc0 	bl	8005fa8 <_rpmsg_virtio_get_buffer_size>
 8006028:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 800602a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	dc08      	bgt.n	8006044 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8006032:	f107 0216 	add.w	r2, r7, #22
 8006036:	f107 0310 	add.w	r3, r7, #16
 800603a:	4619      	mov	r1, r3
 800603c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800603e:	f7ff ff63 	bl	8005f08 <rpmsg_virtio_get_tx_buffer>
 8006042:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3358      	adds	r3, #88	@ 0x58
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fe3b 	bl	8005cc4 <metal_mutex_release>
		if (buffer || !tick_count)
 800604e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10e      	bne.n	8006072 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8006060:	4b2f      	ldr	r3, [pc, #188]	@ (8006120 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8006062:	e057      	b.n	8006114 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8006064:	200a      	movs	r0, #10
 8006066:	f7ff fd9e 	bl	8005ba6 <metal_sleep_usec>
		tick_count--;
 800606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606c:	3b01      	subs	r3, #1
 800606e:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 8006070:	e7d2      	b.n	8006018 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8006078:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <rpmsg_virtio_send_offchannel_raw+0x150>)
 800607a:	e04b      	b.n	8006114 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8006084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006086:	b29b      	uxth	r3, r3
 8006088:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800608e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8006094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006098:	f7ff fda2 	bl	8005be0 <metal_io_virt_to_offset>
 800609c:	4601      	mov	r1, r0
 800609e:	f107 0218 	add.w	r2, r7, #24
 80060a2:	2310      	movs	r3, #16
 80060a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a6:	f7fe fdce 	bl	8004c46 <metal_io_block_write>
 80060aa:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d001      	beq.n	80060b6 <rpmsg_virtio_send_offchannel_raw+0xe2>
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 80060b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b8:	3310      	adds	r3, #16
 80060ba:	4619      	mov	r1, r3
 80060bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060be:	f7ff fd8f 	bl	8005be0 <metal_io_virt_to_offset>
 80060c2:	4601      	mov	r1, r0
 80060c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ca:	f7fe fdbc 	bl	8004c46 <metal_io_block_write>
 80060ce:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 80060d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d001      	beq.n	80060dc <rpmsg_virtio_send_offchannel_raw+0x108>
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3358      	adds	r3, #88	@ 0x58
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fde4 	bl	8005cae <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	8afb      	ldrh	r3, [r7, #22]
 80060ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80060ee:	f7ff fee8 	bl	8005ec2 <rpmsg_virtio_enqueue_buffer>
 80060f2:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <rpmsg_virtio_send_offchannel_raw+0x12a>
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 80060fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc59 	bl	80069ba <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3358      	adds	r3, #88	@ 0x58
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fdd9 	bl	8005cc4 <metal_mutex_release>

	return size;
 8006112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006114:	4618      	mov	r0, r3
 8006116:	3740      	adds	r7, #64	@ 0x40
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	fffff82c 	.word	0xfffff82c
 8006120:	fffff82b 	.word	0xfffff82b
 8006124:	fffff82e 	.word	0xfffff82e

08006128 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b08d      	sub	sp, #52	@ 0x34
 8006140:	af02      	add	r7, sp, #8
 8006142:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	3358      	adds	r3, #88	@ 0x58
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fda8 	bl	8005cae <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800615e:	f107 020a 	add.w	r2, r7, #10
 8006162:	f107 030c 	add.w	r3, r7, #12
 8006166:	4619      	mov	r1, r3
 8006168:	69f8      	ldr	r0, [r7, #28]
 800616a:	f7ff fef8 	bl	8005f5e <rpmsg_virtio_get_rx_buffer>
 800616e:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	3358      	adds	r3, #88	@ 0x58
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fda5 	bl	8005cc4 <metal_mutex_release>

	while (rp_hdr) {
 800617a:	e04d      	b.n	8006218 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	3358      	adds	r3, #88	@ 0x58
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fd94 	bl	8005cae <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4619      	mov	r1, r3
 800618c:	69b8      	ldr	r0, [r7, #24]
 800618e:	f7ff fe18 	bl	8005dc2 <rpmsg_get_ept_from_addr>
 8006192:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	3358      	adds	r3, #88	@ 0x58
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fd93 	bl	8005cc4 <metal_mutex_release>

		if (!ept)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d03d      	beq.n	8006220 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d103      	bne.n	80061b6 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	899b      	ldrh	r3, [r3, #12]
 80061c4:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80061c6:	4618      	mov	r0, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	4613      	mov	r3, r2
 80061d4:	4602      	mov	r2, r0
 80061d6:	6978      	ldr	r0, [r7, #20]
 80061d8:	47a0      	blx	r4
 80061da:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <rpmsg_virtio_rx_callback+0xaa>
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3358      	adds	r3, #88	@ 0x58
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fd5f 	bl	8005cae <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	897b      	ldrh	r3, [r7, #10]
 80061f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061f6:	69f8      	ldr	r0, [r7, #28]
 80061f8:	f7ff fe43 	bl	8005e82 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 80061fc:	f107 020a 	add.w	r2, r7, #10
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4619      	mov	r1, r3
 8006206:	69f8      	ldr	r0, [r7, #28]
 8006208:	f7ff fea9 	bl	8005f5e <rpmsg_virtio_get_rx_buffer>
 800620c:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3358      	adds	r3, #88	@ 0x58
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fd56 	bl	8005cc4 <metal_mutex_release>
	while (rp_hdr) {
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ae      	bne.n	800617c <rpmsg_virtio_rx_callback+0x40>
 800621e:	e000      	b.n	8006222 <rpmsg_virtio_rx_callback+0xe6>
			return;
 8006220:	bf00      	nop
	}
}
 8006222:	372c      	adds	r7, #44	@ 0x2c
 8006224:	46bd      	mov	sp, r7
 8006226:	bd90      	pop	{r4, r7, pc}

08006228 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b092      	sub	sp, #72	@ 0x48
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800623c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623e:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8006240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b28      	cmp	r3, #40	@ 0x28
 800624e:	d001      	beq.n	8006254 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8006250:	2300      	movs	r3, #0
 8006252:	e057      	b.n	8006304 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 8006256:	4619      	mov	r1, r3
 8006258:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800625a:	f7ff fcc1 	bl	8005be0 <metal_io_virt_to_offset>
 800625e:	4601      	mov	r1, r0
 8006260:	f107 0210 	add.w	r2, r7, #16
 8006264:	2320      	movs	r3, #32
 8006266:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006268:	f7fe fc76 	bl	8004b58 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8006272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006274:	3358      	adds	r3, #88	@ 0x58
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fd19 	bl	8005cae <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800627c:	f107 0110 	add.w	r1, r7, #16
 8006280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006288:	f7ff fb54 	bl	8005934 <rpmsg_get_endpoint>
 800628c:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800628e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d017      	beq.n	80062ca <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 80062a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062aa:	3358      	adds	r3, #88	@ 0x58
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fd09 	bl	8005cc4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d024      	beq.n	8006302 <rpmsg_virtio_ns_callback+0xda>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d020      	beq.n	8006302 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	4798      	blx	r3
 80062c8:	e01b      	b.n	8006302 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d110      	bne.n	80062f2 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 80062d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d2:	3358      	adds	r3, #88	@ 0x58
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fcf5 	bl	8005cc4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 80062da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00f      	beq.n	8006302 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 80062e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e6:	f107 0110 	add.w	r1, r7, #16
 80062ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80062ee:	4798      	blx	r3
 80062f0:	e007      	b.n	8006302 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062f6:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 80062f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062fa:	3358      	adds	r3, #88	@ 0x58
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fce1 	bl	8005cc4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3748      	adds	r7, #72	@ 0x48
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b094      	sub	sp, #80	@ 0x50
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 800631e:	2264      	movs	r2, #100	@ 0x64
 8006320:	2100      	movs	r1, #0
 8006322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006324:	f001 f8e9 	bl	80074fa <memset>
	metal_mutex_init(&rdev->lock);
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	3358      	adds	r3, #88	@ 0x58
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff fcb3 	bl	8005c98 <metal_mutex_init>
	rvdev->vdev = vdev;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	4a5d      	ldr	r2, [pc, #372]	@ (80064bc <rpmsg_init_vdev+0x1b0>)
 8006348:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fce2 	bl	8005d14 <rpmsg_virtio_get_role>
 8006350:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8006352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006354:	2b00      	cmp	r3, #0
 8006356:	d120      	bne.n	800639a <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8006358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800635e:	4b58      	ldr	r3, [pc, #352]	@ (80064c0 <rpmsg_init_vdev+0x1b4>)
 8006360:	e0a7      	b.n	80064b2 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 8006362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800636a:	4b56      	ldr	r3, [pc, #344]	@ (80064c4 <rpmsg_init_vdev+0x1b8>)
 800636c:	e0a1      	b.n	80064b2 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006372:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 8006374:	4b54      	ldr	r3, [pc, #336]	@ (80064c8 <rpmsg_init_vdev+0x1bc>)
 8006376:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8006378:	4b54      	ldr	r3, [pc, #336]	@ (80064cc <rpmsg_init_vdev+0x1c0>)
 800637a:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800637c:	4b54      	ldr	r3, [pc, #336]	@ (80064d0 <rpmsg_init_vdev+0x1c4>)
 800637e:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8006380:	4b54      	ldr	r3, [pc, #336]	@ (80064d4 <rpmsg_init_vdev+0x1c8>)
 8006382:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	3318      	adds	r3, #24
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 80063a0:	f107 0220 	add.w	r2, r7, #32
 80063a4:	f107 0318 	add.w	r3, r7, #24
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	2202      	movs	r2, #2
 80063ae:	2100      	movs	r1, #0
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff fcf1 	bl	8005d98 <rpmsg_virtio_create_virtqueues>
 80063b6:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 80063b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <rpmsg_init_vdev+0xb6>
		return status;
 80063be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c0:	e077      	b.n	80064b2 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80063c2:	2300      	movs	r3, #0
 80063c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063c6:	e00f      	b.n	80063e8 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063ce:	4613      	mov	r3, r2
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	4413      	add	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	440b      	add	r3, r1
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80063e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e4:	3301      	adds	r3, #1
 80063e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d9ec      	bls.n	80063c8 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d137      	bne.n	8006464 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 80063f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063f8:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80063fa:	2300      	movs	r3, #0
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063fe:	e02a      	b.n	8006456 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8006400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006404:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006406:	f7ff fced 	bl	8005de4 <rpmsg_virtio_shm_pool_get_buffer>
 800640a:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8006412:	4b2c      	ldr	r3, [pc, #176]	@ (80064c4 <rpmsg_init_vdev+0x1b8>)
 8006414:	e04d      	b.n	80064b2 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800641a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800641c:	6838      	ldr	r0, [r7, #0]
 800641e:	f7ff fbdf 	bl	8005be0 <metal_io_virt_to_offset>
 8006422:	4601      	mov	r1, r0
 8006424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006428:	2200      	movs	r2, #0
 800642a:	6838      	ldr	r0, [r7, #0]
 800642c:	f7fe fc81 	bl	8004d32 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8006434:	f107 0110 	add.w	r1, r7, #16
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2301      	movs	r3, #1
 800643e:	2200      	movs	r2, #0
 8006440:	f000 f9fd 	bl	800683e <virtqueue_add_buffer>
 8006444:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8006446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <rpmsg_init_vdev+0x144>
				return status;
 800644c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800644e:	e030      	b.n	80064b2 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8006450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006452:	3301      	adds	r3, #1
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800645a:	895b      	ldrh	r3, [r3, #10]
 800645c:	461a      	mov	r2, r3
 800645e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006460:	4293      	cmp	r3, r2
 8006462:	d3cd      	bcc.n	8006400 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fba9 	bl	8005bbe <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff fc82 	bl	8005d76 <rpmsg_virtio_get_features>
 8006472:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d011      	beq.n	80064a2 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	f103 0008 	add.w	r0, r3, #8
 8006484:	2300      	movs	r3, #0
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <rpmsg_init_vdev+0x1cc>)
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2335      	movs	r3, #53	@ 0x35
 800648e:	2235      	movs	r2, #53	@ 0x35
 8006490:	4912      	ldr	r1, [pc, #72]	@ (80064dc <rpmsg_init_vdev+0x1d0>)
 8006492:	f7ff fc22 	bl	8005cda <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	3308      	adds	r3, #8
 800649a:	4619      	mov	r1, r3
 800649c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800649e:	f7ff facb 	bl	8005a38 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d103      	bne.n	80064b0 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 80064a8:	2104      	movs	r1, #4
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fc3f 	bl	8005d2e <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 80064b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3748      	adds	r7, #72	@ 0x48
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	08005fd5 	.word	0x08005fd5
 80064c0:	fffff82d 	.word	0xfffff82d
 80064c4:	fffff82e 	.word	0xfffff82e
 80064c8:	080082c8 	.word	0x080082c8
 80064cc:	080082d0 	.word	0x080082d0
 80064d0:	0800613d 	.word	0x0800613d
 80064d4:	08006129 	.word	0x08006129
 80064d8:	08006229 	.word	0x08006229
 80064dc:	080082d8 	.word	0x080082d8

080064e0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800651a:	68fb      	ldr	r3, [r7, #12]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3303      	adds	r3, #3
 800653c:	005a      	lsls	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	4413      	add	r3, r2
 800654a:	1e5a      	subs	r2, r3, #1
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	425b      	negs	r3, r3
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	3306      	adds	r3, #6
 800655e:	60fb      	str	r3, [r7, #12]

	return size;
 8006560:	68fb      	ldr	r3, [r7, #12]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <metal_io_virt_to_offset>:
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	429a      	cmp	r2, r3
 800658a:	d201      	bcs.n	8006590 <metal_io_virt_to_offset+0x22>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	e001      	b.n	8006594 <metal_io_virt_to_offset+0x26>
 8006590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b091      	sub	sp, #68	@ 0x44
 80065a4:	af04      	add	r7, sp, #16
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d902      	bls.n	80065c2 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 80065bc:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 80065c0:	e053      	b.n	800666a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 80065c2:	2300      	movs	r3, #0
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065c6:	e04b      	b.n	8006660 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ce:	4613      	mov	r3, r2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	440b      	add	r3, r1
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	3304      	adds	r3, #4
 80065de:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d118      	bne.n	800661a <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	69f8      	ldr	r0, [r7, #28]
 80065f6:	f7ff ffba 	bl	800656e <metal_io_virt_to_offset>
 80065fa:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8006600:	461a      	mov	r2, r3
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7ff ff8d 	bl	8006528 <vring_size>
 800660e:	4603      	mov	r3, r0
 8006610:	2200      	movs	r2, #0
 8006612:	69b9      	ldr	r1, [r7, #24]
 8006614:	69f8      	ldr	r0, [r7, #28]
 8006616:	f7fe fb8c 	bl	8004d32 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	b298      	uxth	r0, r3
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4413      	add	r3, r2
 8006626:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800662e:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8006630:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	6a12      	ldr	r2, [r2, #32]
 8006636:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8006638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800663a:	6809      	ldr	r1, [r1, #0]
 800663c:	9102      	str	r1, [sp, #8]
 800663e:	9201      	str	r2, [sp, #4]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	4622      	mov	r2, r4
 8006646:	4601      	mov	r1, r0
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8c4 	bl	80067d6 <virtqueue_create>
 800664e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <virtio_create_virtqueues+0xba>
			return ret;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	e007      	b.n	800666a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	3301      	adds	r3, #1
 800665e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	d3af      	bcc.n	80065c8 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3734      	adds	r7, #52	@ 0x34
 800666e:	46bd      	mov	sp, r7
 8006670:	bd90      	pop	{r4, r7, pc}

08006672 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	441a      	add	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	3304      	adds	r3, #4
 80066a4:	461a      	mov	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	425b      	negs	r3, r3
 80066b0:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 80066b2:	461a      	mov	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	60da      	str	r2, [r3, #12]
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	80fb      	strh	r3, [r7, #6]
 80066ce:	460b      	mov	r3, r1
 80066d0:	80bb      	strh	r3, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 80066d6:	88ba      	ldrh	r2, [r7, #4]
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 80066e2:	88b9      	ldrh	r1, [r7, #4]
 80066e4:	887b      	ldrh	r3, [r7, #2]
 80066e6:	1acb      	subs	r3, r1, r3
 80066e8:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 80066ea:	429a      	cmp	r2, r3
 80066ec:	bf34      	ite	cc
 80066ee:	2301      	movcc	r3, #1
 80066f0:	2300      	movcs	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <metal_io_virt_to_offset>:
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	429a      	cmp	r2, r3
 800671c:	d201      	bcs.n	8006722 <metal_io_virt_to_offset+0x22>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	e001      	b.n	8006726 <metal_io_virt_to_offset+0x26>
 8006722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <metal_io_phys>:
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8006740:	2b1f      	cmp	r3, #31
 8006742:	d805      	bhi.n	8006750 <metal_io_phys+0x1e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	e000      	b.n	8006752 <metal_io_phys+0x20>
 8006750:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8006752:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8006758:	2b00      	cmp	r3, #0
 800675a:	d010      	beq.n	800677e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d80b      	bhi.n	800677e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6919      	ldr	r1, [r3, #16]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800677a:	4413      	add	r3, r2
 800677c:	e001      	b.n	8006782 <metal_io_phys+0x50>
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <metal_io_virt_to_phys>:
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ffb0 	bl	8006700 <metal_io_virt_to_offset>
 80067a0:	4603      	mov	r3, r0
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ffc4 	bl	8006732 <metal_io_phys>
 80067aa:	4603      	mov	r3, r0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c2:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff ffe1 	bl	800678e <metal_io_virt_to_phys>
 80067cc:	4603      	mov	r3, r0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	460b      	mov	r3, r1
 80067e4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d121      	bne.n	8006834 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	897a      	ldrh	r2, [r7, #10]
 8006800:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	891a      	ldrh	r2, [r3, #8]
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	895a      	ldrh	r2, [r3, #10]
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681c:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	461a      	mov	r2, r3
 8006828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800682a:	f000 f97a 	bl	8006b22 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800682e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006830:	f000 f899 	bl	8006966 <virtqueue_disable_cb>
	}

	return (status);
 8006834:	697b      	ldr	r3, [r7, #20]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b08a      	sub	sp, #40	@ 0x28
 8006842:	af02      	add	r7, sp, #8
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
 800684a:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8006850:	2300      	movs	r3, #0
 8006852:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d12c      	bne.n	80068bc <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006866:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8006868:	8a7b      	ldrh	r3, [r7, #18]
 800686a:	3307      	adds	r3, #7
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006878:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	b29a      	uxth	r2, r3
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	69d9      	ldr	r1, [r3, #28]
 8006886:	8a7a      	ldrh	r2, [r7, #18]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f8a7 	bl	80069e6 <vq_ring_add_buffer>
 8006898:	4603      	mov	r3, r0
 800689a:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8a3a      	ldrh	r2, [r7, #16]
 80068a0:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 80068b2:	8a7b      	ldrh	r3, [r7, #18]
 80068b4:	4619      	mov	r1, r3
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f966 	bl	8006b88 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 80068bc:	69bb      	ldr	r3, [r7, #24]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <virtqueue_get_buffer+0x20>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	885b      	ldrh	r3, [r3, #2]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d101      	bne.n	80068ea <virtqueue_get_buffer+0x24>
		return (NULL);
 80068e6:	2300      	movs	r3, #0
 80068e8:	e039      	b.n	800695e <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	b291      	uxth	r1, r2
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	8651      	strh	r1, [r2, #50]	@ 0x32
 80068f6:	b21a      	sxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	895b      	ldrh	r3, [r3, #10]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29b      	uxth	r3, r3
 8006900:	b21b      	sxth	r3, r3
 8006902:	4013      	ands	r3, r2
 8006904:	b21b      	sxth	r3, r3
 8006906:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800690c:	8bfb      	ldrh	r3, [r7, #30]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	3304      	adds	r3, #4
 8006914:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8006916:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	82fb      	strh	r3, [r7, #22]
	if (len)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800692e:	8afb      	ldrh	r3, [r7, #22]
 8006930:	4619      	mov	r1, r3
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f8ae 	bl	8006a94 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8006938:	8afa      	ldrh	r2, [r7, #22]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3207      	adds	r2, #7
 800693e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8006942:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8006944:	8afa      	ldrh	r2, [r7, #22]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3207      	adds	r2, #7
 800694a:	2100      	movs	r1, #0
 800694c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8bfa      	ldrh	r2, [r7, #30]
 800695a:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800695c:	693b      	ldr	r3, [r7, #16]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d010      	beq.n	800699c <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	895b      	ldrh	r3, [r3, #10]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1a      	ldr	r2, [r3, #32]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800698e:	3901      	subs	r1, #1
 8006990:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4413      	add	r3, r2
 8006996:	460a      	mov	r2, r1
 8006998:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800699a:	e008      	b.n	80069ae <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	881a      	ldrh	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	b292      	uxth	r2, r2
 80069ac:	801a      	strh	r2, [r3, #0]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 80069c2:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f91d 	bl	8006c06 <vq_ring_must_notify_host>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f94d 	bl	8006c72 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 80069e6:	b5b0      	push	{r4, r5, r7, lr}
 80069e8:	b088      	sub	sp, #32
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 80069f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	4413      	add	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	837b      	strh	r3, [r7, #26]
 8006a06:	e03c      	b.n	8006a82 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8006a08:	8b7b      	ldrh	r3, [r7, #26]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4413      	add	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	4413      	add	r3, r2
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff fec8 	bl	80067b4 <virtqueue_virt_to_phys>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2200      	movs	r2, #0
 8006a28:	461c      	mov	r4, r3
 8006a2a:	4615      	mov	r5, r2
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	4413      	add	r3, r2
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2200      	movs	r2, #0
 8006a46:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	da06      	bge.n	8006a60 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	899b      	ldrh	r3, [r3, #12]
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	429a      	cmp	r2, r3
 8006a66:	db06      	blt.n	8006a76 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	899b      	ldrh	r3, [r3, #12]
 8006a6c:	f043 0302 	orr.w	r3, r3, #2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	89db      	ldrh	r3, [r3, #14]
 8006a80:	837b      	strh	r3, [r7, #26]
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	dbbe      	blt.n	8006a08 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8006a8a:	8b7b      	ldrh	r3, [r7, #26]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bdb0      	pop	{r4, r5, r7, pc}

08006a94 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	887b      	ldrh	r3, [r7, #2]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8006aac:	887b      	ldrh	r3, [r7, #2]
 8006aae:	3307      	adds	r3, #7
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	889b      	ldrh	r3, [r3, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	889b      	ldrh	r3, [r3, #4]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	899b      	ldrh	r3, [r3, #12]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d113      	bne.n	8006b08 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8006ae0:	e00c      	b.n	8006afc <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69da      	ldr	r2, [r3, #28]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	89db      	ldrh	r3, [r3, #14]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	4413      	add	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	889b      	ldrh	r3, [r3, #4]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	899b      	ldrh	r3, [r3, #12]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1ec      	bne.n	8006ae2 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	887a      	ldrh	r2, [r7, #2]
 8006b14:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b088      	sub	sp, #32
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	895b      	ldrh	r3, [r3, #10]
 8006b32:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3318      	adds	r3, #24
 8006b38:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	6978      	ldr	r0, [r7, #20]
 8006b42:	f7ff fd96 	bl	8006672 <vring_init>

	for (i = 0; i < size - 1; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e00c      	b.n	8006b66 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	6859      	ldr	r1, [r3, #4]
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	440b      	add	r3, r1
 8006b5a:	3201      	adds	r2, #1
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3301      	adds	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	dbed      	blt.n	8006b4c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	4413      	add	r3, r2
 8006b7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006b7e:	81da      	strh	r2, [r3, #14]
}
 8006b80:	bf00      	nop
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	885b      	ldrh	r3, [r3, #2]
 8006b9a:	b21a      	sxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	895b      	ldrh	r3, [r3, #10]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	b21b      	sxth	r3, r3
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	b21b      	sxth	r3, r3
 8006baa:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	89fb      	ldrh	r3, [r7, #14]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8006bba:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	885a      	ldrh	r2, [r3, #2]
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8006bea:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <virtqueue_notification+0x1c>
		vq->callback(vq);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d01d      	beq.n	8006c56 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	885b      	ldrh	r3, [r3, #2]
 8006c20:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c26:	89fa      	ldrh	r2, [r7, #14]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4413      	add	r3, r2
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8006c3c:	89ba      	ldrh	r2, [r7, #12]
 8006c3e:	89f9      	ldrh	r1, [r7, #14]
 8006c40:	897b      	ldrh	r3, [r7, #10]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff fd3e 	bl	80066c4 <vring_need_event>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e009      	b.n	8006c6a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8006c9c:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <HAL_HSEM_FreeCallback+0x1c>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8006ca2:	2002      	movs	r0, #2
 8006ca4:	f7fa fe80 	bl	80019a8 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	2400420c 	.word	0x2400420c

08006cb4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <MAILBOX_Init+0x34>)
 8006cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cc0:	4a09      	ldr	r2, [pc, #36]	@ (8006ce8 <MAILBOX_Init+0x34>)
 8006cc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006cca:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <MAILBOX_Init+0x34>)
 8006ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8006cd8:	2002      	movs	r0, #2
 8006cda:	f7fa fe65 	bl	80019a8 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	58024400 	.word	0x58024400

08006cec <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8006cf4:	4b09      	ldr	r3, [pc, #36]	@ (8006d1c <MAILBOX_Poll+0x30>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d108      	bne.n	8006d0e <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fe fbe5 	bl	80054ce <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <MAILBOX_Poll+0x30>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
    return 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e001      	b.n	8006d12 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8006d0e:	f06f 030a 	mvn.w	r3, #10
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2400420c 	.word	0x2400420c

08006d20 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	f7fa fe0e 	bl	800194c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8006d30:	2100      	movs	r1, #0
 8006d32:	2000      	movs	r0, #0
 8006d34:	f7fa fe24 	bl	8001980 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d006      	beq.n	8006d62 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d001      	beq.n	8006d62 <is_rpmsg_ept_ready+0x20>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <is_rpmsg_ept_ready+0x22>
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d209      	bcs.n	8006d98 <metal_device_io_region+0x28>
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	4613      	mov	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3308      	adds	r3, #8
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	3304      	adds	r3, #4
 8006d96:	e000      	b.n	8006d9a <metal_device_io_region+0x2a>
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b08d      	sub	sp, #52	@ 0x34
 8006dac:	af04      	add	r7, sp, #16
 8006dae:	6078      	str	r0, [r7, #4]
  int status = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8006db8:	4a41      	ldr	r2, [pc, #260]	@ (8006ec0 <OPENAMP_shmem_init+0x118>)
 8006dba:	f107 0310 	add.w	r3, r7, #16
 8006dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dc2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8006dce:	f107 0310 	add.w	r3, r7, #16
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fd fe24 	bl	8004a20 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8006dd8:	483a      	ldr	r0, [pc, #232]	@ (8006ec4 <OPENAMP_shmem_init+0x11c>)
 8006dda:	f7fd fcc9 	bl	8004770 <metal_register_generic_device>
 8006dde:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <OPENAMP_shmem_init+0x42>
    return status;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	e066      	b.n	8006eb8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	461a      	mov	r2, r3
 8006df0:	4935      	ldr	r1, [pc, #212]	@ (8006ec8 <OPENAMP_shmem_init+0x120>)
 8006df2:	4836      	ldr	r0, [pc, #216]	@ (8006ecc <OPENAMP_shmem_init+0x124>)
 8006df4:	f7fd fc7e 	bl	80046f4 <metal_device_open>
 8006df8:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <OPENAMP_shmem_init+0x5c>
    return status;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	e059      	b.n	8006eb8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8006e04:	4a32      	ldr	r2, [pc, #200]	@ (8006ed0 <OPENAMP_shmem_init+0x128>)
 8006e06:	4b33      	ldr	r3, [pc, #204]	@ (8006ed4 <OPENAMP_shmem_init+0x12c>)
 8006e08:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8006e10:	4a31      	ldr	r2, [pc, #196]	@ (8006ed8 <OPENAMP_shmem_init+0x130>)
 8006e12:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed0 <OPENAMP_shmem_init+0x128>)
 8006e14:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8006e16:	461a      	mov	r2, r3
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4613      	mov	r3, r2
 8006e28:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed4 <OPENAMP_shmem_init+0x12c>)
 8006e2a:	4929      	ldr	r1, [pc, #164]	@ (8006ed0 <OPENAMP_shmem_init+0x128>)
 8006e2c:	f7fd fe45 	bl	8004aba <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2100      	movs	r1, #0
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ff9b 	bl	8006d70 <metal_device_io_region>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4a27      	ldr	r2, [pc, #156]	@ (8006edc <OPENAMP_shmem_init+0x134>)
 8006e3e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8006e40:	4b26      	ldr	r3, [pc, #152]	@ (8006edc <OPENAMP_shmem_init+0x134>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <OPENAMP_shmem_init+0xa6>
    return -1;
 8006e48:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4c:	e034      	b.n	8006eb8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8006e4e:	f107 0208 	add.w	r2, r7, #8
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f911 	bl	8007080 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee0 <OPENAMP_shmem_init+0x138>)
 8006e62:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8006e64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee0 <OPENAMP_shmem_init+0x138>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e70:	e022      	b.n	8006eb8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8006e78:	4b19      	ldr	r3, [pc, #100]	@ (8006ee0 <OPENAMP_shmem_init+0x138>)
 8006e7a:	6819      	ldr	r1, [r3, #0]
 8006e7c:	4b18      	ldr	r3, [pc, #96]	@ (8006ee0 <OPENAMP_shmem_init+0x138>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	461c      	mov	r4, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4623      	mov	r3, r4
 8006e94:	f7fd fe11 	bl	8004aba <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff ff67 	bl	8006d70 <metal_device_io_region>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8006ee4 <OPENAMP_shmem_init+0x13c>)
 8006ea6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8006ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <OPENAMP_shmem_init+0x13c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <OPENAMP_shmem_init+0x10e>
    return -1;
 8006eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb4:	e000      	b.n	8006eb8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3724      	adds	r7, #36	@ 0x24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd90      	pop	{r4, r7, pc}
 8006ec0:	080082f0 	.word	0x080082f0
 8006ec4:	24000040 	.word	0x24000040
 8006ec8:	080082dc 	.word	0x080082dc
 8006ecc:	080082e8 	.word	0x080082e8
 8006ed0:	38000400 	.word	0x38000400
 8006ed4:	240042a0 	.word	0x240042a0
 8006ed8:	38010000 	.word	0x38010000
 8006edc:	24004210 	.word	0x24004210
 8006ee0:	24004218 	.word	0x24004218
 8006ee4:	24004214 	.word	0x24004214

08006ee8 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b08b      	sub	sp, #44	@ 0x2c
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
  int status = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8006efe:	f7ff fed9 	bl	8006cb4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff ff50 	bl	8006da8 <OPENAMP_shmem_init>
 8006f08:	60f8      	str	r0, [r7, #12]
  if(status)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	e06a      	b.n	8006fea <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4b37      	ldr	r3, [pc, #220]	@ (8006ff4 <MX_OPENAMP_Init+0x10c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f103 0218 	add.w	r2, r3, #24
 8006f1e:	4b36      	ldr	r3, [pc, #216]	@ (8006ff8 <MX_OPENAMP_Init+0x110>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2100      	movs	r1, #0
 8006f24:	9102      	str	r1, [sp, #8]
 8006f26:	4935      	ldr	r1, [pc, #212]	@ (8006ffc <MX_OPENAMP_Init+0x114>)
 8006f28:	9101      	str	r1, [sp, #4]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	9100      	str	r1, [sp, #0]
 8006f2e:	21ff      	movs	r1, #255	@ 0xff
 8006f30:	f7fe f9ee 	bl	8005310 <rproc_virtio_create_vdev>
 8006f34:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8006f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f40:	e053      	b.n	8006fea <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8006f42:	6938      	ldr	r0, [r7, #16]
 8006f44:	f7fe faff 	bl	8005546 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8006f48:	4b2a      	ldr	r3, [pc, #168]	@ (8006ff4 <MX_OPENAMP_Init+0x10c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3334      	adds	r3, #52	@ 0x34
 8006f4e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8006f58:	461c      	mov	r4, r3
 8006f5a:	4b29      	ldr	r3, [pc, #164]	@ (8007000 <MX_OPENAMP_Init+0x118>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	6892      	ldr	r2, [r2, #8]
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8006f66:	9102      	str	r1, [sp, #8]
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	4602      	mov	r2, r0
 8006f70:	2100      	movs	r1, #0
 8006f72:	6938      	ldr	r0, [r7, #16]
 8006f74:	f7fe fa7a 	bl	800546c <rproc_virtio_init_vring>
 8006f78:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	e032      	b.n	8006fea <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8006f84:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff4 <MX_OPENAMP_Init+0x10c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3348      	adds	r3, #72	@ 0x48
 8006f8a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8006f94:	461c      	mov	r4, r3
 8006f96:	4b1a      	ldr	r3, [pc, #104]	@ (8007000 <MX_OPENAMP_Init+0x118>)
 8006f98:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	6892      	ldr	r2, [r2, #8]
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8006fa2:	9102      	str	r1, [sp, #8]
 8006fa4:	9201      	str	r2, [sp, #4]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4623      	mov	r3, r4
 8006faa:	4602      	mov	r2, r0
 8006fac:	2101      	movs	r1, #1
 8006fae:	6938      	ldr	r0, [r7, #16]
 8006fb0:	f7fe fa5c 	bl	800546c <rproc_virtio_init_vring>
 8006fb4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	e014      	b.n	8006fea <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8006fc0:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <MX_OPENAMP_Init+0x11c>)
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8006fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8007008 <MX_OPENAMP_Init+0x120>)
 8006fca:	4b0e      	ldr	r3, [pc, #56]	@ (8007004 <MX_OPENAMP_Init+0x11c>)
 8006fcc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8006fce:	461a      	mov	r2, r3
 8006fd0:	480e      	ldr	r0, [pc, #56]	@ (800700c <MX_OPENAMP_Init+0x124>)
 8006fd2:	f7fe ff29 	bl	8005e28 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007000 <MX_OPENAMP_Init+0x118>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a0c      	ldr	r2, [pc, #48]	@ (800700c <MX_OPENAMP_Init+0x124>)
 8006fdc:	9200      	str	r2, [sp, #0]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	6939      	ldr	r1, [r7, #16]
 8006fe2:	480b      	ldr	r0, [pc, #44]	@ (8007010 <MX_OPENAMP_Init+0x128>)
 8006fe4:	f7ff f992 	bl	800630c <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd90      	pop	{r4, r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	24004218 	.word	0x24004218
 8006ff8:	24004214 	.word	0x24004214
 8006ffc:	08006d21 	.word	0x08006d21
 8007000:	24004210 	.word	0x24004210
 8007004:	38000400 	.word	0x38000400
 8007008:	38010000 	.word	0x38010000
 800700c:	2400421c 	.word	0x2400421c
 8007010:	24004228 	.word	0x24004228

08007014 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	@ 0x28
 8007018:	af04      	add	r7, sp, #16
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	9302      	str	r3, [sp, #8]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	f04f 33ff 	mov.w	r3, #4294967295
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4904      	ldr	r1, [pc, #16]	@ (800704c <OPENAMP_create_endpoint+0x38>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7fe fd10 	bl	8005a60 <rpmsg_create_ept>
 8007040:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8007042:	697b      	ldr	r3, [r7, #20]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	24004228 	.word	0x24004228

08007050 <OPENAMP_Wait_EndPointready>:
  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
}

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8007058:	e004      	b.n	8007064 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800705a:	4b08      	ldr	r3, [pc, #32]	@ (800707c <OPENAMP_Wait_EndPointready+0x2c>)
 800705c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fe44 	bl	8006cec <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fe6c 	bl	8006d42 <is_rpmsg_ept_ready>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0f4      	beq.n	800705a <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	24004228 	.word	0x24004228

08007080 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800708c:	228c      	movs	r2, #140	@ 0x8c
 800708e:	2100      	movs	r1, #0
 8007090:	481e      	ldr	r0, [pc, #120]	@ (800710c <resource_table_init+0x8c>)
 8007092:	f000 fa32 	bl	80074fa <memset>
	resource_table.num = 1;
 8007096:	4b1d      	ldr	r3, [pc, #116]	@ (800710c <resource_table_init+0x8c>)
 8007098:	2201      	movs	r2, #1
 800709a:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800709c:	4b1b      	ldr	r3, [pc, #108]	@ (800710c <resource_table_init+0x8c>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 80070a2:	4b1a      	ldr	r3, [pc, #104]	@ (800710c <resource_table_init+0x8c>)
 80070a4:	2218      	movs	r2, #24
 80070a6:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 80070a8:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <resource_table_init+0x90>)
 80070aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ae:	4a17      	ldr	r2, [pc, #92]	@ (800710c <resource_table_init+0x8c>)
 80070b0:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 80070b2:	4b16      	ldr	r3, [pc, #88]	@ (800710c <resource_table_init+0x8c>)
 80070b4:	2204      	movs	r2, #4
 80070b6:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <resource_table_init+0x8c>)
 80070ba:	2204      	movs	r2, #4
 80070bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80070be:	4b13      	ldr	r3, [pc, #76]	@ (800710c <resource_table_init+0x8c>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80070c4:	4a12      	ldr	r2, [pc, #72]	@ (8007110 <resource_table_init+0x90>)
 80070c6:	4b11      	ldr	r3, [pc, #68]	@ (800710c <resource_table_init+0x8c>)
 80070c8:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 80070ca:	4b10      	ldr	r3, [pc, #64]	@ (800710c <resource_table_init+0x8c>)
 80070cc:	2204      	movs	r2, #4
 80070ce:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	@ (800710c <resource_table_init+0x8c>)
 80070d2:	2204      	movs	r2, #4
 80070d4:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <resource_table_init+0x8c>)
 80070d8:	2201      	movs	r2, #1
 80070da:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 80070dc:	4b0b      	ldr	r3, [pc, #44]	@ (800710c <resource_table_init+0x8c>)
 80070de:	2203      	movs	r2, #3
 80070e0:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 80070e2:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <resource_table_init+0x8c>)
 80070e4:	2207      	movs	r2, #7
 80070e6:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 80070e8:	4b08      	ldr	r3, [pc, #32]	@ (800710c <resource_table_init+0x8c>)
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <resource_table_init+0x8c>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	228c      	movs	r2, #140	@ 0x8c
 80070fa:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4a03      	ldr	r2, [pc, #12]	@ (800710c <resource_table_init+0x8c>)
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	38000000 	.word	0x38000000
 8007110:	38000400 	.word	0x38000400

08007114 <__assert_func>:
 8007114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007116:	4614      	mov	r4, r2
 8007118:	461a      	mov	r2, r3
 800711a:	4b09      	ldr	r3, [pc, #36]	@ (8007140 <__assert_func+0x2c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4605      	mov	r5, r0
 8007120:	68d8      	ldr	r0, [r3, #12]
 8007122:	b954      	cbnz	r4, 800713a <__assert_func+0x26>
 8007124:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <__assert_func+0x30>)
 8007126:	461c      	mov	r4, r3
 8007128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800712c:	9100      	str	r1, [sp, #0]
 800712e:	462b      	mov	r3, r5
 8007130:	4905      	ldr	r1, [pc, #20]	@ (8007148 <__assert_func+0x34>)
 8007132:	f000 f96f 	bl	8007414 <fiprintf>
 8007136:	f000 fa9e 	bl	8007676 <abort>
 800713a:	4b04      	ldr	r3, [pc, #16]	@ (800714c <__assert_func+0x38>)
 800713c:	e7f4      	b.n	8007128 <__assert_func+0x14>
 800713e:	bf00      	nop
 8007140:	240000c8 	.word	0x240000c8
 8007144:	080083aa 	.word	0x080083aa
 8007148:	0800837c 	.word	0x0800837c
 800714c:	0800836f 	.word	0x0800836f

08007150 <malloc>:
 8007150:	4b02      	ldr	r3, [pc, #8]	@ (800715c <malloc+0xc>)
 8007152:	4601      	mov	r1, r0
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f000 b82d 	b.w	80071b4 <_malloc_r>
 800715a:	bf00      	nop
 800715c:	240000c8 	.word	0x240000c8

08007160 <free>:
 8007160:	4b02      	ldr	r3, [pc, #8]	@ (800716c <free+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f000 ba8d 	b.w	8007684 <_free_r>
 800716a:	bf00      	nop
 800716c:	240000c8 	.word	0x240000c8

08007170 <sbrk_aligned>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4e0f      	ldr	r6, [pc, #60]	@ (80071b0 <sbrk_aligned+0x40>)
 8007174:	460c      	mov	r4, r1
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	4605      	mov	r5, r0
 800717a:	b911      	cbnz	r1, 8007182 <sbrk_aligned+0x12>
 800717c:	f000 fa1e 	bl	80075bc <_sbrk_r>
 8007180:	6030      	str	r0, [r6, #0]
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 fa19 	bl	80075bc <_sbrk_r>
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	d103      	bne.n	8007196 <sbrk_aligned+0x26>
 800718e:	f04f 34ff 	mov.w	r4, #4294967295
 8007192:	4620      	mov	r0, r4
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	1cc4      	adds	r4, r0, #3
 8007198:	f024 0403 	bic.w	r4, r4, #3
 800719c:	42a0      	cmp	r0, r4
 800719e:	d0f8      	beq.n	8007192 <sbrk_aligned+0x22>
 80071a0:	1a21      	subs	r1, r4, r0
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 fa0a 	bl	80075bc <_sbrk_r>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d1f2      	bne.n	8007192 <sbrk_aligned+0x22>
 80071ac:	e7ef      	b.n	800718e <sbrk_aligned+0x1e>
 80071ae:	bf00      	nop
 80071b0:	240042a4 	.word	0x240042a4

080071b4 <_malloc_r>:
 80071b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b8:	1ccd      	adds	r5, r1, #3
 80071ba:	f025 0503 	bic.w	r5, r5, #3
 80071be:	3508      	adds	r5, #8
 80071c0:	2d0c      	cmp	r5, #12
 80071c2:	bf38      	it	cc
 80071c4:	250c      	movcc	r5, #12
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	4606      	mov	r6, r0
 80071ca:	db01      	blt.n	80071d0 <_malloc_r+0x1c>
 80071cc:	42a9      	cmp	r1, r5
 80071ce:	d904      	bls.n	80071da <_malloc_r+0x26>
 80071d0:	230c      	movs	r3, #12
 80071d2:	6033      	str	r3, [r6, #0]
 80071d4:	2000      	movs	r0, #0
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072b0 <_malloc_r+0xfc>
 80071de:	f000 f869 	bl	80072b4 <__malloc_lock>
 80071e2:	f8d8 3000 	ldr.w	r3, [r8]
 80071e6:	461c      	mov	r4, r3
 80071e8:	bb44      	cbnz	r4, 800723c <_malloc_r+0x88>
 80071ea:	4629      	mov	r1, r5
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff ffbf 	bl	8007170 <sbrk_aligned>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	4604      	mov	r4, r0
 80071f6:	d158      	bne.n	80072aa <_malloc_r+0xf6>
 80071f8:	f8d8 4000 	ldr.w	r4, [r8]
 80071fc:	4627      	mov	r7, r4
 80071fe:	2f00      	cmp	r7, #0
 8007200:	d143      	bne.n	800728a <_malloc_r+0xd6>
 8007202:	2c00      	cmp	r4, #0
 8007204:	d04b      	beq.n	800729e <_malloc_r+0xea>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	4639      	mov	r1, r7
 800720a:	4630      	mov	r0, r6
 800720c:	eb04 0903 	add.w	r9, r4, r3
 8007210:	f000 f9d4 	bl	80075bc <_sbrk_r>
 8007214:	4581      	cmp	r9, r0
 8007216:	d142      	bne.n	800729e <_malloc_r+0xea>
 8007218:	6821      	ldr	r1, [r4, #0]
 800721a:	1a6d      	subs	r5, r5, r1
 800721c:	4629      	mov	r1, r5
 800721e:	4630      	mov	r0, r6
 8007220:	f7ff ffa6 	bl	8007170 <sbrk_aligned>
 8007224:	3001      	adds	r0, #1
 8007226:	d03a      	beq.n	800729e <_malloc_r+0xea>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	442b      	add	r3, r5
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	f8d8 3000 	ldr.w	r3, [r8]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	bb62      	cbnz	r2, 8007290 <_malloc_r+0xdc>
 8007236:	f8c8 7000 	str.w	r7, [r8]
 800723a:	e00f      	b.n	800725c <_malloc_r+0xa8>
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	1b52      	subs	r2, r2, r5
 8007240:	d420      	bmi.n	8007284 <_malloc_r+0xd0>
 8007242:	2a0b      	cmp	r2, #11
 8007244:	d917      	bls.n	8007276 <_malloc_r+0xc2>
 8007246:	1961      	adds	r1, r4, r5
 8007248:	42a3      	cmp	r3, r4
 800724a:	6025      	str	r5, [r4, #0]
 800724c:	bf18      	it	ne
 800724e:	6059      	strne	r1, [r3, #4]
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	bf08      	it	eq
 8007254:	f8c8 1000 	streq.w	r1, [r8]
 8007258:	5162      	str	r2, [r4, r5]
 800725a:	604b      	str	r3, [r1, #4]
 800725c:	4630      	mov	r0, r6
 800725e:	f000 f82f 	bl	80072c0 <__malloc_unlock>
 8007262:	f104 000b 	add.w	r0, r4, #11
 8007266:	1d23      	adds	r3, r4, #4
 8007268:	f020 0007 	bic.w	r0, r0, #7
 800726c:	1ac2      	subs	r2, r0, r3
 800726e:	bf1c      	itt	ne
 8007270:	1a1b      	subne	r3, r3, r0
 8007272:	50a3      	strne	r3, [r4, r2]
 8007274:	e7af      	b.n	80071d6 <_malloc_r+0x22>
 8007276:	6862      	ldr	r2, [r4, #4]
 8007278:	42a3      	cmp	r3, r4
 800727a:	bf0c      	ite	eq
 800727c:	f8c8 2000 	streq.w	r2, [r8]
 8007280:	605a      	strne	r2, [r3, #4]
 8007282:	e7eb      	b.n	800725c <_malloc_r+0xa8>
 8007284:	4623      	mov	r3, r4
 8007286:	6864      	ldr	r4, [r4, #4]
 8007288:	e7ae      	b.n	80071e8 <_malloc_r+0x34>
 800728a:	463c      	mov	r4, r7
 800728c:	687f      	ldr	r7, [r7, #4]
 800728e:	e7b6      	b.n	80071fe <_malloc_r+0x4a>
 8007290:	461a      	mov	r2, r3
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	42a3      	cmp	r3, r4
 8007296:	d1fb      	bne.n	8007290 <_malloc_r+0xdc>
 8007298:	2300      	movs	r3, #0
 800729a:	6053      	str	r3, [r2, #4]
 800729c:	e7de      	b.n	800725c <_malloc_r+0xa8>
 800729e:	230c      	movs	r3, #12
 80072a0:	6033      	str	r3, [r6, #0]
 80072a2:	4630      	mov	r0, r6
 80072a4:	f000 f80c 	bl	80072c0 <__malloc_unlock>
 80072a8:	e794      	b.n	80071d4 <_malloc_r+0x20>
 80072aa:	6005      	str	r5, [r0, #0]
 80072ac:	e7d6      	b.n	800725c <_malloc_r+0xa8>
 80072ae:	bf00      	nop
 80072b0:	240042a8 	.word	0x240042a8

080072b4 <__malloc_lock>:
 80072b4:	4801      	ldr	r0, [pc, #4]	@ (80072bc <__malloc_lock+0x8>)
 80072b6:	f000 b9ce 	b.w	8007656 <__retarget_lock_acquire_recursive>
 80072ba:	bf00      	nop
 80072bc:	240043ec 	.word	0x240043ec

080072c0 <__malloc_unlock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	@ (80072c8 <__malloc_unlock+0x8>)
 80072c2:	f000 b9c9 	b.w	8007658 <__retarget_lock_release_recursive>
 80072c6:	bf00      	nop
 80072c8:	240043ec 	.word	0x240043ec

080072cc <std>:
 80072cc:	2300      	movs	r3, #0
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	e9c0 3300 	strd	r3, r3, [r0]
 80072d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072da:	6083      	str	r3, [r0, #8]
 80072dc:	8181      	strh	r1, [r0, #12]
 80072de:	6643      	str	r3, [r0, #100]	@ 0x64
 80072e0:	81c2      	strh	r2, [r0, #14]
 80072e2:	6183      	str	r3, [r0, #24]
 80072e4:	4619      	mov	r1, r3
 80072e6:	2208      	movs	r2, #8
 80072e8:	305c      	adds	r0, #92	@ 0x5c
 80072ea:	f000 f906 	bl	80074fa <memset>
 80072ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007324 <std+0x58>)
 80072f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80072f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <std+0x5c>)
 80072f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <std+0x60>)
 80072f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <std+0x64>)
 80072fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <std+0x68>)
 8007300:	6224      	str	r4, [r4, #32]
 8007302:	429c      	cmp	r4, r3
 8007304:	d006      	beq.n	8007314 <std+0x48>
 8007306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800730a:	4294      	cmp	r4, r2
 800730c:	d002      	beq.n	8007314 <std+0x48>
 800730e:	33d0      	adds	r3, #208	@ 0xd0
 8007310:	429c      	cmp	r4, r3
 8007312:	d105      	bne.n	8007320 <std+0x54>
 8007314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f000 b99a 	b.w	8007654 <__retarget_lock_init_recursive>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	08007475 	.word	0x08007475
 8007328:	08007497 	.word	0x08007497
 800732c:	080074cf 	.word	0x080074cf
 8007330:	080074f3 	.word	0x080074f3
 8007334:	240042ac 	.word	0x240042ac

08007338 <stdio_exit_handler>:
 8007338:	4a02      	ldr	r2, [pc, #8]	@ (8007344 <stdio_exit_handler+0xc>)
 800733a:	4903      	ldr	r1, [pc, #12]	@ (8007348 <stdio_exit_handler+0x10>)
 800733c:	4803      	ldr	r0, [pc, #12]	@ (800734c <stdio_exit_handler+0x14>)
 800733e:	f000 b87b 	b.w	8007438 <_fwalk_sglue>
 8007342:	bf00      	nop
 8007344:	240000bc 	.word	0x240000bc
 8007348:	08007dc1 	.word	0x08007dc1
 800734c:	240000cc 	.word	0x240000cc

08007350 <cleanup_stdio>:
 8007350:	6841      	ldr	r1, [r0, #4]
 8007352:	4b0c      	ldr	r3, [pc, #48]	@ (8007384 <cleanup_stdio+0x34>)
 8007354:	4299      	cmp	r1, r3
 8007356:	b510      	push	{r4, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	d001      	beq.n	8007360 <cleanup_stdio+0x10>
 800735c:	f000 fd30 	bl	8007dc0 <_fflush_r>
 8007360:	68a1      	ldr	r1, [r4, #8]
 8007362:	4b09      	ldr	r3, [pc, #36]	@ (8007388 <cleanup_stdio+0x38>)
 8007364:	4299      	cmp	r1, r3
 8007366:	d002      	beq.n	800736e <cleanup_stdio+0x1e>
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fd29 	bl	8007dc0 <_fflush_r>
 800736e:	68e1      	ldr	r1, [r4, #12]
 8007370:	4b06      	ldr	r3, [pc, #24]	@ (800738c <cleanup_stdio+0x3c>)
 8007372:	4299      	cmp	r1, r3
 8007374:	d004      	beq.n	8007380 <cleanup_stdio+0x30>
 8007376:	4620      	mov	r0, r4
 8007378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800737c:	f000 bd20 	b.w	8007dc0 <_fflush_r>
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	240042ac 	.word	0x240042ac
 8007388:	24004314 	.word	0x24004314
 800738c:	2400437c 	.word	0x2400437c

08007390 <global_stdio_init.part.0>:
 8007390:	b510      	push	{r4, lr}
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <global_stdio_init.part.0+0x30>)
 8007394:	4c0b      	ldr	r4, [pc, #44]	@ (80073c4 <global_stdio_init.part.0+0x34>)
 8007396:	4a0c      	ldr	r2, [pc, #48]	@ (80073c8 <global_stdio_init.part.0+0x38>)
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	4620      	mov	r0, r4
 800739c:	2200      	movs	r2, #0
 800739e:	2104      	movs	r1, #4
 80073a0:	f7ff ff94 	bl	80072cc <std>
 80073a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073a8:	2201      	movs	r2, #1
 80073aa:	2109      	movs	r1, #9
 80073ac:	f7ff ff8e 	bl	80072cc <std>
 80073b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073b4:	2202      	movs	r2, #2
 80073b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ba:	2112      	movs	r1, #18
 80073bc:	f7ff bf86 	b.w	80072cc <std>
 80073c0:	240043e4 	.word	0x240043e4
 80073c4:	240042ac 	.word	0x240042ac
 80073c8:	08007339 	.word	0x08007339

080073cc <__sfp_lock_acquire>:
 80073cc:	4801      	ldr	r0, [pc, #4]	@ (80073d4 <__sfp_lock_acquire+0x8>)
 80073ce:	f000 b942 	b.w	8007656 <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	240043ed 	.word	0x240043ed

080073d8 <__sfp_lock_release>:
 80073d8:	4801      	ldr	r0, [pc, #4]	@ (80073e0 <__sfp_lock_release+0x8>)
 80073da:	f000 b93d 	b.w	8007658 <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	240043ed 	.word	0x240043ed

080073e4 <__sinit>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	f7ff fff0 	bl	80073cc <__sfp_lock_acquire>
 80073ec:	6a23      	ldr	r3, [r4, #32]
 80073ee:	b11b      	cbz	r3, 80073f8 <__sinit+0x14>
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f7ff bff0 	b.w	80073d8 <__sfp_lock_release>
 80073f8:	4b04      	ldr	r3, [pc, #16]	@ (800740c <__sinit+0x28>)
 80073fa:	6223      	str	r3, [r4, #32]
 80073fc:	4b04      	ldr	r3, [pc, #16]	@ (8007410 <__sinit+0x2c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f5      	bne.n	80073f0 <__sinit+0xc>
 8007404:	f7ff ffc4 	bl	8007390 <global_stdio_init.part.0>
 8007408:	e7f2      	b.n	80073f0 <__sinit+0xc>
 800740a:	bf00      	nop
 800740c:	08007351 	.word	0x08007351
 8007410:	240043e4 	.word	0x240043e4

08007414 <fiprintf>:
 8007414:	b40e      	push	{r1, r2, r3}
 8007416:	b503      	push	{r0, r1, lr}
 8007418:	4601      	mov	r1, r0
 800741a:	ab03      	add	r3, sp, #12
 800741c:	4805      	ldr	r0, [pc, #20]	@ (8007434 <fiprintf+0x20>)
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	6800      	ldr	r0, [r0, #0]
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	f000 f9a1 	bl	800776c <_vfiprintf_r>
 800742a:	b002      	add	sp, #8
 800742c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007430:	b003      	add	sp, #12
 8007432:	4770      	bx	lr
 8007434:	240000c8 	.word	0x240000c8

08007438 <_fwalk_sglue>:
 8007438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800743c:	4607      	mov	r7, r0
 800743e:	4688      	mov	r8, r1
 8007440:	4614      	mov	r4, r2
 8007442:	2600      	movs	r6, #0
 8007444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007448:	f1b9 0901 	subs.w	r9, r9, #1
 800744c:	d505      	bpl.n	800745a <_fwalk_sglue+0x22>
 800744e:	6824      	ldr	r4, [r4, #0]
 8007450:	2c00      	cmp	r4, #0
 8007452:	d1f7      	bne.n	8007444 <_fwalk_sglue+0xc>
 8007454:	4630      	mov	r0, r6
 8007456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d907      	bls.n	8007470 <_fwalk_sglue+0x38>
 8007460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007464:	3301      	adds	r3, #1
 8007466:	d003      	beq.n	8007470 <_fwalk_sglue+0x38>
 8007468:	4629      	mov	r1, r5
 800746a:	4638      	mov	r0, r7
 800746c:	47c0      	blx	r8
 800746e:	4306      	orrs	r6, r0
 8007470:	3568      	adds	r5, #104	@ 0x68
 8007472:	e7e9      	b.n	8007448 <_fwalk_sglue+0x10>

08007474 <__sread>:
 8007474:	b510      	push	{r4, lr}
 8007476:	460c      	mov	r4, r1
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	f000 f88c 	bl	8007598 <_read_r>
 8007480:	2800      	cmp	r0, #0
 8007482:	bfab      	itete	ge
 8007484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007486:	89a3      	ldrhlt	r3, [r4, #12]
 8007488:	181b      	addge	r3, r3, r0
 800748a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800748e:	bfac      	ite	ge
 8007490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007492:	81a3      	strhlt	r3, [r4, #12]
 8007494:	bd10      	pop	{r4, pc}

08007496 <__swrite>:
 8007496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749a:	461f      	mov	r7, r3
 800749c:	898b      	ldrh	r3, [r1, #12]
 800749e:	05db      	lsls	r3, r3, #23
 80074a0:	4605      	mov	r5, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	4616      	mov	r6, r2
 80074a6:	d505      	bpl.n	80074b4 <__swrite+0x1e>
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	2302      	movs	r3, #2
 80074ae:	2200      	movs	r2, #0
 80074b0:	f000 f860 	bl	8007574 <_lseek_r>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	4632      	mov	r2, r6
 80074c2:	463b      	mov	r3, r7
 80074c4:	4628      	mov	r0, r5
 80074c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	f000 b887 	b.w	80075dc <_write_r>

080074ce <__sseek>:
 80074ce:	b510      	push	{r4, lr}
 80074d0:	460c      	mov	r4, r1
 80074d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d6:	f000 f84d 	bl	8007574 <_lseek_r>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	bf15      	itete	ne
 80074e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074ea:	81a3      	strheq	r3, [r4, #12]
 80074ec:	bf18      	it	ne
 80074ee:	81a3      	strhne	r3, [r4, #12]
 80074f0:	bd10      	pop	{r4, pc}

080074f2 <__sclose>:
 80074f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f6:	f000 b82d 	b.w	8007554 <_close_r>

080074fa <memset>:
 80074fa:	4402      	add	r2, r0
 80074fc:	4603      	mov	r3, r0
 80074fe:	4293      	cmp	r3, r2
 8007500:	d100      	bne.n	8007504 <memset+0xa>
 8007502:	4770      	bx	lr
 8007504:	f803 1b01 	strb.w	r1, [r3], #1
 8007508:	e7f9      	b.n	80074fe <memset+0x4>

0800750a <strncmp>:
 800750a:	b510      	push	{r4, lr}
 800750c:	b16a      	cbz	r2, 800752a <strncmp+0x20>
 800750e:	3901      	subs	r1, #1
 8007510:	1884      	adds	r4, r0, r2
 8007512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007516:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800751a:	429a      	cmp	r2, r3
 800751c:	d103      	bne.n	8007526 <strncmp+0x1c>
 800751e:	42a0      	cmp	r0, r4
 8007520:	d001      	beq.n	8007526 <strncmp+0x1c>
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1f5      	bne.n	8007512 <strncmp+0x8>
 8007526:	1ad0      	subs	r0, r2, r3
 8007528:	bd10      	pop	{r4, pc}
 800752a:	4610      	mov	r0, r2
 800752c:	e7fc      	b.n	8007528 <strncmp+0x1e>

0800752e <strncpy>:
 800752e:	b510      	push	{r4, lr}
 8007530:	3901      	subs	r1, #1
 8007532:	4603      	mov	r3, r0
 8007534:	b132      	cbz	r2, 8007544 <strncpy+0x16>
 8007536:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800753a:	f803 4b01 	strb.w	r4, [r3], #1
 800753e:	3a01      	subs	r2, #1
 8007540:	2c00      	cmp	r4, #0
 8007542:	d1f7      	bne.n	8007534 <strncpy+0x6>
 8007544:	441a      	add	r2, r3
 8007546:	2100      	movs	r1, #0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <strncpy+0x20>
 800754c:	bd10      	pop	{r4, pc}
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <strncpy+0x1a>

08007554 <_close_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d06      	ldr	r5, [pc, #24]	@ (8007570 <_close_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7f9 fdbe 	bl	80010e0 <_close>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_close_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_close_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	240043e8 	.word	0x240043e8

08007574 <_lseek_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	@ (8007594 <_lseek_r+0x20>)
 8007578:	4604      	mov	r4, r0
 800757a:	4608      	mov	r0, r1
 800757c:	4611      	mov	r1, r2
 800757e:	2200      	movs	r2, #0
 8007580:	602a      	str	r2, [r5, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f7f9 fdd3 	bl	800112e <_lseek>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_lseek_r+0x1e>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_lseek_r+0x1e>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	240043e8 	.word	0x240043e8

08007598 <_read_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	@ (80075b8 <_read_r+0x20>)
 800759c:	4604      	mov	r4, r0
 800759e:	4608      	mov	r0, r1
 80075a0:	4611      	mov	r1, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f7f9 fd61 	bl	800106e <_read>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_read_r+0x1e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_read_r+0x1e>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	240043e8 	.word	0x240043e8

080075bc <_sbrk_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d06      	ldr	r5, [pc, #24]	@ (80075d8 <_sbrk_r+0x1c>)
 80075c0:	2300      	movs	r3, #0
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	f7f9 fdbe 	bl	8001148 <_sbrk>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_sbrk_r+0x1a>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_sbrk_r+0x1a>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	240043e8 	.word	0x240043e8

080075dc <_write_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d07      	ldr	r5, [pc, #28]	@ (80075fc <_write_r+0x20>)
 80075e0:	4604      	mov	r4, r0
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	602a      	str	r2, [r5, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f7f9 fd5c 	bl	80010a8 <_write>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_write_r+0x1e>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_write_r+0x1e>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	240043e8 	.word	0x240043e8

08007600 <__errno>:
 8007600:	4b01      	ldr	r3, [pc, #4]	@ (8007608 <__errno+0x8>)
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	240000c8 	.word	0x240000c8

0800760c <__libc_init_array>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4d0d      	ldr	r5, [pc, #52]	@ (8007644 <__libc_init_array+0x38>)
 8007610:	4c0d      	ldr	r4, [pc, #52]	@ (8007648 <__libc_init_array+0x3c>)
 8007612:	1b64      	subs	r4, r4, r5
 8007614:	10a4      	asrs	r4, r4, #2
 8007616:	2600      	movs	r6, #0
 8007618:	42a6      	cmp	r6, r4
 800761a:	d109      	bne.n	8007630 <__libc_init_array+0x24>
 800761c:	4d0b      	ldr	r5, [pc, #44]	@ (800764c <__libc_init_array+0x40>)
 800761e:	4c0c      	ldr	r4, [pc, #48]	@ (8007650 <__libc_init_array+0x44>)
 8007620:	f000 fd52 	bl	80080c8 <_init>
 8007624:	1b64      	subs	r4, r4, r5
 8007626:	10a4      	asrs	r4, r4, #2
 8007628:	2600      	movs	r6, #0
 800762a:	42a6      	cmp	r6, r4
 800762c:	d105      	bne.n	800763a <__libc_init_array+0x2e>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f855 3b04 	ldr.w	r3, [r5], #4
 8007634:	4798      	blx	r3
 8007636:	3601      	adds	r6, #1
 8007638:	e7ee      	b.n	8007618 <__libc_init_array+0xc>
 800763a:	f855 3b04 	ldr.w	r3, [r5], #4
 800763e:	4798      	blx	r3
 8007640:	3601      	adds	r6, #1
 8007642:	e7f2      	b.n	800762a <__libc_init_array+0x1e>
 8007644:	080083e8 	.word	0x080083e8
 8007648:	080083e8 	.word	0x080083e8
 800764c:	080083e8 	.word	0x080083e8
 8007650:	080083ec 	.word	0x080083ec

08007654 <__retarget_lock_init_recursive>:
 8007654:	4770      	bx	lr

08007656 <__retarget_lock_acquire_recursive>:
 8007656:	4770      	bx	lr

08007658 <__retarget_lock_release_recursive>:
 8007658:	4770      	bx	lr

0800765a <memcpy>:
 800765a:	440a      	add	r2, r1
 800765c:	4291      	cmp	r1, r2
 800765e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007662:	d100      	bne.n	8007666 <memcpy+0xc>
 8007664:	4770      	bx	lr
 8007666:	b510      	push	{r4, lr}
 8007668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800766c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007670:	4291      	cmp	r1, r2
 8007672:	d1f9      	bne.n	8007668 <memcpy+0xe>
 8007674:	bd10      	pop	{r4, pc}

08007676 <abort>:
 8007676:	b508      	push	{r3, lr}
 8007678:	2006      	movs	r0, #6
 800767a:	f000 fc85 	bl	8007f88 <raise>
 800767e:	2001      	movs	r0, #1
 8007680:	f7f9 fcea 	bl	8001058 <_exit>

08007684 <_free_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4605      	mov	r5, r0
 8007688:	2900      	cmp	r1, #0
 800768a:	d041      	beq.n	8007710 <_free_r+0x8c>
 800768c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007690:	1f0c      	subs	r4, r1, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfb8      	it	lt
 8007696:	18e4      	addlt	r4, r4, r3
 8007698:	f7ff fe0c 	bl	80072b4 <__malloc_lock>
 800769c:	4a1d      	ldr	r2, [pc, #116]	@ (8007714 <_free_r+0x90>)
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	b933      	cbnz	r3, 80076b0 <_free_r+0x2c>
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	6014      	str	r4, [r2, #0]
 80076a6:	4628      	mov	r0, r5
 80076a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ac:	f7ff be08 	b.w	80072c0 <__malloc_unlock>
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	d908      	bls.n	80076c6 <_free_r+0x42>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	1821      	adds	r1, r4, r0
 80076b8:	428b      	cmp	r3, r1
 80076ba:	bf01      	itttt	eq
 80076bc:	6819      	ldreq	r1, [r3, #0]
 80076be:	685b      	ldreq	r3, [r3, #4]
 80076c0:	1809      	addeq	r1, r1, r0
 80076c2:	6021      	streq	r1, [r4, #0]
 80076c4:	e7ed      	b.n	80076a2 <_free_r+0x1e>
 80076c6:	461a      	mov	r2, r3
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	b10b      	cbz	r3, 80076d0 <_free_r+0x4c>
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	d9fa      	bls.n	80076c6 <_free_r+0x42>
 80076d0:	6811      	ldr	r1, [r2, #0]
 80076d2:	1850      	adds	r0, r2, r1
 80076d4:	42a0      	cmp	r0, r4
 80076d6:	d10b      	bne.n	80076f0 <_free_r+0x6c>
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	4401      	add	r1, r0
 80076dc:	1850      	adds	r0, r2, r1
 80076de:	4283      	cmp	r3, r0
 80076e0:	6011      	str	r1, [r2, #0]
 80076e2:	d1e0      	bne.n	80076a6 <_free_r+0x22>
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	6053      	str	r3, [r2, #4]
 80076ea:	4408      	add	r0, r1
 80076ec:	6010      	str	r0, [r2, #0]
 80076ee:	e7da      	b.n	80076a6 <_free_r+0x22>
 80076f0:	d902      	bls.n	80076f8 <_free_r+0x74>
 80076f2:	230c      	movs	r3, #12
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	e7d6      	b.n	80076a6 <_free_r+0x22>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	1821      	adds	r1, r4, r0
 80076fc:	428b      	cmp	r3, r1
 80076fe:	bf04      	itt	eq
 8007700:	6819      	ldreq	r1, [r3, #0]
 8007702:	685b      	ldreq	r3, [r3, #4]
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	bf04      	itt	eq
 8007708:	1809      	addeq	r1, r1, r0
 800770a:	6021      	streq	r1, [r4, #0]
 800770c:	6054      	str	r4, [r2, #4]
 800770e:	e7ca      	b.n	80076a6 <_free_r+0x22>
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	240042a8 	.word	0x240042a8

08007718 <__sfputc_r>:
 8007718:	6893      	ldr	r3, [r2, #8]
 800771a:	3b01      	subs	r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	b410      	push	{r4}
 8007720:	6093      	str	r3, [r2, #8]
 8007722:	da08      	bge.n	8007736 <__sfputc_r+0x1e>
 8007724:	6994      	ldr	r4, [r2, #24]
 8007726:	42a3      	cmp	r3, r4
 8007728:	db01      	blt.n	800772e <__sfputc_r+0x16>
 800772a:	290a      	cmp	r1, #10
 800772c:	d103      	bne.n	8007736 <__sfputc_r+0x1e>
 800772e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007732:	f000 bb6d 	b.w	8007e10 <__swbuf_r>
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	1c58      	adds	r0, r3, #1
 800773a:	6010      	str	r0, [r2, #0]
 800773c:	7019      	strb	r1, [r3, #0]
 800773e:	4608      	mov	r0, r1
 8007740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007744:	4770      	bx	lr

08007746 <__sfputs_r>:
 8007746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007748:	4606      	mov	r6, r0
 800774a:	460f      	mov	r7, r1
 800774c:	4614      	mov	r4, r2
 800774e:	18d5      	adds	r5, r2, r3
 8007750:	42ac      	cmp	r4, r5
 8007752:	d101      	bne.n	8007758 <__sfputs_r+0x12>
 8007754:	2000      	movs	r0, #0
 8007756:	e007      	b.n	8007768 <__sfputs_r+0x22>
 8007758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775c:	463a      	mov	r2, r7
 800775e:	4630      	mov	r0, r6
 8007760:	f7ff ffda 	bl	8007718 <__sfputc_r>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d1f3      	bne.n	8007750 <__sfputs_r+0xa>
 8007768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800776c <_vfiprintf_r>:
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	460d      	mov	r5, r1
 8007772:	b09d      	sub	sp, #116	@ 0x74
 8007774:	4614      	mov	r4, r2
 8007776:	4698      	mov	r8, r3
 8007778:	4606      	mov	r6, r0
 800777a:	b118      	cbz	r0, 8007784 <_vfiprintf_r+0x18>
 800777c:	6a03      	ldr	r3, [r0, #32]
 800777e:	b90b      	cbnz	r3, 8007784 <_vfiprintf_r+0x18>
 8007780:	f7ff fe30 	bl	80073e4 <__sinit>
 8007784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007786:	07d9      	lsls	r1, r3, #31
 8007788:	d405      	bmi.n	8007796 <_vfiprintf_r+0x2a>
 800778a:	89ab      	ldrh	r3, [r5, #12]
 800778c:	059a      	lsls	r2, r3, #22
 800778e:	d402      	bmi.n	8007796 <_vfiprintf_r+0x2a>
 8007790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007792:	f7ff ff60 	bl	8007656 <__retarget_lock_acquire_recursive>
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	071b      	lsls	r3, r3, #28
 800779a:	d501      	bpl.n	80077a0 <_vfiprintf_r+0x34>
 800779c:	692b      	ldr	r3, [r5, #16]
 800779e:	b99b      	cbnz	r3, 80077c8 <_vfiprintf_r+0x5c>
 80077a0:	4629      	mov	r1, r5
 80077a2:	4630      	mov	r0, r6
 80077a4:	f000 fb72 	bl	8007e8c <__swsetup_r>
 80077a8:	b170      	cbz	r0, 80077c8 <_vfiprintf_r+0x5c>
 80077aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077ac:	07dc      	lsls	r4, r3, #31
 80077ae:	d504      	bpl.n	80077ba <_vfiprintf_r+0x4e>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	b01d      	add	sp, #116	@ 0x74
 80077b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	0598      	lsls	r0, r3, #22
 80077be:	d4f7      	bmi.n	80077b0 <_vfiprintf_r+0x44>
 80077c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077c2:	f7ff ff49 	bl	8007658 <__retarget_lock_release_recursive>
 80077c6:	e7f3      	b.n	80077b0 <_vfiprintf_r+0x44>
 80077c8:	2300      	movs	r3, #0
 80077ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80077cc:	2320      	movs	r3, #32
 80077ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d6:	2330      	movs	r3, #48	@ 0x30
 80077d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007988 <_vfiprintf_r+0x21c>
 80077dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077e0:	f04f 0901 	mov.w	r9, #1
 80077e4:	4623      	mov	r3, r4
 80077e6:	469a      	mov	sl, r3
 80077e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ec:	b10a      	cbz	r2, 80077f2 <_vfiprintf_r+0x86>
 80077ee:	2a25      	cmp	r2, #37	@ 0x25
 80077f0:	d1f9      	bne.n	80077e6 <_vfiprintf_r+0x7a>
 80077f2:	ebba 0b04 	subs.w	fp, sl, r4
 80077f6:	d00b      	beq.n	8007810 <_vfiprintf_r+0xa4>
 80077f8:	465b      	mov	r3, fp
 80077fa:	4622      	mov	r2, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f7ff ffa1 	bl	8007746 <__sfputs_r>
 8007804:	3001      	adds	r0, #1
 8007806:	f000 80a7 	beq.w	8007958 <_vfiprintf_r+0x1ec>
 800780a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800780c:	445a      	add	r2, fp
 800780e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007810:	f89a 3000 	ldrb.w	r3, [sl]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 809f 	beq.w	8007958 <_vfiprintf_r+0x1ec>
 800781a:	2300      	movs	r3, #0
 800781c:	f04f 32ff 	mov.w	r2, #4294967295
 8007820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007824:	f10a 0a01 	add.w	sl, sl, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	9307      	str	r3, [sp, #28]
 800782c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007830:	931a      	str	r3, [sp, #104]	@ 0x68
 8007832:	4654      	mov	r4, sl
 8007834:	2205      	movs	r2, #5
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	4853      	ldr	r0, [pc, #332]	@ (8007988 <_vfiprintf_r+0x21c>)
 800783c:	f7f8 fd60 	bl	8000300 <memchr>
 8007840:	9a04      	ldr	r2, [sp, #16]
 8007842:	b9d8      	cbnz	r0, 800787c <_vfiprintf_r+0x110>
 8007844:	06d1      	lsls	r1, r2, #27
 8007846:	bf44      	itt	mi
 8007848:	2320      	movmi	r3, #32
 800784a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800784e:	0713      	lsls	r3, r2, #28
 8007850:	bf44      	itt	mi
 8007852:	232b      	movmi	r3, #43	@ 0x2b
 8007854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007858:	f89a 3000 	ldrb.w	r3, [sl]
 800785c:	2b2a      	cmp	r3, #42	@ 0x2a
 800785e:	d015      	beq.n	800788c <_vfiprintf_r+0x120>
 8007860:	9a07      	ldr	r2, [sp, #28]
 8007862:	4654      	mov	r4, sl
 8007864:	2000      	movs	r0, #0
 8007866:	f04f 0c0a 	mov.w	ip, #10
 800786a:	4621      	mov	r1, r4
 800786c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007870:	3b30      	subs	r3, #48	@ 0x30
 8007872:	2b09      	cmp	r3, #9
 8007874:	d94b      	bls.n	800790e <_vfiprintf_r+0x1a2>
 8007876:	b1b0      	cbz	r0, 80078a6 <_vfiprintf_r+0x13a>
 8007878:	9207      	str	r2, [sp, #28]
 800787a:	e014      	b.n	80078a6 <_vfiprintf_r+0x13a>
 800787c:	eba0 0308 	sub.w	r3, r0, r8
 8007880:	fa09 f303 	lsl.w	r3, r9, r3
 8007884:	4313      	orrs	r3, r2
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	46a2      	mov	sl, r4
 800788a:	e7d2      	b.n	8007832 <_vfiprintf_r+0xc6>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	1d19      	adds	r1, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	9103      	str	r1, [sp, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfbb      	ittet	lt
 8007898:	425b      	neglt	r3, r3
 800789a:	f042 0202 	orrlt.w	r2, r2, #2
 800789e:	9307      	strge	r3, [sp, #28]
 80078a0:	9307      	strlt	r3, [sp, #28]
 80078a2:	bfb8      	it	lt
 80078a4:	9204      	strlt	r2, [sp, #16]
 80078a6:	7823      	ldrb	r3, [r4, #0]
 80078a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80078aa:	d10a      	bne.n	80078c2 <_vfiprintf_r+0x156>
 80078ac:	7863      	ldrb	r3, [r4, #1]
 80078ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80078b0:	d132      	bne.n	8007918 <_vfiprintf_r+0x1ac>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	9203      	str	r2, [sp, #12]
 80078ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078be:	3402      	adds	r4, #2
 80078c0:	9305      	str	r3, [sp, #20]
 80078c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007998 <_vfiprintf_r+0x22c>
 80078c6:	7821      	ldrb	r1, [r4, #0]
 80078c8:	2203      	movs	r2, #3
 80078ca:	4650      	mov	r0, sl
 80078cc:	f7f8 fd18 	bl	8000300 <memchr>
 80078d0:	b138      	cbz	r0, 80078e2 <_vfiprintf_r+0x176>
 80078d2:	9b04      	ldr	r3, [sp, #16]
 80078d4:	eba0 000a 	sub.w	r0, r0, sl
 80078d8:	2240      	movs	r2, #64	@ 0x40
 80078da:	4082      	lsls	r2, r0
 80078dc:	4313      	orrs	r3, r2
 80078de:	3401      	adds	r4, #1
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e6:	4829      	ldr	r0, [pc, #164]	@ (800798c <_vfiprintf_r+0x220>)
 80078e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078ec:	2206      	movs	r2, #6
 80078ee:	f7f8 fd07 	bl	8000300 <memchr>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d03f      	beq.n	8007976 <_vfiprintf_r+0x20a>
 80078f6:	4b26      	ldr	r3, [pc, #152]	@ (8007990 <_vfiprintf_r+0x224>)
 80078f8:	bb1b      	cbnz	r3, 8007942 <_vfiprintf_r+0x1d6>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	3307      	adds	r3, #7
 80078fe:	f023 0307 	bic.w	r3, r3, #7
 8007902:	3308      	adds	r3, #8
 8007904:	9303      	str	r3, [sp, #12]
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	443b      	add	r3, r7
 800790a:	9309      	str	r3, [sp, #36]	@ 0x24
 800790c:	e76a      	b.n	80077e4 <_vfiprintf_r+0x78>
 800790e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007912:	460c      	mov	r4, r1
 8007914:	2001      	movs	r0, #1
 8007916:	e7a8      	b.n	800786a <_vfiprintf_r+0xfe>
 8007918:	2300      	movs	r3, #0
 800791a:	3401      	adds	r4, #1
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	4619      	mov	r1, r3
 8007920:	f04f 0c0a 	mov.w	ip, #10
 8007924:	4620      	mov	r0, r4
 8007926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800792a:	3a30      	subs	r2, #48	@ 0x30
 800792c:	2a09      	cmp	r2, #9
 800792e:	d903      	bls.n	8007938 <_vfiprintf_r+0x1cc>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0c6      	beq.n	80078c2 <_vfiprintf_r+0x156>
 8007934:	9105      	str	r1, [sp, #20]
 8007936:	e7c4      	b.n	80078c2 <_vfiprintf_r+0x156>
 8007938:	fb0c 2101 	mla	r1, ip, r1, r2
 800793c:	4604      	mov	r4, r0
 800793e:	2301      	movs	r3, #1
 8007940:	e7f0      	b.n	8007924 <_vfiprintf_r+0x1b8>
 8007942:	ab03      	add	r3, sp, #12
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	462a      	mov	r2, r5
 8007948:	4b12      	ldr	r3, [pc, #72]	@ (8007994 <_vfiprintf_r+0x228>)
 800794a:	a904      	add	r1, sp, #16
 800794c:	4630      	mov	r0, r6
 800794e:	f3af 8000 	nop.w
 8007952:	4607      	mov	r7, r0
 8007954:	1c78      	adds	r0, r7, #1
 8007956:	d1d6      	bne.n	8007906 <_vfiprintf_r+0x19a>
 8007958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800795a:	07d9      	lsls	r1, r3, #31
 800795c:	d405      	bmi.n	800796a <_vfiprintf_r+0x1fe>
 800795e:	89ab      	ldrh	r3, [r5, #12]
 8007960:	059a      	lsls	r2, r3, #22
 8007962:	d402      	bmi.n	800796a <_vfiprintf_r+0x1fe>
 8007964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007966:	f7ff fe77 	bl	8007658 <__retarget_lock_release_recursive>
 800796a:	89ab      	ldrh	r3, [r5, #12]
 800796c:	065b      	lsls	r3, r3, #25
 800796e:	f53f af1f 	bmi.w	80077b0 <_vfiprintf_r+0x44>
 8007972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007974:	e71e      	b.n	80077b4 <_vfiprintf_r+0x48>
 8007976:	ab03      	add	r3, sp, #12
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	462a      	mov	r2, r5
 800797c:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <_vfiprintf_r+0x228>)
 800797e:	a904      	add	r1, sp, #16
 8007980:	4630      	mov	r0, r6
 8007982:	f000 f879 	bl	8007a78 <_printf_i>
 8007986:	e7e4      	b.n	8007952 <_vfiprintf_r+0x1e6>
 8007988:	080083ab 	.word	0x080083ab
 800798c:	080083b5 	.word	0x080083b5
 8007990:	00000000 	.word	0x00000000
 8007994:	08007747 	.word	0x08007747
 8007998:	080083b1 	.word	0x080083b1

0800799c <_printf_common>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	4616      	mov	r6, r2
 80079a2:	4698      	mov	r8, r3
 80079a4:	688a      	ldr	r2, [r1, #8]
 80079a6:	690b      	ldr	r3, [r1, #16]
 80079a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bfb8      	it	lt
 80079b0:	4613      	movlt	r3, r2
 80079b2:	6033      	str	r3, [r6, #0]
 80079b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079b8:	4607      	mov	r7, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	b10a      	cbz	r2, 80079c2 <_printf_common+0x26>
 80079be:	3301      	adds	r3, #1
 80079c0:	6033      	str	r3, [r6, #0]
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	0699      	lsls	r1, r3, #26
 80079c6:	bf42      	ittt	mi
 80079c8:	6833      	ldrmi	r3, [r6, #0]
 80079ca:	3302      	addmi	r3, #2
 80079cc:	6033      	strmi	r3, [r6, #0]
 80079ce:	6825      	ldr	r5, [r4, #0]
 80079d0:	f015 0506 	ands.w	r5, r5, #6
 80079d4:	d106      	bne.n	80079e4 <_printf_common+0x48>
 80079d6:	f104 0a19 	add.w	sl, r4, #25
 80079da:	68e3      	ldr	r3, [r4, #12]
 80079dc:	6832      	ldr	r2, [r6, #0]
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	dc26      	bgt.n	8007a32 <_printf_common+0x96>
 80079e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	3b00      	subs	r3, #0
 80079ec:	bf18      	it	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	0692      	lsls	r2, r2, #26
 80079f2:	d42b      	bmi.n	8007a4c <_printf_common+0xb0>
 80079f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079f8:	4641      	mov	r1, r8
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c8      	blx	r9
 80079fe:	3001      	adds	r0, #1
 8007a00:	d01e      	beq.n	8007a40 <_printf_common+0xa4>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	f003 0306 	and.w	r3, r3, #6
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	bf02      	ittt	eq
 8007a0e:	68e5      	ldreq	r5, [r4, #12]
 8007a10:	6833      	ldreq	r3, [r6, #0]
 8007a12:	1aed      	subeq	r5, r5, r3
 8007a14:	68a3      	ldr	r3, [r4, #8]
 8007a16:	bf0c      	ite	eq
 8007a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a1c:	2500      	movne	r5, #0
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	bfc4      	itt	gt
 8007a22:	1a9b      	subgt	r3, r3, r2
 8007a24:	18ed      	addgt	r5, r5, r3
 8007a26:	2600      	movs	r6, #0
 8007a28:	341a      	adds	r4, #26
 8007a2a:	42b5      	cmp	r5, r6
 8007a2c:	d11a      	bne.n	8007a64 <_printf_common+0xc8>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e008      	b.n	8007a44 <_printf_common+0xa8>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4652      	mov	r2, sl
 8007a36:	4641      	mov	r1, r8
 8007a38:	4638      	mov	r0, r7
 8007a3a:	47c8      	blx	r9
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d103      	bne.n	8007a48 <_printf_common+0xac>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a48:	3501      	adds	r5, #1
 8007a4a:	e7c6      	b.n	80079da <_printf_common+0x3e>
 8007a4c:	18e1      	adds	r1, r4, r3
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	2030      	movs	r0, #48	@ 0x30
 8007a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a56:	4422      	add	r2, r4
 8007a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a60:	3302      	adds	r3, #2
 8007a62:	e7c7      	b.n	80079f4 <_printf_common+0x58>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4622      	mov	r2, r4
 8007a68:	4641      	mov	r1, r8
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	47c8      	blx	r9
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d0e6      	beq.n	8007a40 <_printf_common+0xa4>
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7d9      	b.n	8007a2a <_printf_common+0x8e>
	...

08007a78 <_printf_i>:
 8007a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a7c:	7e0f      	ldrb	r7, [r1, #24]
 8007a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a80:	2f78      	cmp	r7, #120	@ 0x78
 8007a82:	4691      	mov	r9, r2
 8007a84:	4680      	mov	r8, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	469a      	mov	sl, r3
 8007a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a8e:	d807      	bhi.n	8007aa0 <_printf_i+0x28>
 8007a90:	2f62      	cmp	r7, #98	@ 0x62
 8007a92:	d80a      	bhi.n	8007aaa <_printf_i+0x32>
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	f000 80d2 	beq.w	8007c3e <_printf_i+0x1c6>
 8007a9a:	2f58      	cmp	r7, #88	@ 0x58
 8007a9c:	f000 80b9 	beq.w	8007c12 <_printf_i+0x19a>
 8007aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007aa8:	e03a      	b.n	8007b20 <_printf_i+0xa8>
 8007aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aae:	2b15      	cmp	r3, #21
 8007ab0:	d8f6      	bhi.n	8007aa0 <_printf_i+0x28>
 8007ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ab8 <_printf_i+0x40>)
 8007ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b25 	.word	0x08007b25
 8007ac0:	08007aa1 	.word	0x08007aa1
 8007ac4:	08007aa1 	.word	0x08007aa1
 8007ac8:	08007aa1 	.word	0x08007aa1
 8007acc:	08007aa1 	.word	0x08007aa1
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007aa1 	.word	0x08007aa1
 8007ad8:	08007aa1 	.word	0x08007aa1
 8007adc:	08007aa1 	.word	0x08007aa1
 8007ae0:	08007aa1 	.word	0x08007aa1
 8007ae4:	08007c25 	.word	0x08007c25
 8007ae8:	08007b4f 	.word	0x08007b4f
 8007aec:	08007bdf 	.word	0x08007bdf
 8007af0:	08007aa1 	.word	0x08007aa1
 8007af4:	08007aa1 	.word	0x08007aa1
 8007af8:	08007c47 	.word	0x08007c47
 8007afc:	08007aa1 	.word	0x08007aa1
 8007b00:	08007b4f 	.word	0x08007b4f
 8007b04:	08007aa1 	.word	0x08007aa1
 8007b08:	08007aa1 	.word	0x08007aa1
 8007b0c:	08007be7 	.word	0x08007be7
 8007b10:	6833      	ldr	r3, [r6, #0]
 8007b12:	1d1a      	adds	r2, r3, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6032      	str	r2, [r6, #0]
 8007b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b20:	2301      	movs	r3, #1
 8007b22:	e09d      	b.n	8007c60 <_printf_i+0x1e8>
 8007b24:	6833      	ldr	r3, [r6, #0]
 8007b26:	6820      	ldr	r0, [r4, #0]
 8007b28:	1d19      	adds	r1, r3, #4
 8007b2a:	6031      	str	r1, [r6, #0]
 8007b2c:	0606      	lsls	r6, r0, #24
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0xbc>
 8007b30:	681d      	ldr	r5, [r3, #0]
 8007b32:	e003      	b.n	8007b3c <_printf_i+0xc4>
 8007b34:	0645      	lsls	r5, r0, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0xb8>
 8007b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	da03      	bge.n	8007b48 <_printf_i+0xd0>
 8007b40:	232d      	movs	r3, #45	@ 0x2d
 8007b42:	426d      	negs	r5, r5
 8007b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b48:	4859      	ldr	r0, [pc, #356]	@ (8007cb0 <_printf_i+0x238>)
 8007b4a:	230a      	movs	r3, #10
 8007b4c:	e011      	b.n	8007b72 <_printf_i+0xfa>
 8007b4e:	6821      	ldr	r1, [r4, #0]
 8007b50:	6833      	ldr	r3, [r6, #0]
 8007b52:	0608      	lsls	r0, r1, #24
 8007b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b58:	d402      	bmi.n	8007b60 <_printf_i+0xe8>
 8007b5a:	0649      	lsls	r1, r1, #25
 8007b5c:	bf48      	it	mi
 8007b5e:	b2ad      	uxthmi	r5, r5
 8007b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b62:	4853      	ldr	r0, [pc, #332]	@ (8007cb0 <_printf_i+0x238>)
 8007b64:	6033      	str	r3, [r6, #0]
 8007b66:	bf14      	ite	ne
 8007b68:	230a      	movne	r3, #10
 8007b6a:	2308      	moveq	r3, #8
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b72:	6866      	ldr	r6, [r4, #4]
 8007b74:	60a6      	str	r6, [r4, #8]
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	bfa2      	ittt	ge
 8007b7a:	6821      	ldrge	r1, [r4, #0]
 8007b7c:	f021 0104 	bicge.w	r1, r1, #4
 8007b80:	6021      	strge	r1, [r4, #0]
 8007b82:	b90d      	cbnz	r5, 8007b88 <_printf_i+0x110>
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	d04b      	beq.n	8007c20 <_printf_i+0x1a8>
 8007b88:	4616      	mov	r6, r2
 8007b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b92:	5dc7      	ldrb	r7, [r0, r7]
 8007b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b98:	462f      	mov	r7, r5
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	d9f4      	bls.n	8007b8a <_printf_i+0x112>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d10b      	bne.n	8007bbc <_printf_i+0x144>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07df      	lsls	r7, r3, #31
 8007ba8:	d508      	bpl.n	8007bbc <_printf_i+0x144>
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	bfde      	ittt	le
 8007bb2:	2330      	movle	r3, #48	@ 0x30
 8007bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bbc:	1b92      	subs	r2, r2, r6
 8007bbe:	6122      	str	r2, [r4, #16]
 8007bc0:	f8cd a000 	str.w	sl, [sp]
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	aa03      	add	r2, sp, #12
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7ff fee6 	bl	800799c <_printf_common>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d14a      	bne.n	8007c6a <_printf_i+0x1f2>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b004      	add	sp, #16
 8007bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	4833      	ldr	r0, [pc, #204]	@ (8007cb4 <_printf_i+0x23c>)
 8007be8:	2778      	movs	r7, #120	@ 0x78
 8007bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	6831      	ldr	r1, [r6, #0]
 8007bf2:	061f      	lsls	r7, r3, #24
 8007bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bf8:	d402      	bmi.n	8007c00 <_printf_i+0x188>
 8007bfa:	065f      	lsls	r7, r3, #25
 8007bfc:	bf48      	it	mi
 8007bfe:	b2ad      	uxthmi	r5, r5
 8007c00:	6031      	str	r1, [r6, #0]
 8007c02:	07d9      	lsls	r1, r3, #31
 8007c04:	bf44      	itt	mi
 8007c06:	f043 0320 	orrmi.w	r3, r3, #32
 8007c0a:	6023      	strmi	r3, [r4, #0]
 8007c0c:	b11d      	cbz	r5, 8007c16 <_printf_i+0x19e>
 8007c0e:	2310      	movs	r3, #16
 8007c10:	e7ac      	b.n	8007b6c <_printf_i+0xf4>
 8007c12:	4827      	ldr	r0, [pc, #156]	@ (8007cb0 <_printf_i+0x238>)
 8007c14:	e7e9      	b.n	8007bea <_printf_i+0x172>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	f023 0320 	bic.w	r3, r3, #32
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	e7f6      	b.n	8007c0e <_printf_i+0x196>
 8007c20:	4616      	mov	r6, r2
 8007c22:	e7bd      	b.n	8007ba0 <_printf_i+0x128>
 8007c24:	6833      	ldr	r3, [r6, #0]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	6961      	ldr	r1, [r4, #20]
 8007c2a:	1d18      	adds	r0, r3, #4
 8007c2c:	6030      	str	r0, [r6, #0]
 8007c2e:	062e      	lsls	r6, r5, #24
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	d501      	bpl.n	8007c38 <_printf_i+0x1c0>
 8007c34:	6019      	str	r1, [r3, #0]
 8007c36:	e002      	b.n	8007c3e <_printf_i+0x1c6>
 8007c38:	0668      	lsls	r0, r5, #25
 8007c3a:	d5fb      	bpl.n	8007c34 <_printf_i+0x1bc>
 8007c3c:	8019      	strh	r1, [r3, #0]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	4616      	mov	r6, r2
 8007c44:	e7bc      	b.n	8007bc0 <_printf_i+0x148>
 8007c46:	6833      	ldr	r3, [r6, #0]
 8007c48:	1d1a      	adds	r2, r3, #4
 8007c4a:	6032      	str	r2, [r6, #0]
 8007c4c:	681e      	ldr	r6, [r3, #0]
 8007c4e:	6862      	ldr	r2, [r4, #4]
 8007c50:	2100      	movs	r1, #0
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7f8 fb54 	bl	8000300 <memchr>
 8007c58:	b108      	cbz	r0, 8007c5e <_printf_i+0x1e6>
 8007c5a:	1b80      	subs	r0, r0, r6
 8007c5c:	6060      	str	r0, [r4, #4]
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	6123      	str	r3, [r4, #16]
 8007c62:	2300      	movs	r3, #0
 8007c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c68:	e7aa      	b.n	8007bc0 <_printf_i+0x148>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	47d0      	blx	sl
 8007c74:	3001      	adds	r0, #1
 8007c76:	d0ad      	beq.n	8007bd4 <_printf_i+0x15c>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	079b      	lsls	r3, r3, #30
 8007c7c:	d413      	bmi.n	8007ca6 <_printf_i+0x22e>
 8007c7e:	68e0      	ldr	r0, [r4, #12]
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	4298      	cmp	r0, r3
 8007c84:	bfb8      	it	lt
 8007c86:	4618      	movlt	r0, r3
 8007c88:	e7a6      	b.n	8007bd8 <_printf_i+0x160>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4640      	mov	r0, r8
 8007c92:	47d0      	blx	sl
 8007c94:	3001      	adds	r0, #1
 8007c96:	d09d      	beq.n	8007bd4 <_printf_i+0x15c>
 8007c98:	3501      	adds	r5, #1
 8007c9a:	68e3      	ldr	r3, [r4, #12]
 8007c9c:	9903      	ldr	r1, [sp, #12]
 8007c9e:	1a5b      	subs	r3, r3, r1
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	dcf2      	bgt.n	8007c8a <_printf_i+0x212>
 8007ca4:	e7eb      	b.n	8007c7e <_printf_i+0x206>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	f104 0619 	add.w	r6, r4, #25
 8007cac:	e7f5      	b.n	8007c9a <_printf_i+0x222>
 8007cae:	bf00      	nop
 8007cb0:	080083bc 	.word	0x080083bc
 8007cb4:	080083cd 	.word	0x080083cd

08007cb8 <__sflush_r>:
 8007cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	0716      	lsls	r6, r2, #28
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	d454      	bmi.n	8007d72 <__sflush_r+0xba>
 8007cc8:	684b      	ldr	r3, [r1, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	dc02      	bgt.n	8007cd4 <__sflush_r+0x1c>
 8007cce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	dd48      	ble.n	8007d66 <__sflush_r+0xae>
 8007cd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cd6:	2e00      	cmp	r6, #0
 8007cd8:	d045      	beq.n	8007d66 <__sflush_r+0xae>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ce0:	682f      	ldr	r7, [r5, #0]
 8007ce2:	6a21      	ldr	r1, [r4, #32]
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	d030      	beq.n	8007d4a <__sflush_r+0x92>
 8007ce8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	0759      	lsls	r1, r3, #29
 8007cee:	d505      	bpl.n	8007cfc <__sflush_r+0x44>
 8007cf0:	6863      	ldr	r3, [r4, #4]
 8007cf2:	1ad2      	subs	r2, r2, r3
 8007cf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cf6:	b10b      	cbz	r3, 8007cfc <__sflush_r+0x44>
 8007cf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d00:	6a21      	ldr	r1, [r4, #32]
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b0      	blx	r6
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	d106      	bne.n	8007d1a <__sflush_r+0x62>
 8007d0c:	6829      	ldr	r1, [r5, #0]
 8007d0e:	291d      	cmp	r1, #29
 8007d10:	d82b      	bhi.n	8007d6a <__sflush_r+0xb2>
 8007d12:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <__sflush_r+0x104>)
 8007d14:	410a      	asrs	r2, r1
 8007d16:	07d6      	lsls	r6, r2, #31
 8007d18:	d427      	bmi.n	8007d6a <__sflush_r+0xb2>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	6062      	str	r2, [r4, #4]
 8007d1e:	04d9      	lsls	r1, r3, #19
 8007d20:	6922      	ldr	r2, [r4, #16]
 8007d22:	6022      	str	r2, [r4, #0]
 8007d24:	d504      	bpl.n	8007d30 <__sflush_r+0x78>
 8007d26:	1c42      	adds	r2, r0, #1
 8007d28:	d101      	bne.n	8007d2e <__sflush_r+0x76>
 8007d2a:	682b      	ldr	r3, [r5, #0]
 8007d2c:	b903      	cbnz	r3, 8007d30 <__sflush_r+0x78>
 8007d2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d32:	602f      	str	r7, [r5, #0]
 8007d34:	b1b9      	cbz	r1, 8007d66 <__sflush_r+0xae>
 8007d36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	d002      	beq.n	8007d44 <__sflush_r+0x8c>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7ff fca0 	bl	8007684 <_free_r>
 8007d44:	2300      	movs	r3, #0
 8007d46:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d48:	e00d      	b.n	8007d66 <__sflush_r+0xae>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b0      	blx	r6
 8007d50:	4602      	mov	r2, r0
 8007d52:	1c50      	adds	r0, r2, #1
 8007d54:	d1c9      	bne.n	8007cea <__sflush_r+0x32>
 8007d56:	682b      	ldr	r3, [r5, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0c6      	beq.n	8007cea <__sflush_r+0x32>
 8007d5c:	2b1d      	cmp	r3, #29
 8007d5e:	d001      	beq.n	8007d64 <__sflush_r+0xac>
 8007d60:	2b16      	cmp	r3, #22
 8007d62:	d11e      	bne.n	8007da2 <__sflush_r+0xea>
 8007d64:	602f      	str	r7, [r5, #0]
 8007d66:	2000      	movs	r0, #0
 8007d68:	e022      	b.n	8007db0 <__sflush_r+0xf8>
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d6e:	b21b      	sxth	r3, r3
 8007d70:	e01b      	b.n	8007daa <__sflush_r+0xf2>
 8007d72:	690f      	ldr	r7, [r1, #16]
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	d0f6      	beq.n	8007d66 <__sflush_r+0xae>
 8007d78:	0793      	lsls	r3, r2, #30
 8007d7a:	680e      	ldr	r6, [r1, #0]
 8007d7c:	bf08      	it	eq
 8007d7e:	694b      	ldreq	r3, [r1, #20]
 8007d80:	600f      	str	r7, [r1, #0]
 8007d82:	bf18      	it	ne
 8007d84:	2300      	movne	r3, #0
 8007d86:	eba6 0807 	sub.w	r8, r6, r7
 8007d8a:	608b      	str	r3, [r1, #8]
 8007d8c:	f1b8 0f00 	cmp.w	r8, #0
 8007d90:	dde9      	ble.n	8007d66 <__sflush_r+0xae>
 8007d92:	6a21      	ldr	r1, [r4, #32]
 8007d94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d96:	4643      	mov	r3, r8
 8007d98:	463a      	mov	r2, r7
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b0      	blx	r6
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	dc08      	bgt.n	8007db4 <__sflush_r+0xfc>
 8007da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	f04f 30ff 	mov.w	r0, #4294967295
 8007db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db4:	4407      	add	r7, r0
 8007db6:	eba8 0800 	sub.w	r8, r8, r0
 8007dba:	e7e7      	b.n	8007d8c <__sflush_r+0xd4>
 8007dbc:	dfbffffe 	.word	0xdfbffffe

08007dc0 <_fflush_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	690b      	ldr	r3, [r1, #16]
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	b913      	cbnz	r3, 8007dd0 <_fflush_r+0x10>
 8007dca:	2500      	movs	r5, #0
 8007dcc:	4628      	mov	r0, r5
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	b118      	cbz	r0, 8007dda <_fflush_r+0x1a>
 8007dd2:	6a03      	ldr	r3, [r0, #32]
 8007dd4:	b90b      	cbnz	r3, 8007dda <_fflush_r+0x1a>
 8007dd6:	f7ff fb05 	bl	80073e4 <__sinit>
 8007dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f3      	beq.n	8007dca <_fflush_r+0xa>
 8007de2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007de4:	07d0      	lsls	r0, r2, #31
 8007de6:	d404      	bmi.n	8007df2 <_fflush_r+0x32>
 8007de8:	0599      	lsls	r1, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_fflush_r+0x32>
 8007dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dee:	f7ff fc32 	bl	8007656 <__retarget_lock_acquire_recursive>
 8007df2:	4628      	mov	r0, r5
 8007df4:	4621      	mov	r1, r4
 8007df6:	f7ff ff5f 	bl	8007cb8 <__sflush_r>
 8007dfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dfc:	07da      	lsls	r2, r3, #31
 8007dfe:	4605      	mov	r5, r0
 8007e00:	d4e4      	bmi.n	8007dcc <_fflush_r+0xc>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	059b      	lsls	r3, r3, #22
 8007e06:	d4e1      	bmi.n	8007dcc <_fflush_r+0xc>
 8007e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e0a:	f7ff fc25 	bl	8007658 <__retarget_lock_release_recursive>
 8007e0e:	e7dd      	b.n	8007dcc <_fflush_r+0xc>

08007e10 <__swbuf_r>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	460e      	mov	r6, r1
 8007e14:	4614      	mov	r4, r2
 8007e16:	4605      	mov	r5, r0
 8007e18:	b118      	cbz	r0, 8007e22 <__swbuf_r+0x12>
 8007e1a:	6a03      	ldr	r3, [r0, #32]
 8007e1c:	b90b      	cbnz	r3, 8007e22 <__swbuf_r+0x12>
 8007e1e:	f7ff fae1 	bl	80073e4 <__sinit>
 8007e22:	69a3      	ldr	r3, [r4, #24]
 8007e24:	60a3      	str	r3, [r4, #8]
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	071a      	lsls	r2, r3, #28
 8007e2a:	d501      	bpl.n	8007e30 <__swbuf_r+0x20>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	b943      	cbnz	r3, 8007e42 <__swbuf_r+0x32>
 8007e30:	4621      	mov	r1, r4
 8007e32:	4628      	mov	r0, r5
 8007e34:	f000 f82a 	bl	8007e8c <__swsetup_r>
 8007e38:	b118      	cbz	r0, 8007e42 <__swbuf_r+0x32>
 8007e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e3e:	4638      	mov	r0, r7
 8007e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	1a98      	subs	r0, r3, r2
 8007e48:	6963      	ldr	r3, [r4, #20]
 8007e4a:	b2f6      	uxtb	r6, r6
 8007e4c:	4283      	cmp	r3, r0
 8007e4e:	4637      	mov	r7, r6
 8007e50:	dc05      	bgt.n	8007e5e <__swbuf_r+0x4e>
 8007e52:	4621      	mov	r1, r4
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff ffb3 	bl	8007dc0 <_fflush_r>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1ed      	bne.n	8007e3a <__swbuf_r+0x2a>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	6022      	str	r2, [r4, #0]
 8007e6a:	701e      	strb	r6, [r3, #0]
 8007e6c:	6962      	ldr	r2, [r4, #20]
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d004      	beq.n	8007e7e <__swbuf_r+0x6e>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	07db      	lsls	r3, r3, #31
 8007e78:	d5e1      	bpl.n	8007e3e <__swbuf_r+0x2e>
 8007e7a:	2e0a      	cmp	r6, #10
 8007e7c:	d1df      	bne.n	8007e3e <__swbuf_r+0x2e>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f7ff ff9d 	bl	8007dc0 <_fflush_r>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d0d9      	beq.n	8007e3e <__swbuf_r+0x2e>
 8007e8a:	e7d6      	b.n	8007e3a <__swbuf_r+0x2a>

08007e8c <__swsetup_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4b29      	ldr	r3, [pc, #164]	@ (8007f34 <__swsetup_r+0xa8>)
 8007e90:	4605      	mov	r5, r0
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	460c      	mov	r4, r1
 8007e96:	b118      	cbz	r0, 8007ea0 <__swsetup_r+0x14>
 8007e98:	6a03      	ldr	r3, [r0, #32]
 8007e9a:	b90b      	cbnz	r3, 8007ea0 <__swsetup_r+0x14>
 8007e9c:	f7ff faa2 	bl	80073e4 <__sinit>
 8007ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea4:	0719      	lsls	r1, r3, #28
 8007ea6:	d422      	bmi.n	8007eee <__swsetup_r+0x62>
 8007ea8:	06da      	lsls	r2, r3, #27
 8007eaa:	d407      	bmi.n	8007ebc <__swsetup_r+0x30>
 8007eac:	2209      	movs	r2, #9
 8007eae:	602a      	str	r2, [r5, #0]
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	e033      	b.n	8007f24 <__swsetup_r+0x98>
 8007ebc:	0758      	lsls	r0, r3, #29
 8007ebe:	d512      	bpl.n	8007ee6 <__swsetup_r+0x5a>
 8007ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ec2:	b141      	cbz	r1, 8007ed6 <__swsetup_r+0x4a>
 8007ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ec8:	4299      	cmp	r1, r3
 8007eca:	d002      	beq.n	8007ed2 <__swsetup_r+0x46>
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f7ff fbd9 	bl	8007684 <_free_r>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f043 0308 	orr.w	r3, r3, #8
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	b94b      	cbnz	r3, 8007f06 <__swsetup_r+0x7a>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007efc:	d003      	beq.n	8007f06 <__swsetup_r+0x7a>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	f000 f883 	bl	800800c <__smakebuf_r>
 8007f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0a:	f013 0201 	ands.w	r2, r3, #1
 8007f0e:	d00a      	beq.n	8007f26 <__swsetup_r+0x9a>
 8007f10:	2200      	movs	r2, #0
 8007f12:	60a2      	str	r2, [r4, #8]
 8007f14:	6962      	ldr	r2, [r4, #20]
 8007f16:	4252      	negs	r2, r2
 8007f18:	61a2      	str	r2, [r4, #24]
 8007f1a:	6922      	ldr	r2, [r4, #16]
 8007f1c:	b942      	cbnz	r2, 8007f30 <__swsetup_r+0xa4>
 8007f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f22:	d1c5      	bne.n	8007eb0 <__swsetup_r+0x24>
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	0799      	lsls	r1, r3, #30
 8007f28:	bf58      	it	pl
 8007f2a:	6962      	ldrpl	r2, [r4, #20]
 8007f2c:	60a2      	str	r2, [r4, #8]
 8007f2e:	e7f4      	b.n	8007f1a <__swsetup_r+0x8e>
 8007f30:	2000      	movs	r0, #0
 8007f32:	e7f7      	b.n	8007f24 <__swsetup_r+0x98>
 8007f34:	240000c8 	.word	0x240000c8

08007f38 <_raise_r>:
 8007f38:	291f      	cmp	r1, #31
 8007f3a:	b538      	push	{r3, r4, r5, lr}
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	d904      	bls.n	8007f4c <_raise_r+0x14>
 8007f42:	2316      	movs	r3, #22
 8007f44:	6003      	str	r3, [r0, #0]
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f4e:	b112      	cbz	r2, 8007f56 <_raise_r+0x1e>
 8007f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f54:	b94b      	cbnz	r3, 8007f6a <_raise_r+0x32>
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f830 	bl	8007fbc <_getpid_r>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	4601      	mov	r1, r0
 8007f60:	4628      	mov	r0, r5
 8007f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f66:	f000 b817 	b.w	8007f98 <_kill_r>
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d00a      	beq.n	8007f84 <_raise_r+0x4c>
 8007f6e:	1c59      	adds	r1, r3, #1
 8007f70:	d103      	bne.n	8007f7a <_raise_r+0x42>
 8007f72:	2316      	movs	r3, #22
 8007f74:	6003      	str	r3, [r0, #0]
 8007f76:	2001      	movs	r0, #1
 8007f78:	e7e7      	b.n	8007f4a <_raise_r+0x12>
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f80:	4620      	mov	r0, r4
 8007f82:	4798      	blx	r3
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7e0      	b.n	8007f4a <_raise_r+0x12>

08007f88 <raise>:
 8007f88:	4b02      	ldr	r3, [pc, #8]	@ (8007f94 <raise+0xc>)
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	f7ff bfd3 	b.w	8007f38 <_raise_r>
 8007f92:	bf00      	nop
 8007f94:	240000c8 	.word	0x240000c8

08007f98 <_kill_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d07      	ldr	r5, [pc, #28]	@ (8007fb8 <_kill_r+0x20>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	602b      	str	r3, [r5, #0]
 8007fa6:	f7f9 f847 	bl	8001038 <_kill>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	d102      	bne.n	8007fb4 <_kill_r+0x1c>
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	b103      	cbz	r3, 8007fb4 <_kill_r+0x1c>
 8007fb2:	6023      	str	r3, [r4, #0]
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
 8007fb6:	bf00      	nop
 8007fb8:	240043e8 	.word	0x240043e8

08007fbc <_getpid_r>:
 8007fbc:	f7f9 b834 	b.w	8001028 <_getpid>

08007fc0 <__swhatbuf_r>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	b096      	sub	sp, #88	@ 0x58
 8007fcc:	4615      	mov	r5, r2
 8007fce:	461e      	mov	r6, r3
 8007fd0:	da0d      	bge.n	8007fee <__swhatbuf_r+0x2e>
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	bf14      	ite	ne
 8007fde:	2340      	movne	r3, #64	@ 0x40
 8007fe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	6031      	str	r1, [r6, #0]
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	b016      	add	sp, #88	@ 0x58
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	466a      	mov	r2, sp
 8007ff0:	f000 f848 	bl	8008084 <_fstat_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dbec      	blt.n	8007fd2 <__swhatbuf_r+0x12>
 8007ff8:	9901      	ldr	r1, [sp, #4]
 8007ffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008002:	4259      	negs	r1, r3
 8008004:	4159      	adcs	r1, r3
 8008006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800800a:	e7eb      	b.n	8007fe4 <__swhatbuf_r+0x24>

0800800c <__smakebuf_r>:
 800800c:	898b      	ldrh	r3, [r1, #12]
 800800e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008010:	079d      	lsls	r5, r3, #30
 8008012:	4606      	mov	r6, r0
 8008014:	460c      	mov	r4, r1
 8008016:	d507      	bpl.n	8008028 <__smakebuf_r+0x1c>
 8008018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	6123      	str	r3, [r4, #16]
 8008020:	2301      	movs	r3, #1
 8008022:	6163      	str	r3, [r4, #20]
 8008024:	b003      	add	sp, #12
 8008026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008028:	ab01      	add	r3, sp, #4
 800802a:	466a      	mov	r2, sp
 800802c:	f7ff ffc8 	bl	8007fc0 <__swhatbuf_r>
 8008030:	9f00      	ldr	r7, [sp, #0]
 8008032:	4605      	mov	r5, r0
 8008034:	4639      	mov	r1, r7
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff f8bc 	bl	80071b4 <_malloc_r>
 800803c:	b948      	cbnz	r0, 8008052 <__smakebuf_r+0x46>
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	059a      	lsls	r2, r3, #22
 8008044:	d4ee      	bmi.n	8008024 <__smakebuf_r+0x18>
 8008046:	f023 0303 	bic.w	r3, r3, #3
 800804a:	f043 0302 	orr.w	r3, r3, #2
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	e7e2      	b.n	8008018 <__smakebuf_r+0xc>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	6020      	str	r0, [r4, #0]
 8008056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008062:	b15b      	cbz	r3, 800807c <__smakebuf_r+0x70>
 8008064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008068:	4630      	mov	r0, r6
 800806a:	f000 f81d 	bl	80080a8 <_isatty_r>
 800806e:	b128      	cbz	r0, 800807c <__smakebuf_r+0x70>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	431d      	orrs	r5, r3
 8008080:	81a5      	strh	r5, [r4, #12]
 8008082:	e7cf      	b.n	8008024 <__smakebuf_r+0x18>

08008084 <_fstat_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d07      	ldr	r5, [pc, #28]	@ (80080a4 <_fstat_r+0x20>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f7f9 f831 	bl	80010f8 <_fstat>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d102      	bne.n	80080a0 <_fstat_r+0x1c>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b103      	cbz	r3, 80080a0 <_fstat_r+0x1c>
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	240043e8 	.word	0x240043e8

080080a8 <_isatty_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	@ (80080c4 <_isatty_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7f9 f830 	bl	8001118 <_isatty>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_isatty_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_isatty_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	240043e8 	.word	0x240043e8

080080c8 <_init>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr

080080d4 <_fini>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr
